<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>verwendungsnachweis Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/verwendungsnachweis/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 12 Sep 2017 09:24:56 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>verwendungsnachweis Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>What todo?</title>
		<link>/blog/what-todo/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 08 May 2015 06:00:00 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[Code Inspector]]></category>
		<category><![CDATA[ci]]></category>
		<category><![CDATA[todo]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[verwendungsnachweis]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=73938</guid>

					<description><![CDATA[<p>Aufgaben und Todos verwalten - gerade in einem Team - kann anstrengend sein. Hier verrate ich dir eine Methode, wie du TODO's einfach im ABAP-Quelltext kennzeichnest.</p>
<p>Der Beitrag <a href="/blog/what-todo/">What todo?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Bei der Programmierung, beim Debuggen, Testen und bei der Durchsicht von Programmen stolpere ich häufig über Ungereimtheiten, offensichtliche Fehler, Dinge, die verbessert werden können, unzureichendes Fehlerhandling und so weiter.</p>
<p>Da diese Dinge zwar geändert werden sollten, aber aktuell nicht im Fokus stehen, habe ich mir eine einfache aber recht wirkungsvolle Methode ausgedacht, diese Programmstellen zu kennzeichnen.</p>
<h2>TODO</h2>
<p>Ich lege eine Klasse ZCL_TODO an mit den statischen Methoden FRAGE, WICHTIG und ACHTUNG. Alle Methoden haben die Importing-Parameter WER (Optional) und WAS (preferred parameter).</p>
<p>Die Methoden haben keinen Quelltext. Dieser ist auch nicht nötig, denn die Methoden sollen lediglich als Merker für später dienen. Wenn ich z.B. im aktuellen Programm darüber stolpere, warum der ELSE-Zweig nicht prozessiert wird, dann schreibe ich an diese Stelle:</p>
<pre>ZCL_TODO=&gt;FRAGE( 'Was ist mit ELSE?' ).</pre>
<p>Wenn ich bemerke, dass ein Funktionsaufruf falsch oder unvollständig ist, dann schreibe ich:</p>
<pre>ZCL_TODO=&gt;WICHTIG( wer = 'Enno' was = 'Parameter xyz prüfen! ).</pre>
<h2>Verwendungsnachweis</h2>
<p>Das schöne an dieser Lösung ist, dass man mithilfe des Verwendungsnachweises für die Klasse ZCL_TODO sofort sehen kann, was man sich gerne merken wollte und was noch zu tun ist. Und das alles ohne großartige Hilfsmittel, Listen oder Dokumentationen.</p>
<p>Am besten eignet es sich für größere Programmierprojekte und Objekte, die aktuell bearbeitet werden. Wenn das Objekt gerade gar nicht in Bearbeitung ist, muss zur Quelltextänderung natürlich ein Transportauftrag angelegt werden. Aber auch das ist nicht weiter schlimm; dann hat derjenige, der das Objekt später ändern muss den schwarzen Peter. Hier muss selbstverständlich aufgepasst werden, dass der Entwickler mitbekommt, dass dieses Objekt nicht in seinen Transportauftrag übernommen wird. Diese wird deutlich dadurch, dass eine Meldung &#8220;Zu Auftrag 123 wurde eine Aufgabe hinzugefügt&#8221; (oder so ähnlich) erscheint.</p>
<h2>Code Inspector</h2>
<p>Um sicher zu gehen, dass Änderungen auch tatsächlich gemacht werden, kann der Code Inspector bemüht werden. Hier kann man die Prüfung auf Suchmuster entsprechend einstellen, dass der String &#8220;ZCL_TODO&#8221; einen Fehler auswirft. Wenn man jetzt noch einstellt, dass bei Freigabe des Transportauftrags die Code-Inspector-Prüfungen laufen, kann eigentlich nichts mehr schief gehen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/05/2015-05-07_18-55-29.png"><img fetchpriority="high" decoding="async" class="alignnone size-medium wp-image-74016" src="https://tricktresor.com/wp-content/uploads/2015/05/2015-05-07_18-55-29-300x214.png" alt="2015-05-07_18-55-29" width="300" height="214" srcset="/wp-content/uploads/2015/05/2015-05-07_18-55-29-300x214.png 300w, /wp-content/uploads/2015/05/2015-05-07_18-55-29.png 691w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Der Beitrag <a href="/blog/what-todo/">What todo?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Versteckte Befehle</title>
		<link>/blog/versteckte-befehle/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 09 Nov 2006 14:19:42 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[aufrufhierarchie]]></category>
		<category><![CDATA[versteckt]]></category>
		<category><![CDATA[Baum]]></category>
		<category><![CDATA[Kleinigkeiten]]></category>
		<category><![CDATA[Editor]]></category>
		<category><![CDATA[verwendungsnachweis]]></category>
		<category><![CDATA[Hierarchie]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=390</guid>

					<description><![CDATA[<p>Ab Release 4.6 sind einige Befehle aus dem ABAP-Editor verschwunden, die durchaus n&#252;tzlich sein k&#246;nnten. So konnte man z.B. einen Aufrufgraph der Unterprogramme anzeigen lassen.</p>
<p>Der Beitrag <a href="/blog/versteckte-befehle/">Versteckte Befehle</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Ab Release 4.6 sind einige Befehle aus dem ABAP-Editor verschwunden, die durchaus nützlich sein könnten. So konnte man z.B. einen Aufrufgraph der Unterprogramme anzeigen lassen.</p>
<p class="text1">Die Funktionen sind jedoch noch aktiv! Sie können sie aufrufen, indem Sie die unten aufgeführten Funktionscodes in die OK-Code-Zeile des SAPGUI eingeben.</p>
<p class="text1">Sie müssen dabei nicht auf Groß-Klein-Schreibung achten.</p>
<p class="text1">Die Funktionen funktionieren sogar noch im neuen Editor unter ECC 6.0!!</p>
<h2 class="head1">Aufrufgraph &#8211; Routine ruft: UTCA</h2>
<p class="text1">Cursor auf einer Routine positionieren; Es werden dann alle Aufrufe der aktuellen Routine gezeigt. Aufgerufen aus dem Hauptprogramm erfolgt die Auflistung aller Ereignisse mit den jeweils dort gerufenen Routinen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2006/11/utca2.png"><img decoding="async" class="alignnone size-full wp-image-1018099" src="https://tricktresor.com/wp-content/uploads/2006/11/utca2.png" alt="" width="646" height="298" srcset="/wp-content/uploads/2006/11/utca2.png 646w, /wp-content/uploads/2006/11/utca2-300x138.png 300w" sizes="(max-width: 646px) 100vw, 646px" /></a></p>
<p>Hier die Aufrufhierarchie am Beispiel des Programms RSTXTRAN zum Transportieren von SAP-Script-Texten:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2006/11/utca1.png"><img decoding="async" class="alignnone size-full wp-image-1018100" src="https://tricktresor.com/wp-content/uploads/2006/11/utca1.png" alt="" width="682" height="487" srcset="/wp-content/uploads/2006/11/utca1.png 682w, /wp-content/uploads/2006/11/utca1-300x214.png 300w, /wp-content/uploads/2006/11/utca1-240x172.png 240w" sizes="(max-width: 682px) 100vw, 682px" /></a></p>
<h2 class="head1">Aufrufgrpah &#8211; Routine wird gerufen von: UTIN</h2>
<p class="text1">Cursor auf einer Routine positionieren; Es wird dann angezeigt, von welchen Routinen die aktuelle Routine aufgerufen wird.</p>
<h2 class="head1">Cross-Reference: CACR</h2>
<p class="text1">Anzeige der Crossreference des aktuellen Programms. Aufgerufen wird das Programm RSINCL00 zur Anzeige der <em>Referenzliste</em> bzw. dem <em>Programminternen Umfeld</em>. Hier eine Ausgabe zum Standardprogramm RSUPD_ABSTAMP. Sehr schön: Es gibt eine Übersicht über die Datenbankoperationen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2006/11/cacr2.png"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-1018101" src="https://tricktresor.com/wp-content/uploads/2006/11/cacr2.png" alt="" width="574" height="472" srcset="/wp-content/uploads/2006/11/cacr2.png 574w, /wp-content/uploads/2006/11/cacr2-300x247.png 300w" sizes="(max-width: 574px) 100vw, 574px" /></a></p>
<p><a href="https://tricktresor.com/wp-content/uploads/2006/11/cacr1.png"><img loading="lazy" decoding="async" class="alignnone size-large wp-image-1018102" src="https://tricktresor.com/wp-content/uploads/2006/11/cacr1.png" alt="" width="640" height="456" srcset="/wp-content/uploads/2006/11/cacr1.png 641w, /wp-content/uploads/2006/11/cacr1-300x214.png 300w, /wp-content/uploads/2006/11/cacr1-240x172.png 240w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
<h2 class="head1">Data-Browser: WB_DATA_BROWSER</h2>
<p>Cursor auf einer Datenbanktabelle positionieren; Es wird dann in die SE16 zu dieser Tabelle verzweigt.</p>
<h2 class="head1">Strukturhierarchie: PGST</h2>
<p class="text1">Zeigt die Strukturhierarchie des aktuellen Programms an.</p>
<p>Der Beitrag <a href="/blog/versteckte-befehle/">Versteckte Befehle</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
