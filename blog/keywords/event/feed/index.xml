<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>event Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/event/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Wed, 29 Aug 2018 20:07:23 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>event Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Hacking SAPGUI</title>
		<link>/blog/hacking-sapgui/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 29 Aug 2018 18:10:48 +0000</pubDate>
				<category><![CDATA[ABAP 750]]></category>
		<category><![CDATA[Blog]]></category>
		<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[Ereignis]]></category>
		<category><![CDATA[control]]></category>
		<category><![CDATA[cl_gui_picture]]></category>
		<category><![CDATA[cl_gui_gos_container]]></category>
		<category><![CDATA[Container]]></category>
		<category><![CDATA[event]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1019117</guid>

					<description><![CDATA[<p>Heute bin ich zuf√§llig auf etwas gesto√üen, dass ich erst nicht glauben konnte. Aber eigentlich h√§tte es klar sein m√ºssen. Ich zeige dir erst einmal ein Bild: Vielleicht ist deine erste Reaktion genauso wie meine: via GIPHY Folgende Controls verwende ich f√ºr diesen kleinen Hack: CL_GUI_PICTURE CL_GUI_GOS_CONTAINER Normalerweise wird der GOS-Container nicht explizit aufgerufen, sondern nur implizit von der Klasse CL_GOS_MANAGER verwendet. Container ist Container Im Generic Object Services Men√º wird normalerweise ein Pull-Down-Men√º angezeigt:...</p>
<p>Der Beitrag <a href="/blog/hacking-sapgui/">Hacking SAPGUI</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Heute bin ich zuf√§llig auf etwas gesto√üen, dass ich erst nicht glauben konnte. Aber eigentlich h√§tte es klar sein m√ºssen. Ich zeige dir erst einmal ein Bild:</p>



<figure class="wp-block-image"><img fetchpriority="high" decoding="async" width="404" height="206" src="https://tricktresor.com/wp-content/uploads/2017/09/hacking_sapgui_0.png" alt="" class="wp-image-1019120" srcset="/wp-content/uploads/2017/09/hacking_sapgui_0.png 404w, /wp-content/uploads/2017/09/hacking_sapgui_0-300x153.png 300w" sizes="(max-width: 404px) 100vw, 404px" /><figcaption>Icon an ungew√∂hnlicher Stelle&#8230;</figcaption></figure>



<p>Vielleicht ist deine erste Reaktion genauso wie meine:</p>



<p><div style="width:80%;height:0;padding-bottom:74%;position:relative;"><iframe src="https://giphy.com/embed/glmRyiSI3v5E4" width="100%" height="100%" style="position:absolute" frameborder="0" class="giphy-embed" allowfullscreen></iframe></div><p><a href="https://giphy.com/gifs/glmRyiSI3v5E4">via GIPHY</a></p></p>



<p>Folgende Controls verwende ich f√ºr diesen kleinen Hack:</p>



<ul><li>CL_GUI_PICTURE</li><li>CL_GUI_GOS_CONTAINER</li></ul>



<p>Normalerweise wird der GOS-Container nicht explizit aufgerufen, sondern nur implizit von der Klasse CL_GOS_MANAGER verwendet.</p>



<h2 class="wp-block-heading">Container ist Container</h2>



<p>Im Generic Object Services Men√º wird normalerweise ein Pull-Down-Men√º angezeigt:</p>



<figure class="wp-block-image"><img decoding="async" width="320" height="289" src="https://tricktresor.com/wp-content/uploads/2018/08/gos1.png" alt="" class="wp-image-1019119" srcset="/wp-content/uploads/2018/08/gos1.png 320w, /wp-content/uploads/2018/08/gos1-300x271.png 300w" sizes="(max-width: 320px) 100vw, 320px" /><figcaption>Das GOS-Men√º in Aktion</figcaption></figure>



<p>In einem Men√º k√∂nnen jedoch alle Controls angezeigt werden. Sinnvoll sind hier nur wenige, denn der GOS-Container ist ziemlich klein. Ein Men√º passt dort gut hinein. Aber auch ein Bild oder Icon.</p>



<h2 class="wp-block-heading">Anzeige Icon in Container</h2>



<p>Die Anzeige eines Bildes oder Icons ist ziemlich simpel und schnell erledigt:</p>



<pre class="wp-block-code"><code>REPORT.

PARAMETERS p_test.

INITIALIZATION.

  DATA(picture) = NEW cl_gui_picture( parent = NEW cl_gui_gos_container( width = 38 ) ).
  DATA url TYPE cndp_url.
  CALL FUNCTION 'DP_PUBLISH_WWW_URL'
    EXPORTING
      objid                 = 'ACHTUNG'
      lifetime              = cndp_lifetime_transaction
    IMPORTING
      url                   = url
    EXCEPTIONS
      dp_invalid_parameters = 1
      no_object             = 2
      dp_error_publish      = 3.
  IF sy-subrc = 0.
    picture->load_picture_from_url_async( url = url ).
    picture->set_display_mode( picture->display_mode_fit ).
  ENDIF.</code></pre>



<h2 class="wp-block-heading">Da geht noch mehr&#8230;</h2>



<p>Nachdem ich ein bisschen herumgespielt habe, ist mir eine Eigenschaft aufgefallen, die nicht ganz offensichtlich ist und die ich auch so nicht erwartet h√§tte. So, wie man mehrere Docking-Container an ein Dynpro andocken kann, so kann man auch den CL_GUI_GOS_CONTAINER mehrfach erzeugen.</p>



<p>Zus√§tzlich k√∂nnen in einem Picture-Control auch die Klick- und Doppelklick-Ereignisse aktiviert und verwendet werden.</p>



<p>Auch das Ein- und Ausblenden des Controls ist m√∂glich (Methode SET_VISIBLE).</p>



<h2 class="wp-block-heading">Code</h2>



<p>Folgendes kleine Programm zeigt die M√∂glichkeiten, die sich ergeben:</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="418" height="203" src="https://tricktresor.com/wp-content/uploads/2018/08/hacking_sapgui_2.png" alt="" class="wp-image-1019121" srcset="/wp-content/uploads/2018/08/hacking_sapgui_2.png 418w, /wp-content/uploads/2018/08/hacking_sapgui_2-300x146.png 300w" sizes="(max-width: 418px) 100vw, 418px" /><figcaption>Mehrere GOS-Container</figcaption></figure>



<p>Durch Klicken des Parameters P_SHOW wird das Bild &#8220;ACHTUNG&#8221; ein- und ausgeblendet. Ein Klick auf eines der Icons zeigt eine Info-Meldung. Ich nutze solch kleine Spielereien immer gerne, um mich an die neue Syntax zu gew√∂hnen und auszutesten, was m√∂glich und sinnvoll ist. Hier habe ich die Gelegenheit am Schopfe gepackt und auch funktional programmiert, so dass Method-Chaining √ºber mehrere Methoden hinweg auf ein und das selbe Objekt m√∂glich ist.¬†</p>



<pre class="wp-block-code"><code>REPORT.

PARAMETERS p_test.
PARAMETERS p_show AS CHECKBOX DEFAULT 'X' USER-COMMAND dummy.

CLASS info DEFINITION.
  PUBLIC SECTION.
    METHODS icon IMPORTING name TYPE clike RETURNING VALUE(info) TYPE REF TO info.
    METHODS pic  IMPORTING name TYPE clike RETURNING VALUE(info) TYPE REF TO info.
    METHODS constructor IMPORTING width TYPE i.
    METHODS with_text IMPORTING text TYPE clike RETURNING VALUE(info) TYPE REF TO info..
    METHODS hide.
    METHODS show.
  PROTECTED SECTION.
    DATA picture TYPE REF TO cl_gui_picture.
    METHODS handle_click FOR EVENT picture_click OF cl_gui_picture.
    DATA text TYPE string.
ENDCLASS.

CLASS info IMPLEMENTATION.

  METHOD constructor.
    picture = NEW cl_gui_picture( parent = NEW cl_gui_gos_container( width = width ) ).
    picture->set_registered_events( VALUE #(
                ( eventid = cl_gui_picture=>eventid_picture_click )
                ) ).
    SET HANDLER handle_click FOR picture.
  ENDMETHOD.
  METHOD icon.

    picture->load_picture_from_sap_icons( name ).
    picture->set_display_mode( picture->display_mode_fit ).
    info = me.
  ENDMETHOD.
  METHOD pic.
    DATA url TYPE cndp_url.
    CALL FUNCTION 'DP_PUBLISH_WWW_URL'
      EXPORTING
        objid                 = CONV w3objid( name )
        lifetime              = cndp_lifetime_transaction
      IMPORTING
        url                   = url
      EXCEPTIONS
        dp_invalid_parameters = 1
        no_object             = 2
        dp_error_publish      = 3.
    IF sy-subrc = 0.
      picture->load_picture_from_url_async( url = url ).
      picture->set_display_mode( picture->display_mode_fit ).
    ENDIF.

    info = me.

  ENDMETHOD.

  METHOD with_text.
    me->text = text.
    info = me.
  ENDMETHOD.

  METHOD handle_click.
    CHECK text IS NOT INITIAL.
    MESSAGE text TYPE 'I'.
  ENDMETHOD.

  METHOD hide.
    picture->set_visible( space ).
  ENDMETHOD.
  METHOD show.
    picture->set_visible( 'X' ).
  ENDMETHOD.

ENDCLASS.


INITIALIZATION.
  DATA(info)   = NEW info( 38 )->pic( 'ACHTUNG' ).
  DATA(green)  = NEW info( 39 )->icon( icon_led_green )->with_text( 'Alles ok' ).
  DATA(yellow) = NEW info( 39 )->icon( icon_led_yellow )->with_text( 'hmpfffff' ).
  DATA(red)    = NEW info( 39 )->icon( icon_led_red )->with_text( 'error. error. error.' ).


AT SELECTION-SCREEN OUTPUT.
  CASE p_show.
    WHEN abap_true.
      info->show( ).
    WHEN abap_false.
      info->hide( ).
  ENDCASE.</code></pre>



<h2 class="wp-block-heading">WTF?!</h2>



<p>Man kann √ºbrigens jedes Control in den Container packen! Auch Text-Edit-Controls und HTML-Viewer&#8230; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="üòâ" class="wp-smiley" style="height: 1em; max-height: 1em;" />¬†</p>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="861" height="215" src="https://tricktresor.com/wp-content/uploads/2018/08/hacking_sapgui_text_and_html.png" alt="" class="wp-image-1019126" srcset="/wp-content/uploads/2018/08/hacking_sapgui_text_and_html.png 861w, /wp-content/uploads/2018/08/hacking_sapgui_text_and_html-300x75.png 300w, /wp-content/uploads/2018/08/hacking_sapgui_text_and_html-768x192.png 768w" sizes="(max-width: 861px) 100vw, 861px" /></figure>



<pre class="wp-block-code"><code>REPORT.
PARAMETERS p_test.
INITIALIZATION.

  DATA(html) = NEW cl_gui_html_viewer( parent = NEW cl_gui_gos_container( width = 400 ) ).

  DATA url TYPE c LENGTH 100.
  DATA data TYPE STANDARD TABLE OF w3_html.

  data = VALUE #( ( '&lt;html>&lt;head>&lt;style>body { margin: 0; background-color: #f9f9f9; color: #666680; font: 20px "Arial"  }&lt;/style>'
        &amp;&amp; '&lt;title>Hacking SAPGUI&lt;/title>&lt;/head>&lt;body background=#aabbcc>&lt;marquee behavior=alternate>tricktresor.com&lt;/marquee>&lt;/body>&lt;/html>' ) ).


  html->load_data( IMPORTING assigned_url = url
                    CHANGING data_table   = data ).
  html->show_url( url ).

  DATA(text) = NEW cl_gui_textedit( parent = NEW cl_gui_gos_container( width = 400 ) ).
  text->set_statusbar_mode( 0 ).
  text->set_toolbar_mode( 0 ).
  text->set_textstream( `Enter your name` ).
  text->select_lines( 1 ).
  cl_gui_control=>set_focus( text ).</code></pre>



<h3 class="wp-block-heading">SALV-Grid</h3>



<p>F√ºr ein ALV ist sicherlich nicht genug Platz‚Ä¶? Denkste:</p>



<figure class="wp-block-image"><img decoding="async" src="blob:https://tricktresor.com/1d0f4646-f08a-4d1f-8c1e-772edc0fba69" alt=""/></figure>



<figure class="wp-block-image"><img loading="lazy" decoding="async" width="490" height="190" src="https://tricktresor.com/wp-content/uploads/2018/08/hacking_sapgui_salv.png" alt="" class="wp-image-1019129" srcset="/wp-content/uploads/2018/08/hacking_sapgui_salv.png 490w, /wp-content/uploads/2018/08/hacking_sapgui_salv-300x116.png 300w, /wp-content/uploads/2018/08/hacking_sapgui_salv-487x190.png 487w" sizes="(max-width: 490px) 100vw, 490px" /><figcaption>CL_SALV_TABLE in CL_GUI_GOS_CONTAINER</figcaption></figure>
<p>Der Beitrag <a href="/blog/hacking-sapgui/">Hacking SAPGUI</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Events</title>
		<link>/blog/events/</link>
					<comments>/blog/events/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 22 Jul 2003 20:12:57 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Sonstiges]]></category>
		<category><![CDATA[Workflow]]></category>
		<category><![CDATA[event]]></category>
		<category><![CDATA[job]]></category>
		<category><![CDATA[Kleinigkeiten]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=99</guid>

					<description><![CDATA[<p>Events oder auch Ereignisse k&#246;nnen verwendet werden, um Hintergrundjobs zu starten. Da ein Event auch vom Betriebssystem ausgel&#246;st werden kann, eignet es sich hervorragend zur Realisierung von Schnittstellen.</p>
<p>Der Beitrag <a href="/blog/events/">Events</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Events oder auch Ereignisse k√∂nnen verwendet werden, um Hintergrundjobs zu starten. Da ein Event auch vom Betriebssystem ausgel√∂st werden kann, eignet es sich hervorragend zur Realisierung von Schnittstellen.</p>
<p>[notice type=&#8217;alert&#8217;]Verwechseln Sie die Events nicht mit den Ereignissen aus dem Bereich &#8220;Workflow&#8221;!!! Diese hei√üen zwar genau so, werden aber anders behandelt.[/notice]</p>
<h2 class="head1">Anlegen eines Events</h2>
<p>Um ein Event im R/3 <span style="color: #f49047;">anzulegen</span>, verwenden Sie die Transaktion SM62. Klicken Sie auf &#8220;Benutzerereignisbezeichnungen Pflegen&#8221; und dr√ºcken Sie &lt;Enter&gt;. Sie k√∂nnen nun mit dem Anlegen-Symbol ein Ereignis anlegen. Geben Sie hierzu nur den Namen und die Bezeichnung ein.</p>
<h2>Ausl√∂sen eines Events</h2>
<h3>&#8230;aus SAP</h3>
<p>Sie k√∂nnen ein Event aus R/3 heraus mit der Transaktion SM64 ausl√∂sen.</p>
<p>Mit der Methode cl_batch_event=&gt;raise( )¬†erreichen Sie das gleiche aus einem Programm heraus. Der Funktionsbaustein BP_EVENT_RAISE¬†sollte nicht mehr verwendet werden, da er als veraltet gekennzeichnet wurde.</p>
<p>Wenn man¬†<em>cl_batch_event=&gt;raise¬†</em>ausl√∂st, kann man au√üer der eventid auch einen¬†<strong>Eventparameter</strong>¬†mitgeben. Wenn ein Job allgemein auf die Eventid reagiert, kann w√§hrend der Laufzeit dieser Eventparameter mit Hilfe des Funktionsbausteins GET_JOB_RUNTIME_INFO ausgelesen werden.¬† Da der Parameter ein recht langes Textfeld ist kann man damit z.B. Informationen mitgeben welches Material, Kunde etc. in diesem speziellen Fall bearbeitet werden soll.</p>
<h3>&#8230;vom Betriebssystem</h3>
<p>Auf Betriebssystemebene rufen Sie das Programm <span style="color: #fb2412;">sapevt</span> (f√ºr UNIX) bzw. <span style="color: #fb2412;">sapevt.exe </span>(f√ºr Windows) auf das im R/3-Arbeitsverzeichnis steht:</p>
<pre class="sap1">sapevt z_event -p¬†DATEI_IST_DA pf=mbs_d00.pfl</pre>
<p>Alternativ k√∂nnen Sie auch den Namen des R/3-Systems angeben (name) und die Instanznr (nr). Es erscheint dann die Meldung &#8220;No profile used&#8221; die aber ignoriert werden kann (Diesmal ohne Parameter):</p>
<pre class="sap1">sapevt z_event name=TT1 nr=01</pre>
<p>Sie k√∂nnen so eine einfach Schnittstelle realisieren, in dem Sie eine Datei auf den Applikationsserver kopieren und danach das Programm ausf√ºhren. Mit der Transaktion SM36 legen Sie einen Job an, der auf dieses Ereignis reagiert und die Datei einliest.</p>
<h2>Parameter auslesen</h2>
<p>Mit dem Funktionsbaustein¬†GET_JOB_RUNTIME_INFO k√∂nnen die √ºbergebenen Parameter innerhalb des Programms wieder ausgelesen werden.</p>
<p>Der Beitrag <a href="/blog/events/">Events</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/events/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
