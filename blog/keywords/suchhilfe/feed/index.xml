<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>suchhilfe Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/suchhilfe/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Thu, 17 Aug 2023 17:01:14 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>suchhilfe Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>SALV-Table-Popup als Suchhilfe</title>
		<link>/blog/salv-table-popup-als-suchhilfe/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 14 Oct 2022 14:30:36 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[suchhilfe]]></category>
		<category><![CDATA[suchhilfe-exit]]></category>
		<category><![CDATA[cl_salv_table]]></category>
		<guid isPermaLink="false">/?p=1039202</guid>

					<description><![CDATA[<p>In diesem Artikel habe ich dir gezeigt, wie du die Klasse CL_SALV_TABLE als Popup und zur Auswahl von Daten nutzen kannst. Heute möchte ich dir zeigen, wie du diese Funktion in einer Suchhilfe mit Hilfe eines Suchhilfe-Exits nutzen kannst. In diesem Beispiel rufen wir, wie in dem verlinkten Artikel, eine Liste der Wochentage auf aus denen der Anwender einen auswählen kann. Der einzige Unterschied zum verlinkten Code ist, dass ich für die Schlüsselkomponente nun ein...</p>
<p>Der Beitrag <a href="/blog/salv-table-popup-als-suchhilfe/">SALV-Table-Popup als Suchhilfe</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>In diesem <a class="keychainify-checked" href="/blog/cl_salv_table-als-auswahl-popup/">Artikel</a> habe ich dir gezeigt, wie du die Klasse CL_SALV_TABLE als Popup und zur Auswahl von Daten nutzen kannst. Heute möchte ich dir zeigen, wie du diese Funktion in einer Suchhilfe mit Hilfe eines Suchhilfe-Exits nutzen kannst. In diesem Beispiel rufen wir, wie in dem verlinkten Artikel, eine Liste der Wochentage auf aus denen der Anwender einen auswählen kann.</p>



<figure class="wp-block-image size-full"><img decoding="async" width="161" height="252" src="/wp-content/uploads/2022/10/image-6.png" alt="" class="wp-image-1039205"/><figcaption class="wp-element-caption">Auswahl Wochentag</figcaption></figure>



<p>Der einzige Unterschied zum verlinkten Code ist, dass ich für die Schlüsselkomponente nun ein einstelliges Kennzeichen vom Typ WEEKDAY verwende.</p>



<h2 class="wp-block-heading">Suchhilfe</h2>



<p>In der Codezentrale kannst du dir ansehen, wie du einen Wert in einem Report über eine eigenprogrammierte F4-Suchhilfe übergeben kannst:</p>



<figure class="wp-block-embed is-type-wp-embed is-provider-die-codezentrale wp-block-embed-die-codezentrale"><div class="wp-block-embed__wrapper">
<blockquote hcb-fetch-image-from="https://codezentrale.de/abap-salv-table-als-f4-suchhilfe-popup-verwenden/" class="wp-embedded-content" data-secret="z0AikdQtOG"><a href="https://codezentrale.de/abap-salv-table-als-f4-suchhilfe-popup-verwenden/">[ABAP] SALV-Table als F4-Suchhilfe-PopUp verwenden</a></blockquote><iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="&#8222;[ABAP] SALV-Table als F4-Suchhilfe-PopUp verwenden&#8220; &#8212; Die Codezentrale" src="https://codezentrale.de/abap-salv-table-als-f4-suchhilfe-popup-verwenden/embed/#?secret=EJsPswRNQw#?secret=z0AikdQtOG" data-secret="z0AikdQtOG" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe>
</div></figure>



<p>Das Verfahren nützt dir jedoch nichts, wenn du die F4-Hilfe ohne Programmierung in einem Dynprofeld nutzen möchtest. Hierfür musst du in der Transaktion SE11 eine separate Suchhilfe anlegen:</p>



<figure class="wp-block-image size-full"><img fetchpriority="high" decoding="async" width="771" height="584" src="/wp-content/uploads/2022/10/image-4.png" alt="" class="wp-image-1039203" srcset="/wp-content/uploads/2022/10/image-4.png 771w, /wp-content/uploads/2022/10/image-4-300x227.png 300w, /wp-content/uploads/2022/10/image-4-768x582.png 768w" sizes="(max-width: 771px) 100vw, 771px" /><figcaption class="wp-element-caption">Suchhilfe mit Suchhilfe-Exit</figcaption></figure>



<h2 class="wp-block-heading">Suchhilfe-Exit</h2>



<p>Die Anlage der Suchhilfe ist in diesem Fall jedoch erst Schritt zwei. Im ersten Schritt musst du einen Funktionsbaustein anlegen, der die Werte anzeigt und mit der Suchhilfe kommuniziert.</p>



<p>Für den Suchhilfe-Exit benötigst du einen Funktionsbaustein mit einer definierten Schnittstelle. In der F1-Hilfe zum Suchhilfe-Exit erfährst du, dass du den Baustein <strong>F4IF_SHLP_EXIT_EXAMPLE</strong> als Vorlage verwenden kannst. Du  musst eine neue Funktionsgruppe anlegen (Transaktion SE37: <em>Springen • Funktionsgruppe • Funktionsgruppe anlegen</em>) und den Vorlage-Baustein in diese Gruppe kopieren.</p>



<figure class="wp-block-image size-full"><img decoding="async" width="399" height="142" src="/wp-content/uploads/2022/10/image-5.png" alt="" class="wp-image-1039204" srcset="/wp-content/uploads/2022/10/image-5.png 399w, /wp-content/uploads/2022/10/image-5-300x107.png 300w" sizes="(max-width: 399px) 100vw, 399px" /><figcaption class="wp-element-caption">Vorlagebaustein kopieren</figcaption></figure>



<p>Am Ende des kopierten Funktionsbausteins setzt du das folgende Coding ein:</p>



<pre class="wp-block-code"><code>  IF callcontrol-step = 'DISP'.
    DATA(my_popup) = NEW main( ).

    my_popup-&gt;set_items(
      VALUE #(
        ( key = '1' value = 'Monday' )
        ( key = '2' value = 'Tuesday' )
        ( key = '3' value = 'Wednesday' )
        ( key = '4' value = 'Thursday' )
        ( key = '5' value = 'Friday' )
        ( key = '6' value = 'Saturday' )
        ( key = '7' value = 'Sunday' ) ) ).

    TRY.
        DATA(selected_entry) = my_popup-&gt;ask( 'Select day' ).
        append value #( string = conv #( selected_entry-key ) ) to record_tab.
        callcontrol-step = 'RETURN'.
      CATCH cancelled.
        callcontrol-step = 'EXIT'.
    ENDTRY.
  ENDIF.
</code></pre>



<p>In diesem Beispiel habe ich das Coding (Siehe <a class="keychainify-checked" href="/blog/cl_salv_table-als-auswahl-popup/">CL_SALV_TABLE als Auswahl-Popup</a>) als lokale Klasse im Funktionsbaustein verwendet. Sinnvoller wäre es jedoch, die Klasse MAIN als globale Klasse anzulegen (Transaktion SE24). In diesem Fall musst du bei der Instanziierung natürlich nicht MAIN verwenden, sondern den Namen der globalen Klasse.</p>



<p>Wichtig ist, dass bei Auswahl eines Eintrags die RECORD_TAB mit dem gewählten Eintrag angereichert wird und der CALLCONTROL-STEP auf &#8220;RETURN&#8221; gesetzt wird. Bricht der Benutzer den Dialog ab, dann muss CALLCONTROL-STEP auf &#8220;EXIT&#8221; gesetzt werden.</p>



<p>Den Funktionsbaustein und die Funktionsgruppe musst du selbstverständlich aktivieren.</p>



<h2 class="wp-block-heading">Aktivierung Suchhilfe</h2>



<p>Nachdem du den Suchhilfe-Exit Funktionsbaustein in die Suchhilfe eingetragen hast, musst du die Suchhilfe aktivieren und kannst sie testen:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="744" height="584" src="/wp-content/uploads/2022/10/image-7.png" alt="" class="wp-image-1039206" srcset="/wp-content/uploads/2022/10/image-7.png 744w, /wp-content/uploads/2022/10/image-7-300x235.png 300w, /wp-content/uploads/2022/10/image-7-117x91.png 117w" sizes="(max-width: 744px) 100vw, 744px" /><figcaption class="wp-element-caption">Test der Suchhilfe</figcaption></figure>



<h2 class="wp-block-heading">Suchhilfe einbinden</h2>



<p>Du kannst diese Suchhilfe nun in einem Datenelement unter der Registerkarte &#8220;Weitere Eigenschaften&#8221; festlegen:</p>



<figure class="wp-block-image size-full"><img loading="lazy" decoding="async" width="587" height="407" src="/wp-content/uploads/2022/10/image-8.png" alt="" class="wp-image-1039207" srcset="/wp-content/uploads/2022/10/image-8.png 587w, /wp-content/uploads/2022/10/image-8-300x208.png 300w, /wp-content/uploads/2022/10/image-8-200x140.png 200w" sizes="(max-width: 587px) 100vw, 587px" /><figcaption class="wp-element-caption">Suchhilfe im Datenelement definieren</figcaption></figure>



<p>Die Suchhilfe steht dir nun immer zur Verfügung, wenn du dieses Datenelement in einer Struktur verwendest. </p>



<h2 class="wp-block-heading">Suchhilfe testen</h2>



<p>Wenn du Suchhilfen mit Suchhilfe-Exits testest, dann achte darauf, dass du nach jeder Codeänderung im Suchhilfe-Exit-Funktionsbaustein die Transaktion SE11 neu aufrufst. Andernfalls ist das alte Coding noch geladen und du wirst die Änderungen nicht sehen!</p>
<p>Der Beitrag <a href="/blog/salv-table-popup-als-suchhilfe/">SALV-Table-Popup als Suchhilfe</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Dynamische Suchhilfe</title>
		<link>/blog/dynamische-suchhilfe/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 27 Sep 2016 07:00:00 +0000</pubDate>
				<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Funktionsbaustein]]></category>
		<category><![CDATA[suchhilfe]]></category>
		<category><![CDATA[suchhilfe-exit]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=843068</guid>

					<description><![CDATA[<p>Suchhilfen geben immer wieder Anlass zu viel Diskussionen. Es gibt viele Wege zum Ziel; häufig sind diese jedoch umständlich oder zumindest nicht ideal. Für den Fall, dass du mal eine Suchhilfe brauchst, von denen die Felder erst zur Laufzeit bekannt sind, kannst du folgendes Vorgehen nutzen:</p>
<p>Der Beitrag <a href="/blog/dynamische-suchhilfe/">Dynamische Suchhilfe</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Suchhilfen geben immer wieder Anlass zu viel Diskussionen. Es gibt viele Wege zum Ziel; häufig sind diese jedoch umständlich oder zumindest nicht ideal. Für den Fall, dass du mal eine Suchhilfe brauchst, bei der die Felder erst zur Laufzeit bekannt sind, kannst du folgendes Vorgehen nutzen:</p>
<h2>Suchhilfe-Exit Funktionsbaustein kopieren</h2>
<p>Als erstes benötigst du einen Suchhilfe-Exit. Dieser Exit besteht aus einem Funktionsbaustein mit definierter Schnittstelle. Am besten kopierst du den Funktionsbaustein F4IF_SHLP_EXIT_EXAMPLE auf z. B. Z_F4IF_SHLP_EXIT_NEU1.</p>
<p>Hierfür benötigst du eine eigene Funktionsgruppe. Diese muss vor dem Kopieren vorhanden sein. In diesem Beispiel heißt der Funktionsbaustein z_f4ifshlp_exit_4_enno.</p>
<h3>Funktionsbaustein Suchhilfe-Exit</h3>
<pre>FUNCTION z_f4ifshlp_exit_4_enno.
*"----------------------------------------------------------------------
*"*"Lokale Schnittstelle:
*" TABLES
*" SHLP_TAB TYPE SHLP_DESCT
*" RECORD_TAB STRUCTURE SEAHLPRES
*" CHANGING
*" REFERENCE(SHLP) TYPE SHLP_DESCR
*" REFERENCE(CALLCONTROL) LIKE DDSHF4CTRL STRUCTURE DDSHF4CTRL
*"----------------------------------------------------------------------

DATA: rc TYPE sy-subrc.

IF callcontrol-step = 'SELONE'.
EXIT.
ENDIF.

IF callcontrol-step = 'PRESEL'.
EXIT.
ENDIF.

*"----------------------------------------------------------------------
* STEP SELECT (Select values)
*"----------------------------------------------------------------------
* This step may be used to overtake the data selection completely.
* To skip the standard seletion, you should return 'DISP' as following
* step in CALLCONTROL-STEP.
* Normally RECORD_TAB should be filled after this step.
* Standard function module F4UT_RESULTS_MAP may be very helpfull in this
* step.
IF callcontrol-step = 'SELECT'.
PERFORM shlp_4_enno USING shlp_tab[]
CHANGING callcontrol
shlp
record_tab[]
rc.
IF rc = 0.
callcontrol-step = 'DISP'.
ELSE.
callcontrol-step = 'EXIT'.
ENDIF.
EXIT. "Don't process STEP DISP additionally in this call.
ENDIF.

IF callcontrol-step = 'DISP'.
EXIT.
ENDIF.

ENDFUNCTION.</pre>
<h3>Unterroutine</h3>
<p>In dieser Unterroutine wird die Ergebnistabelle aufgebaut. Wir verwenden hier zwar eine feste Struktur (zshlp_4_enno_structure), aber das Ergebnis wird dynamisch an die Ergebnistabelle übergeben.<br />
Die Struktur sieht folgendermaßen aus:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/09/2016-09-26_15-41-50.jpg"><img loading="lazy" decoding="async" class="alignnone wp-image-843069 size-full" src="https://tricktresor.com/wp-content/uploads/2016/09/2016-09-26_15-41-50.jpg" alt="2016-09-26_15-41-50" width="702" height="224" srcset="/wp-content/uploads/2016/09/2016-09-26_15-41-50.jpg 702w, /wp-content/uploads/2016/09/2016-09-26_15-41-50-300x96.jpg 300w" sizes="(max-width: 702px) 100vw, 702px" /></a></p>
<pre>FORM shlp_4_enno USING it_shlp TYPE shlp_desct
CHANGING i_callcontrol TYPE ddshf4ctrl
i_shlp TYPE shlp_descr
xt_records TYPE ddshreslts
e_rc TYPE sy-subrc.

DATA: lt_data TYPE STANDARD TABLE OF zshlp_4_enno_structure WITH NON-UNIQUE DEFAULT KEY,
*--------------------------------------------------------------------*
* Für jedes Feld das in der Selopt als Importparaemter gekennzeichnet ist eine Range erstellen
* Kann man sicher auch dynamisch machen - aber dann wird's schwerer lesbar
*--------------------------------------------------------------------*
lt_r_datum TYPE RANGE OF zshlp_4_enno_structure-datum,
lt_r_uname TYPE RANGE OF zshlp_4_enno_structure-uname,
ls_data LIKE LINE OF lt_data,
ls_address TYPE bapiaddr3,
lt_return TYPE bapiret2_t.
.

FIELD-SYMBOLS: &lt;ls_selopt_line&gt; TYPE any.

*--------------------------------------------------------------------*
* Ranges für Daten-Selektion füllen
*--------------------------------------------------------------------*
LOOP AT i_shlp-selopt ASSIGNING FIELD-SYMBOL(&lt;ls_selopt&gt;).

CASE &lt;ls_selopt&gt;-shlpfield.
WHEN 'DATUM'.
APPEND INITIAL LINE TO lt_r_datum ASSIGNING &lt;ls_selopt_line&gt;.
WHEN 'UNAME'.
APPEND INITIAL LINE TO lt_r_uname ASSIGNING &lt;ls_selopt_line&gt;.
WHEN OTHERS.
CONTINUE.
ENDCASE.

MOVE-CORRESPONDING &lt;ls_selopt&gt; TO &lt;ls_selopt_line&gt;.

ENDLOOP.

*--------------------------------------------------------------------*
* Die so gefüllten Ranges jetzt für irgend eine Datenselektion nehmen
*--------------------------------------------------------------------*
SELECT bname AS uname, trdat AS datum
FROM usr02
WHERE bname IN @lt_r_uname
AND trdat IN @lt_r_datum
INTO CORRESPONDING FIELDS OF TABLE @lt_data.

LOOP AT lt_data ASSIGNING FIELD-SYMBOL(&lt;ls_data&gt;).

CALL FUNCTION 'BAPI_USER_GET_DETAIL'
EXPORTING
username = &lt;ls_data&gt;-uname
IMPORTING
address = ls_address
TABLES
return = lt_return.
&lt;ls_data&gt;-freitext = ls_address-fullname.

ENDLOOP.

*--------------------------------------------------------------------*
* Und SAP das Ganze so aufbereiten lassen, wie man es kennt
*--------------------------------------------------------------------*
CALL FUNCTION 'F4UT_RESULTS_MAP'
EXPORTING
source_structure = 'ZSHLP_4_ENNO_STRUCTURE'
TABLES
shlp_tab = it_shlp
record_tab = xt_records[]
source_tab = lt_data[]
CHANGING
shlp = i_shlp
callcontrol = i_callcontrol
EXCEPTIONS
OTHERS = 0.
ENDFORM.</pre>
<h2>Suchhilfe anlegen</h2>
<p>In Transaktion SE11 musst du nun noch eine Suchhilfe anlegen, die den Suchhilfe-Exit verwendet. Normalerweise gibst du in der Suchhilfe direkt eine <em>Selektionsmethode</em> an, also die Tabelle oder den View, aus dem gelesen wird. Da wir die Suchhilfe dynamisch aufbauen, bleibt dieses Feld leer und wir tragen nur den Baustein für den Suchhilfe-Exit ein:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/09/2016-09-26_15-43-42.jpg"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-843070" src="https://tricktresor.com/wp-content/uploads/2016/09/2016-09-26_15-43-42.jpg" alt="2016-09-26_15-43-42" width="706" height="542" srcset="/wp-content/uploads/2016/09/2016-09-26_15-43-42.jpg 706w, /wp-content/uploads/2016/09/2016-09-26_15-43-42-300x230.jpg 300w" sizes="(max-width: 706px) 100vw, 706px" /></a></p>
<p>Das war auch schon alles. Die Suchhilfe kann direkt getestet werden:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/09/2016-09-26_15-46-31.jpg"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-843071" src="https://tricktresor.com/wp-content/uploads/2016/09/2016-09-26_15-46-31.jpg" alt="2016-09-26_15-46-31" width="627" height="159" srcset="/wp-content/uploads/2016/09/2016-09-26_15-46-31.jpg 627w, /wp-content/uploads/2016/09/2016-09-26_15-46-31-300x76.jpg 300w" sizes="(max-width: 627px) 100vw, 627px" /></a></p>
<h2>Anwendungsbeispiele</h2>
<p>Der Anwendungsfall, für den man eine dynamische Suchhilfe benötigt, ist sicherlich nicht allzu oft vorhanden. Es ist aber schön, es zu können, wenn man mal vor dieser Herausforderung steht. Eine Möglichkeit wäre zum Beispiel jeweils andere Felder zu zeigen, je nachdem welche Partnerart der Anwender für die Selektion ausgewählt hat:  Kunde, Lieferant oder Sachbearbeiter. Auch könnte ich mir vorstellen, dass zu Materialnummern unterschiedliche Felder je Materialart oder Anwendergruppe angezeigt werden.</p>
<p>Vielen Dank an Stefan für das Beispiel!!</p>
<p>Der Beitrag <a href="/blog/dynamische-suchhilfe/">Dynamische Suchhilfe</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Pfadauswahl mit DIRECTORY_BROWSE</title>
		<link>/blog/pfadauswahl-mit-directory-browse/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 06 Feb 2014 13:46:59 +0000</pubDate>
				<category><![CDATA[Reports]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[f4]]></category>
		<category><![CDATA[value-request]]></category>
		<category><![CDATA[browse]]></category>
		<category><![CDATA[directory]]></category>
		<category><![CDATA[Verzeichnis]]></category>
		<category><![CDATA[suchhilfe]]></category>
		<category><![CDATA[GUI]]></category>
		<category><![CDATA[suchhilfe-exit]]></category>
		<category><![CDATA[Selektionsbilder]]></category>
		<category><![CDATA[Upload]]></category>
		<category><![CDATA[Download]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=4372</guid>

					<description><![CDATA[<p>Hier demonstriere ich die Verwendung der Methode CL_GUI_FRONTEND_SERVICES=>DIRECTORY_BROWSE. Eigentlich einfach zu verwenden, aber für die F4-Hilfe ist ein kleiner Trick notwendig. Zudem zeige ich, wie die Methode in einem Suchhilfe-Exit verwendet werden kann.</p>
<p>Der Beitrag <a href="/blog/pfadauswahl-mit-directory-browse/">Pfadauswahl mit DIRECTORY_BROWSE</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Um einen Dateipfad auf dem Frontend auszuwählen, gibt es die Methode DIRECTORY_BROWSE der Klasse CL_GUI_FRONTEND_SERVICES. Um sie jedoch in der F4-Hilfe eines Reports sinnvoll verwenden zu können, muss man sich noch eines Tricks bedienen. Das Problem: Bei Aufruf der F4-Hilfe steht der Wert des Parameters für den die F4-Hilfe aufgerufen wurde, nicht zur Verfügung.</p>
<p>Aus diesem Grund muss der Feldinhalt explizit mit Hilfe des Funktionsbausteins DYNP_VALUES_READ gelesen werden.</p>
<p><img loading="lazy" decoding="async" width="675" height="422" class="alignnone size-full wp-image-4374" src="https://tricktresor.com/wp-content/uploads/2014/02/img_52f391e706cfb.png" alt="" srcset="/wp-content/uploads/2014/02/img_52f391e706cfb.png 675w, /wp-content/uploads/2014/02/img_52f391e706cfb-300x187.png 300w, /wp-content/uploads/2014/02/img_52f391e706cfb-624x390.png 624w" sizes="(max-width: 675px) 100vw, 675px" /></p>
<h2>Coding</h2>
<pre>REPORT z_test_browse_directory.

*== SELECTION SCREEN
PARAMETERS p_path  TYPE text200 OBLIGATORY LOWER CASE.

*== Help Value path
AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_path.
  PERFORM f4_path.

*== init
INITIALIZATION.
  PERFORM get_download_path.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_download_path
*&amp;---------------------------------------------------------------------*
FORM get_download_path.

*== local data
  DATA lv_upload_path    TYPE string.
  DATA lv_download_path  TYPE string.

*== get current download path
  CALL METHOD cl_gui_frontend_services=&gt;get_upload_download_path
    CHANGING
      upload_path   = lv_upload_path
      download_path = lv_download_path.

*== set parameter
  p_path = lv_download_path.

ENDFORM.                    "get_download_path

*&amp;---------------------------------------------------------------------*
*&amp;      Form  f4_path
*&amp;---------------------------------------------------------------------*
FORM f4_path.

*== local data
  DATA lv_out    TYPE string.
  DATA lv_in     TYPE string.
  DATA lt_fields TYPE TABLE OF dynpread.
  DATA ls_field  TYPE dynpread.

*== get current value for path
  ls_field = 'P_PATH'.
  APPEND ls_field TO lt_fields.

  CALL FUNCTION 'DYNP_VALUES_READ'
    EXPORTING
      dyname     = sy-cprog
      dynumb     = sy-dynnr
    TABLES
      dynpfields = lt_fields
    EXCEPTIONS
      OTHERS     = 1.

  IF sy-subrc = 0.
    READ TABLE lt_fields INTO ls_field INDEX 1.
    lv_in = ls_field-fieldvalue.
  ENDIF.

*== call popup for directory selection
  CALL METHOD cl_gui_frontend_services=&gt;directory_browse
    EXPORTING
      initial_folder  = lv_in
    CHANGING
      selected_folder = lv_out
    EXCEPTIONS
      OTHERS          = 4.

  IF sy-subrc = 0 AND lv_out IS NOT INITIAL.
*== set selected path
    p_path = lv_out.
  ELSE.
*== set origin path
    p_path = lv_in.
  ENDIF.

ENDFORM.</pre>
<h1>Verwendung in einer Suchhilfe</h1>
<p>Einfacher und sinnvoller jedoch ist die Verwendung in einer Suchhilfe! Warum? Erstens kann die Suchhilfe an ein entsprechendes Feld einer Dictionarystruktur angebunden werden und zweitens lässt sich auch in einem Report eine Suchhilfe einfacher verwenden.</p>
<p>Das Programm reduziert sich so auf die folgende Angabe bei dem Parameter P_PATH:</p>
<pre>PARAMETERS p_path  TYPE string OBLIGATORY LOWER CASE <span style="color: #ff0000;">MATCHCODE OBJECT ZSH_DIRECTORY</span>.</pre>
<p>du ahnst es schon: Die Suchhilfe heißt in diesem Fall ZSH_DIRECTORY. Um diese zu erstellen musst du folgendes tun:</p>
<ol>
<li>Anlage der Suchhilfe in der SE11</li>
<li>Anlage eines Funktionsbausteins, der als Suchhilfe-Exit verwendet wird.</li>
</ol>
<p>Wir fangen bei 2. an:</p>
<h2>2. Anlage Suchhilfe-Exit</h2>
<p>Du benötigst eine Funktionsgruppe. Einfach in der SE80 eine anlegen. In diese Funktionsgruppe kopierst du den Baustein F4IF_SHLP_EXIT_EXAMPLE auf den Baustein Z_F4IF_SHLP_EXIT_DIRECTORY. Das Kopieren ist wichtig, da die Suchhilfe-Exit-Bausteine eine definierte Schnittstelle haben.</p>
<p>Im STEP SELECT fügst du das Coding ein, dessen Kern wir bereits aus dem vorherigen Coding kennen:</p>
<pre>  IF callcontrol-step = 'SELECT'.
*== data (please set data definitions to top of function module!)
    DATA lv_in TYPE string.
    DATA lv_out TYPE string.
    FIELD-SYMBOLS &lt;itf&gt; LIKE LINE OF shlp-interface.
    FIELD-SYMBOLS &lt;rec&gt; LIKE LINE OF record_tab.
*== get field value
    READ TABLE shlp-interface WITH KEY shlpfield = 'PATH' ASSIGNING &lt;itf&gt;.
    IF sy-subrc = 0.
*== use field value as start directory
      lv_in = &lt;itf&gt;-value.
*== call popup for directory selection
      CALL METHOD cl_gui_frontend_services=&gt;directory_browse
        EXPORTING
          initial_folder  = lv_in
        CHANGING
          selected_folder = lv_out
        EXCEPTIONS
          OTHERS          = 4.
      IF sy-subrc = 0 AND lv_out IS NOT INITIAL.
        APPEND INITIAL LINE TO record_tab ASSIGNING &lt;rec&gt;.
        &lt;rec&gt;-string = lv_out.
        callcontrol-step = 'RETURN'.
      ENDIF.
    ENDIF.
  ENDIF.</pre>
<p>Grob passiert folgendes:</p>
<ol>
<li>Wir lesen aus der Schnittstellenbeschreibung den Parameter PATH, den wir in der Suchhilfe definiert haben, aus und verwenden ihn als Startverzeichnis</li>
<li>Aufruf der Methode DIRECTORY_BROWSE</li>
<li>Füllen der Rückgabetabelle RECORD_TAB</li>
<li>Setzen des Folgeschrittes RETURN um die Anzeige des gefundenen Verzeichnisses im Popup zu verhindern</li>
</ol>
<p>[notice type=&#8217;info&#8217;]Eventuell kann es sein, dass in dem Beispiel das Startverzeichnis nicht in die Suchhilfe übernommen wird. In dem Fall muss gegebenenfalls ebenfalls der Funktionsbaustein DYNP_VALUES_READ eingesetzt werden. Das verwendete Parametername steht in der INTERFACE-Struktur im Feld VALFIELD.[/notice]</p>
<h2>1. Anlage der Suchhilfe</h2>
<p>Transaktion SE11: Suchhilfe Anlegen:</p>
<p><img loading="lazy" decoding="async" width="414" height="359" class="alignnone size-full wp-image-4377" src="https://tricktresor.com/wp-content/uploads/2014/02/img_52f395b7a234f.png" alt="" srcset="/wp-content/uploads/2014/02/img_52f395b7a234f.png 414w, /wp-content/uploads/2014/02/img_52f395b7a234f-300x260.png 300w" sizes="(max-width: 414px) 100vw, 414px" /></p>
<p>In der Suchhilfe muss der erstellte Funktionsbaustein als Suchhilfe-Exit eingetragen werden:</p>
<p><img loading="lazy" decoding="async" width="737" height="429" class="alignnone size-full wp-image-4378" src="https://tricktresor.com/wp-content/uploads/2014/02/img_52f3960b0c6f8.png" alt="" srcset="/wp-content/uploads/2014/02/img_52f3960b0c6f8.png 737w, /wp-content/uploads/2014/02/img_52f3960b0c6f8-300x174.png 300w, /wp-content/uploads/2014/02/img_52f3960b0c6f8-624x363.png 624w" sizes="(max-width: 737px) 100vw, 737px" /></p>
<p>Der Beitrag <a href="/blog/pfadauswahl-mit-directory-browse/">Pfadauswahl mit DIRECTORY_BROWSE</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
