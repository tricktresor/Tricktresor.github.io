<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>Formeln Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/formeln/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 12 Sep 2017 09:24:58 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>Formeln Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Formeleditor</title>
		<link>/blog/formeleditor/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 16 Jul 2014 18:30:52 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[GUI]]></category>
		<category><![CDATA[Editor]]></category>
		<category><![CDATA[Eigenes]]></category>
		<category><![CDATA[Drag and Drop]]></category>
		<category><![CDATA[Formeln]]></category>
		<category><![CDATA[Formeleditor]]></category>
		<category><![CDATA[Eigene Felder]]></category>
		<category><![CDATA[Funktionsbausteine]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=4946</guid>

					<description><![CDATA[<p>Der Formeleditor ist ein mächtiges Werkzeug, der sich für viele Gelegenheiten nutzen lässt. Viele Beispielprogramme demonstrieren die Verwendung. Die hier vorgestellten Funktionen lösen die alten Funktionsbausteine EVAL_FORMULA und CHECK_FORMULA zum evaluieren einer Formel ab. </p>
<p>Der Beitrag <a href="/blog/formeleditor/">Formeleditor</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Im Beitrag <a title="Formelberechnung" href="https://tricktresor.com/blog/formelberechnung/">Formelberechnung </a>habe ich bereits gezeigt, wie man eigene Formeln verwenden kann. Für eine Anwendung wäre es jedoch schön, wenn der Anwender selbst Formeln erstellen könnte und zwar mit vorgegebenen Feldern und Operationen.</p>
<p>Dies ist möglich mit dem Formeleditor. Gleichzeitig wird hier für die Prüfung und Evaluierung der Formeln keine Funktionsbausteine mehr verwendet, sondern Klassen. Aber der Reihe nach&#8230;</p>
<h2>Formeleditor</h2>
<p>Der Formeleditor wird durch den Funktionsbaustein <!--StartFragment -->FOBU_DIALOG_START aufgerufen. Die Verwendung wird in mehreren Beispielprogrammen gut demonstriert (siehe unten).</p>
<p>In einem Eingabefeld kann man die Formel entweder direkt eingeben (Expertenmodus) oder man kann die einzelnen Komponenten per Drag and Drop oder Doppelklick einfügen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200715.jpg"><img decoding="async" class="alignnone size-medium wp-image-4951" src="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200715-300x144.jpg" alt="Formeleditor Eingabe" width="300" height="144" srcset="/wp-content/uploads/2014/07/Bild_2014_07_16_200715-300x144.jpg 300w, /wp-content/uploads/2014/07/Bild_2014_07_16_200715.jpg 510w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Die Elemente des Editors lassen sich gezielt steuern. In den Beispielprogrammen wird ersichtlich, was wie verwendet werden kann.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200704.jpg"><img decoding="async" class="alignnone size-medium wp-image-4950" src="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200704-300x85.jpg" alt="Formeleditor" width="300" height="85" srcset="/wp-content/uploads/2014/07/Bild_2014_07_16_200704-300x85.jpg 300w, /wp-content/uploads/2014/07/Bild_2014_07_16_200704-624x177.jpg 624w, /wp-content/uploads/2014/07/Bild_2014_07_16_200704.jpg 835w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Einige Formeln lassen sich mit einer Hilfefunktion einfügen (Kleines grünes PLUS-Icon rechts neben den Sortieren Buttons):</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200725.jpg"><img decoding="async" class="alignnone size-medium wp-image-4957" src="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200725-300x81.jpg" alt="Formel einfügen" width="300" height="81" srcset="/wp-content/uploads/2014/07/Bild_2014_07_16_200725-300x81.jpg 300w, /wp-content/uploads/2014/07/Bild_2014_07_16_200725-624x169.jpg 624w, /wp-content/uploads/2014/07/Bild_2014_07_16_200725.jpg 758w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h2>Klassen</h2>
<h3>CL_FOBU_FORMULA</h3>
<p>Um mit dem Editor kommunizieren zu können, wird diese Klasse benötigt.</p>
<h3>CL_FOEV_FORMULA</h3>
<p>Diese Klasse wird verwendet, um die Formeln zu speichern, zu laden, zu prüfen und auszuwerten.</p>
<h3>CL_FOBU_CONNECTOR</h3>
<p>Sobald eigene Felder verwendet werden sollen, müssen diese mithilfe der Klasse definiert und bekannt gemacht werden. Für jedes Feld kann ein eigenes Icon definiert werden:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200712.jpg"><img loading="lazy" decoding="async" class="alignnone wp-image-4952 size-full" src="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200712.jpg" alt="Formeleditor eigene Felder" width="377" height="231" srcset="/wp-content/uploads/2014/07/Bild_2014_07_16_200712.jpg 377w, /wp-content/uploads/2014/07/Bild_2014_07_16_200712-300x183.jpg 300w" sizes="(max-width: 377px) 100vw, 377px" /></a></p>
<h3>Demoprogramme</h3>
<table>
<tbody>
<tr>
<th> Programm</th>
<th> Bezeichnung</th>
</tr>
<tr>
<td> SFBE_EXAMPLE1</td>
<td>Beispielprogramme FoBuEv: Einfachst-Aufruf</td>
</tr>
<tr>
<td> SFBE_EXAMPLE2</td>
<td>Beispielprogramme FoBuEv: Aufruf mit eigenen Feldern</td>
</tr>
<tr>
<td> SFBE_EXAMPLE3</td>
<td>Beisp.Prog FoBuEv: Aufruf mitTypprüfung, eigenem GUI-Status und TraceDer Trace wird im Menü eingeschaltet!</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200706.jpg"><img loading="lazy" decoding="async" class="alignnone size-thumbnail wp-image-4949" src="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_200706-300x300.jpg" alt="Formel_trace" width="150" height="150" /></a></td>
</tr>
<tr>
<td> SFBE_EXAMPLE4</td>
<td>Beisp.Prog FoBuEv: Aufruf mit eigenen Funktionen</td>
</tr>
<tr>
<td> SFBE_EXAMPLE5</td>
<td>Beisp.Prog FoBuEv: Implementierung einer Methode per FoBuEv</td>
</tr>
<tr>
<td> SFBE_EXAMPLE6</td>
<td>Beisp.Prog FoBuEv: Aufruf mit eigenen Drucktasten und IF-Funktion</td>
</tr>
<tr>
<td> SFBE_EXAMPLE8</td>
<td>Beisp.Prog FoBuEv: Rechnen mit Währungsbeträgen, Mengen und Preisen</td>
</tr>
<tr>
<td>RS_FOBU_METHOD_EXAMPLE</td>
<td>Beispielprogramm für Formula Builder Methoden</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/formeleditor/">Formeleditor</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Formelberechnung</title>
		<link>/blog/formelberechnung/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 16 Jul 2014 17:51:11 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[DOKU]]></category>
		<category><![CDATA[Funktionsbausteine]]></category>
		<category><![CDATA[Tabellenpflegedialog]]></category>
		<category><![CDATA[Schnell programmiert]]></category>
		<category><![CDATA[Formeln]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=4942</guid>

					<description><![CDATA[<p>Mit Computern kann man rechnen. Das ist toll und gut so. Wenn man allerdings Berechnungen Außerhalb eines Programms definieren möchte, dann kommt man schnell an die Grenzen. Einfache Operationen sind schnell programmiert und ausgewertet, bei komplexen Operationen kommt man jedoch schnell ins Schwitzen. Gottseidank besitzt SAP einen Formeleditor, den man sehr einfach für eigene Berechnungen verwenden kann. Mit entsprechenden Funktionsbausteinen oder einer Klasse kann eine Formel geprüft und ausgewertet werden.</p>
<p>Der Beitrag <a href="/blog/formelberechnung/">Formelberechnung</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Mit Computern kann man rechnen. Das ist toll und gut so. Wenn man allerdings Berechnungen Außerhalb eines Programms definieren möchte, dann kommt man schnell an die Grenzen. Einfache Operationen sind schnell programmiert und ausgewertet, bei komplexen Operationen kommt man jedoch schnell ins Schwitzen. Gottseidank besitzt SAP einen Formeleditor, den man sehr einfach für eigene Berechnungen verwenden kann. Mit entsprechenden Funktionsbausteinen oder einer Klasse kann eine Formel geprüft und ausgewertet werden.</p>
<h2>Funktionsbausteine</h2>
<p>Es gibt zwei Funktionsbausteine: Einen für die Prüfung einer Formel und einer für die Berechnung:</p>
<p>Prüfung: CHECK_FORMULA</p>
<p>Berechnung: EVAL_FORMULA</p>
<p>Beide Funktionsbausteine haben die folgenden Parameter:</p>
<p>FORMULA: Enthält die Formel<br />
PROGRAM: Programmname zur Wertzuweisung<br />
ROUTINE: Name des Unterprogramms zur Wertzuweisung</p>
<h3>Einfache Berechnung einer Formel</h3>
<p>Der einfachste Aufruf zur Berechnung einer (fast) beliebigen Formel erfolgt mit dem Funktionsbaustein EVAL_FORMULA. Es reicht, wenn du diesem Baustein die Berechnung mitgibst, z.B. 10*3:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_170727.jpg"><img loading="lazy" decoding="async" class="alignnone size-full wp-image-4943" src="https://tricktresor.com/wp-content/uploads/2014/07/Bild_2014_07_16_170727.jpg" alt="Formel1" width="474" height="287" srcset="/wp-content/uploads/2014/07/Bild_2014_07_16_170727.jpg 474w, /wp-content/uploads/2014/07/Bild_2014_07_16_170727-300x181.jpg 300w" sizes="(max-width: 474px) 100vw, 474px" /></a></p>
<h3>Berechnung mit Variablen</h3>
<p>Nun möchte man natürlich nicht nur Werte berechnen, sondern auch mit Variablen arbeiten, wie zum Beispiel &#8220;A + B&#8221;. Das funktioniert mit den Funktionsbausteinen ebenfalls. Die Formel lautet: A+B. Allerdings müssen die Werte natürlich zugewiesen werden. Hierfür muss man den Programmnamen und den Namen des Unterprogramms angeben, in dem die Werte zugewiesen werden. Ein kleines Beispielprogramm lautet: RSCALC01. Die folgenden Berechnungen werden durchgeführt; die Wertezuweisung erfolgt im Programm.</p>
<pre>FUESSE + AEDERCHEN + OEHRCHEN                        6,0000000000000000E+00
(-B+SQRT(B**2-(4*A*C)))/(2*A)                        4,0000000000000000E+00
0**0                                                 1,0000000000000000E+00
-16**0.5                                            -4,0000000000000000E+00</pre>
<h3>Formelspeicher</h3>
<p>Formeln können zentral in der Tabelle TFKT abgelegt werden. Du kannst also eine Formel VOLUMEN hinterlegen: BREITE * HOEHE * LAENGE.</p>
<p>In deinem Programm musst dann eine entsprechende Zuweisung zu diesen Variablen BREITE, HOEHE, LAENGE machen. Nun ändert sich so eine Volumenberechnung natürlich nicht. Es sei denn, man hinterlegt einen Sicherheitswert, um das Volumen etwas zu vergrößern, also z.B.: BREITE * HOEHE * LAENGE * 1,005</p>
<p>In diesem Fall kann die Volumenberechnung in mehreren Applikationen verwendet werden und sobald der Sicherheitswert geändert wird, wird dies in allen Berechnungen berücksichtigt.</p>
<p>Eine andere Variante wäre, dass jeder Dimension ein eigener Sicherheitswert zugewiesen wird:</p>
<table>
<tbody>
<tr>
<td>KEY</td>
<td>Formeltext</td>
</tr>
<tr>
<td>VOLUMEN</td>
<td>TFKT:BREITE * TFKT:HOEHE * TFKT:LAENGE</td>
</tr>
<tr>
<td>BREITE</td>
<td>BREITE + 1</td>
</tr>
<tr>
<td>HOEHE</td>
<td>HOEHE + 1</td>
</tr>
<tr>
<td>LAENGE</td>
<td>LAENGE + 2</td>
</tr>
</tbody>
</table>
<p>Die Tabelleneinträge lassen sich mit Transaktion SE16N bearbeiten; es gibt keinen Tabellenpflegedialog dafür&#8230; Sollte die Benutzung mit SE16n nicht möglich sein, so kann jedoch schnell ein Tabellenpflegedialog für die Tabelle generiert werden.</p>
<p>[notice type=&#8217;info&#8217;]<strong>Aus der Doku zum Funktionsbaustein CHECK_FORMULA</strong></p>
<p>Wenn eine Benutzergruppe eine andere Tabelle als TFKT benötigt (um z.B. den Schlüsselteil zu strukturieren oder eigene Felder aufzunehmen), sollte die Referenztabelle TFKT zunächst kopiert werden. Eigene Funktionen können bei Bedarf ab Position 79 angefügt werden.</p>
<p>Eine Tabelle, die zur Formelablage verwendet wird, muß eine Schlüssellänge von 13 und einen Funktionsteil der Länge 65 besitzen.[/notice]</p>
<h3>Parameter</h3>
<p>Formeln können auch Parameter enthalten, so dass du zum Beispiel die Formel VOLUMEN mit entsprechenden Werten aufrufen kannst:</p>
<pre>VOLUMEN(10,20,30)</pre>
<p>Die Parameter werden durch Komma getrennt. Die formalen Parameter in der Formel beginnen mit # und werden durchnummeriert. Die Berechnung für das Volumen sieht dann so aus:</p>
<pre>VOLUMEN: #1*#2*#3</pre>
<p>[notice type=&#8217;info&#8217;]SAP-Hinweis: 560672 &#8211; Selbstdefinierte Formeln in Tabelle TFKT[/notice]</p>
<h3>Demoprogramm</h3>
<pre>REPORT  zz_demo_formula.
*== selection screen</pre>
<pre>PARAMETERS p_formel TYPE char50       DEFAULT 'TFKT:VOLUMEN'.
PARAMETERS p_breite TYPE p DECIMALS 2 DEFAULT 10.
PARAMETERS p_hoehe  TYPE p DECIMALS 2 DEFAULT 10.
PARAMETERS p_laenge TYPE p DECIMALS 2 DEFAULT 10.
PARAMETERS p_result TYPE p DECIMALS 2 MODIF ID x.
 
*== DATA
DATA gv_retcode     TYPE i.
DATA gv_repid       TYPE repid VALUE sy-repid.
*== set result field to Display only
AT SELECTION-SCREEN OUTPUT.
  LOOP AT SCREEN.
    IF screen-group1 = 'X'.
      screen-input = '0'.
      MODIFY SCREEN.
    ENDIF.
  ENDLOOP.
 
AT SELECTION-SCREEN.
*== check formula (Syntax check)
   CALL FUNCTION 'CHECK_FORMULA'
     EXPORTING
       formula = p_formel
       program = gv_repid
       routine = 'CHECK_VALUES'
     IMPORTING
       subrc   = gv_retcode.
*== compute formula
   IF gv_retcode IS INITIAL.
     CALL FUNCTION 'EVAL_FORMULA'
       EXPORTING
         formula = p_formel
         program = gv_repid
         routine = 'GET_VALUES'
       IMPORTING
         value   = p_result
       EXCEPTIONS
         OTHERS  = 1.
   ENDIF.
 
*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_VALUES
*&amp;---------------------------------------------------------------------*
FORM get_values USING parm CHANGING wert subrc.
   CASE parm.
     WHEN 'BREITE'.
       wert = p_breite.
       subrc = 0.
     WHEN 'HOEHE'.
       wert = p_hoehe.
       subrc = 0.
     WHEN 'LAENGE'.
       wert = p_laenge.
       subrc = 0.
   ENDCASE.
ENDFORM.                    "GET_VALUES
 
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CHECK_VALUES
*&amp;---------------------------------------------------------------------*
FORM check_values USING parm CHANGING subrc.
   CASE parm.
     WHEN 'BREITE'
       OR 'HOEHE'
       OR 'LAENGE'.
       subrc = 0.
   ENDCASE.
ENDFORM.                    "CHECK_VALUES</pre>
<h3>Bugs/ Probleme</h3>
<p>Ich habe es nicht geschafft, den Parameter UNIT_OF_MEASURE sinnvoll einzusetzen. In obigem Beispiel mit der Volumenberechnung wäre es natürlich schön, wenn ich eine Berechnung in Metern durchführen möchte, jedoch immer genau 1 CM Sicherheitsabstand addiert werden soll. Es scheint jedoch so, als würde der Parameter komplett ignoriert werden. Eventuell habe ich aber die Verwendung nicht richtig verstanden&#8230;</p>
<p>[notice type=&#8217;alert&#8217;]912586 &#8211; Formelinterpreter: geschachtelte Aufrufe mit Parametern<br />
1324714 &#8211; Formelinterpreter: Fehlerhafte Berechnungen bei TFKT [/notice]</p>
<p>Demoprogramm RSCALC10 funktioniert nicht.</p>
<p>Der Beitrag <a href="/blog/formelberechnung/">Formelberechnung</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
