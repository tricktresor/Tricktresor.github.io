<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>TableControl Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/tablecontrol/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Sat, 11 Apr 2020 12:47:01 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>TableControl Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>SimDia² &#8211; Neue Version des besten SAP-Import-Tools</title>
		<link>/blog/simdia2-neue-version-des-besten-sap-import-tools/</link>
					<comments>/blog/simdia2-neue-version-des-besten-sap-import-tools/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 22 Jul 2015 04:00:00 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Partner]]></category>
		<category><![CDATA[Featured]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[datenerfassung]]></category>
		<category><![CDATA[simdia]]></category>
		<category><![CDATA[Datenimport]]></category>
		<category><![CDATA[EXCEL]]></category>
		<category><![CDATA[Import]]></category>
		<category><![CDATA[ALV-Grid]]></category>
		<category><![CDATA[TableControl]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=163546</guid>

					<description><![CDATA[<p>Über ein Jahr sind seit der Veröffentlichung meines Test-Berichts zu SimDia² vergangen. Dort habe ich die Version 2.5 getestet. Seitdem wurden vom Hersteller ERSAsoft bereits zwei neue Versionen veröffentlicht. Höchste Zeit also für ein Update. Die aktuelle Version ist 2.7.</p>
<p>Der Beitrag <a href="/blog/simdia2-neue-version-des-besten-sap-import-tools/">SimDia² &#8211; Neue Version des besten SAP-Import-Tools</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Über ein Jahr sind seit der Veröffentlichung meines <a href="https://ersasoft.de/de/simdia/?s=tt">Test-Berichts zu SimDia²</a> vergangen. Dort habe ich die Version 2.5 getestet. Seitdem wurden vom Hersteller <a href="https://ersasoft.de/de/?s=tt">ERSAsoft</a> bereits zwei neue Versionen veröffentlicht. Höchste Zeit also für ein Update. Die aktuelle <a href="https://ersasoft.de/de/simdia/?s=tt">Version ist 2.7</a>.</p>
<h2><strong>Update</strong></h2>
<p>Neben vielen Kleinigkeiten wurden zwei recht große Funktionen implementiert. Zunächst zu den &#8220;Kleinigkeiten&#8221;, die jedoch das Leben noch einfacher machen:</p>
<ul>
<li>Pause-Button: Die aktuelle Aufzeichnung kann unterbrochen werden, um zum Beispiel nachschauen zu können, ob bereits bestimmte Daten vorhanden sind.</li>
<li>Gesteigerte Performance, insbesondere bei großen Datenmengen</li>
<li>Benutzung der F4-Hilfe während der Aufzeichnung</li>
<li>Mehrsprachigkeit</li>
<li>Verbesserte Unterstützung von eingabebereiten ALV-Grid</li>
</ul>
<p>Die zwei großen Änderungen sind:</p>
<ul>
<li>Dynamische Maßnahmen</li>
<li>Berechtigungsverwaltung</li>
</ul>
<p>Mit den<em> dynamischen Maßnahmen</em> ist es nun möglich, SAP-Aktionen dynamisch (sprich: für jeden Datensatz der Excel-Datei unterschiedlich) in Abhängigkeit der Datenkonstellation in SAP und/oder Excel auszuführen &#8211; oder dies eben nicht zu tun.</p>
<p>Zusammen mit der verbesserten Auswahlmöglichkeit bzw. Positionierbarkeit auf einem TableControl (s.u.) lassen sich z.B. Materialstämme sehr einfach anpassen.</p>
<p>Bereits mit der vorigen Version wurde SimDia² ein recht weit reichendes Verwaltungstool spendiert, um die Berechtigungen für das Programm sehr differenziert festzulegen. Dies dürfte vor allem in größeren Organisationen nicht ganz unwichtig sein.</p>
<p>Die Berechtigungsverwaltung erlaubt es einem Administrator, festzulegen, welcher Windows-Benutzer Skripte erstellen oder lediglich ausführen darf.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/07/2015-07-21_22-47-39.jpg"><img fetchpriority="high" decoding="async" class="alignnone size-medium wp-image-166925" src="https://tricktresor.com/wp-content/uploads/2015/07/2015-07-21_22-47-39-300x255.jpg" alt="Simdia² - Admin" width="300" height="255" srcset="/wp-content/uploads/2015/07/2015-07-21_22-47-39-300x255.jpg 300w, /wp-content/uploads/2015/07/2015-07-21_22-47-39.jpg 760w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Eine Übersicht über alle Verbesserungen findest du im <a href="https://ersasoft.de/de/ressourcen/newsletter-archiv/?s=tt">Newsletter-Archiv von SimDia²</a>.</p>
<h2><strong>Technik</strong></h2>
<p>SimDia² ist zwar nach wie vor ein reines Windows-Programm. Das Programm-Fenster legt sich mittlerweile aber nicht mehr nur einfach <span style="text-decoration: underline;">über</span> den SAP GUI sondern wird fest ans SAP GUI „angetackert“. Für mich ein kleiner, für die einfache Bedienung aber nicht unwichtiger Punkt.</p>
<h2><strong>Anwendung &#8211; Funktionalität </strong></h2>
<p>In TableControls ist die Suche nach dem Identifikations-Merkmal jetzt nicht mehr auf die erste Spalte eingeschränkt. Vielmehr kann jetzt in einer beliebigen Spalte nach einer zu ändernden Tabellenzeile gesucht werden. Darüber hinaus kann jetzt auch z.B. in SUB-Fenstern, wie z.B. der Sichtenauswahl der Transaktion MM01/MM02&#8230;) gezielt nach der auszuwählenden Sicht gesucht werden, auch wenn sich diese je nach Material an unterschiedlichsten Positionen befindet.</p>
<h2><strong>Pro und Contra</strong></h2>
<p>Zwar können mit SimDia² immer noch keine Abfragen oder Verzweigungen programmiert werden (was ja eigentlich auch der Programm-Philosophie „Daten importieren ohne programmieren“ widersprechen würde). Aber immerhin lassen sich jetzt auch auf einfache Weise Buttons (und auch Tabs) abhängig von den Excel-Daten betätigen. Und damit sind wir dann doch schon (fast) bei der Möglichkeit, Abfragen oder Verzweigungen zu erstellen (das Wort „Programmieren“ vermeide ich bewusst, denn da gehört doch noch ein wenig mehr dazu.).</p>
<p>Anhand eines <a href="https://ersasoft.de/de/videos/?s=tt#Tutorial7">Videos</a> auf der SimDia²-Homepage wird z.B. gezeigt, wie aufgrund der Excel-Daten ein Button betätigt werden kann, um fallweise in einem dadurch ausgelösten Popup zusätzliche Daten zu erfassen.</p>
<h2>Fazit</h2>
<p>Nach wie vor ist <a href="https://ersasoft.de/de/simdia/?s=tt">Simdia²</a> ein einfach gehaltenes Tool, das jedoch sehr mächtig ist. Als Programmierer möchte ich natürlich für jede wiederkehrende Aufgabe ein ABAP-Programm schreiben. Solange es jedoch lediglich darum geht, aus einer Excel-Tabelle einfache Daten in ein SAP-System zu bekommen, ist Simdia² fast jeder Programmierung überlegen.</p>
<p>Schon wenn nur ein paar wenige (einfache) Datenübernahmeprogramme geschrieben werden müssen, komme ich wahrscheinlich bereits in Erklärungsnot, warum ich denn dafür nicht eine Simdia-Lizenz gekauft hätte.</p>
<p>Alleine dadurch, dass der Fachbereich selbst schnell und einfach definieren kann, welche Daten wo abgelegt werden sollen, können zwei Fliege mit einer (Simdia²-) Klappe geschlagen werden:</p>
<ol>
<li>Die IT wird entlastet. Es muss keine Anforderung definiert werden, die dann geprüft und umgesetzt werden muss.</li>
<li>Der Fachbereich kann sich selbst helfen und ist nicht auf freie Kapazitäten der IT angewiesen</li>
</ol>
<p>Häufig werden Anforderungen gar nicht an die IT herangetragen, weil von vornherein feststeht, dass für solche kleinen Aufgaben kaum Zeit übrig ist.</p>
<p>Ich habe von Fachabteilungen gehört, die sich mit einer geeigneten Batchinput-Datei und der Word-Serienbrief-Funktion geholfen haben, um Daten in ihr SAP-System zu bekommen. Im Gegensatz dazu ist Simdia² wirklich ein Kinderspiel!</p>
</p>
<h2>Tricktresor- Bonus</h2>
<p>Nach wie vor bietet ERSAsoft allen Tricktresor-Lesern einen Nachlass von 5% an. Fülle einfach das unten stehende Formular aus und du bekommst den erwähnten Nachlass gewährt.</p>
<p><strong>Du wirst dich wundern, was mit Simdia in deinem Unternehmen möglich ist!</strong></p>
<p><span style="line-height: 1.5em;">[accordian]</span></p>
<p>[accordian_list title=&#8217;Sichere dir einen 5%-Rabatt auf SimDia²!&#8217;]</p>
<p>[notice type=&#8217;info&#8217;]</p>
<p>[contact-form-7]</p>
<p>[/notice]</p>
<p>[/accordian_list]</p>
<p>[/accordian]</p>
<p>
<p>Der Beitrag <a href="/blog/simdia2-neue-version-des-besten-sap-import-tools/">SimDia² &#8211; Neue Version des besten SAP-Import-Tools</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/simdia2-neue-version-des-besten-sap-import-tools/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Breite des Navigationsfensters</title>
		<link>/blog/breite-des-navigationsfensters/</link>
					<comments>/blog/breite-des-navigationsfensters/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Mon, 20 Aug 2007 08:29:57 +0000</pubDate>
				<category><![CDATA[Tabellenpflegedialog]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[splitter]]></category>
		<category><![CDATA[SAPGUI]]></category>
		<category><![CDATA[GUI]]></category>
		<category><![CDATA[TableControl]]></category>
		<category><![CDATA[Viewcluster]]></category>
		<category><![CDATA[Container]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=425</guid>

					<description><![CDATA[<p>Die Breite des Navigationsfensters ist leider fest eingestellt und meistens etwas zu schmal f&#252;r die meisten Beschreibungen. Hier zeigen wir Ihnen, wie Sie die Breite individuell einstellen k&#246;nnen.</p>
<p>Der Beitrag <a href="/blog/breite-des-navigationsfensters/">Breite des Navigationsfensters</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Die Breite des Navigationsfensters im Viewcluster ist leider fest eingestellt und meistens etwas zu schmal für die meisten Beschreibungen. Hier zeigen wir Ihnen, wie Sie die Breite des Splitters individuell einstellen können.</p>
<p>Um die Breite des Navigationsfensters zu ändern sind die folgenden Schritte notwendig:</p>
<ol>
<li>Ablauflogik des ersten Pflegedialogs ändern</li>
<li>PBO-Modul anlegen</li>
<li>Unterroutine anlegen</li>
</ol>
<p>Mit den folgenden Änderungen wird die Größe des Navigationsfensters einmal angepasst und die Beschreibungen zu den einzelnen Pflegedialoges sind von Anfang an gut lesbar.</p>
<h3 class="head1">1. Ablauflogik anpassen</h3>
<p>Fügen Sie als letzte Anweisung im PBO die folgende Zeile ein:</p>
<p class="sap1">MODULE ZZ_VIM_INFO.</p>
<p class="text1"><strong><u>ACHTUNG:</u><br />
</strong>Die Änderungen, die Sie in der Ablauflogik vornehmen werden mit einer Neugenerierung des Tabellenpflegedialogs gelöscht!</p>
<h3 class="head1">2. PBO-Modul anlegen</h3>
<p>Mit einem Doppelklick auf ZZ_VIM_INFO können Sie das PBO-Modul anlegen. Am besten rufen Sie darin die Unterroutine ZZ_VIM_INFO auf:</p>
<p>PERFORM zz_vim_info.</p>
<h3 class="head1">3. Unterroutine anlegen</h3>
<p>Legen Sie &#8211; ebenfalls mit einem Doppelklick &#8211; die Unterroutine an:</p>
<pre class="sap1"><span style="color: #fb2412;">*&amp;---------------------------------------------------------------------*
*&amp;      Form  zz_vim_info
*&amp;---------------------------------------------------------------------*
* Set the width of the docking control to 300
*----------------------------------------------------------------------*</span>
FORM zz_vim_info .

  DATA lv_width_act TYPE i.
  DATA lv_width_new TYPE i VALUE 300.
  FIELD-SYMBOLS &lt;navi&gt; TYPE REF TO cl_gui_docking_container.
  ASSIGN ('(SAPLSVCM)DOCKING_CONTAINER') TO &lt;navi&gt;.
  IF sy-subrc = 0 AND NOT &lt;navi&gt; IS INITIAL.
<span style="color: #fb2412;">*** Get actual width</span>
    CALL METHOD &lt;navi&gt;-&gt;get_width
      IMPORTING
        width = lv_width_act.

    IF lv_width_act &lt;&gt; lv_width_new.
<span style="color: #fb2412;">*** Set desired width</span>
      CALL METHOD &lt;navi&gt;-&gt;set_width
        EXPORTING
          width = lv_width_new.
<span style="color: #fb2412;">*** Refresh control to adjust dynpro size again</span>
      CALL FUNCTION 'SAPGUI_SET_FUNCTIONCODE'
        EXPORTING
          functioncode = '=00'
        EXCEPTIONS
          OTHERS       = 2.
    ENDIF.
  ENDIF.

ENDFORM.                    " zz_vim_info</pre>
<p>Nachdem die Breite gesetzt wurde, muss noch einmal der Bildschirm neu aufgebaut werden, denn das TableControl des Pflegedialoges wurde für die ursprüngliche Dynpro-Größe angepasst. Das heißt, durch das breitere Navigationsfenster, passt das TableControl evtl. nicht mehr auf das nun kleinere Dynpro. Indem einmal &#8220;Enter gedrückt&#8221; wird, wird der Bildschirm erneut aufgebaut.</p>
<p>Der Beitrag <a href="/blog/breite-des-navigationsfensters/">Breite des Navigationsfensters</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/breite-des-navigationsfensters/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Anderen Pflegedialog aufrufen</title>
		<link>/blog/anderen-pflegedialog-aufrufen/</link>
					<comments>/blog/anderen-pflegedialog-aufrufen/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate></pubDate>
				<category><![CDATA[Tabellenpflegedialog]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynpros]]></category>
		<category><![CDATA[Editor]]></category>
		<category><![CDATA[Materialstamm]]></category>
		<category><![CDATA[Customizing]]></category>
		<category><![CDATA[TableControl]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=396</guid>

					<description><![CDATA[<p>Durch Zeitpunkte k&#246;nnen Sie in die Verarbeitung der Programmlogik eingreifen. Leider gibt es nur f&#252;r einige Funktionen die entsprechenden Zeitpunkte. In diesem Artikel zeigen wir Ihnen, wie Sie durch eine einfache Manipulation des Dynpros aus der View-Pflege den Aufruf eines anderen Pflegedialogs einbinden k&#246;nnen.</p>
<p>Der Beitrag <a href="/blog/anderen-pflegedialog-aufrufen/">Anderen Pflegedialog aufrufen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Durch Zeitpunkte k&ouml;nnen Sie in die Verarbeitung der Programmlogik eingreifen. Leider gibt es nur f&uuml;r einige Funktionen die entsprechenden Zeitpunkte. In diesem Artikel zeigen wir Ihnen, wie Sie durch eine einfache Manipulation des Dynpros aus der View-Pflege den Aufruf eines anderen Pflegedialogs einbinden k&ouml;nnen.<br /><P class="head1">Anwendung</P><P>Einen Pflegedialog zu einer anderen Tabelle aufzurufen, kann recht n&uuml;tzlich sein. Zum Beispiel k&ouml;nnten Sie in einer Tabelle Daten mit verschieden &#8220;Typen&#8221; hinterlegen. Je &#8220;Typ&#8221; k&ouml;nnte es dann n&ouml;tig sein, zus&auml;tzlich eine andere Tabelle zu pflegen.</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Pflegeview/00call_demo.jpg"><BR>Beispieltabelle mit Druckknopf</P></TD></TR></TBODY></TABLE></P><P class="head1">Beispiel</P><P>Nehmen wir an, Sie haben eine Tabelle mit dem Feld &#8220;Materialnummer&#8221;. Eine Materialnummer ist einer Materialart zugeordnet. In der Tabelle sollen Materialien hinterlegt werden, zu denen bei der Produktion spezielle Pr&uuml;fungen notwendig sind. Die Art der Pr&uuml;fungen sind in einer separaten Customizingtabelle hinterlegt. Da sich die Pr&uuml;fungen und Ausp&auml;gungen aber je Materialart unterscheiden, muss zu Fertigerzeugnissen eine andere Tabelle gepflegt werden als f&uuml;r Rohstoffe.</P><P>&Uuml;ber einen View k&ouml;nnen Sie die Materialtabelle &#8211; nennen wir sie ZMATPRUEF &#8211; mit dem Materialstamm (Tabelle MARA) verbinden. Als zus&auml;tzliches Viewfeld wird die Materialart aufgenommen.</P><P>Um die Materialart in den View aufnehmen zu k&ouml;nnen, m&uuml;ssen Sie in ZMATPRUEF den Fremdschl&uuml;ssel f&uuml;r Feld MATNR auf die Tabelle MARA definiert haben.</P><P>Sie k&ouml;nnen dann im Pflegeview &uuml;ber den Button [_Beziehungen_] die Tabelle MARA ausw&auml;hlen und das Feld MTART in die Feldliste aufnehmen.</P><P>Im angelegten View &#8211; er k&ouml;nnte ZMATPRUEF_V heissen &#8211; definieren Sie in den Feldeigenschaften, dass das Feld &#8220;Materialart&#8221; nur gelesen werden darf (Feld &#8220;P&#8221; [Pflegemerkmal] auf &#8220;R&#8221; setzen&#8221;).</P><P>Aufgrund dieses Feldes entscheiden wir hinterher, welche Pflegetabelle wir aufrufen.&nbsp;</P><P class="head1">Vorgehen</P><P class="head2">Drucktaste in den TableControl einf&uuml;gen</P><P>So gehen Sie vor, um einen Button in ein Dynpro hinzuzuf&uuml;gen um mit diesem einen anderen Pflegedialog aufzurufen:</P><P>Nachdem Sie den Pflegedialog f&uuml;r den View ZMATPRUEF_V angelegt haben, &auml;ndern Sie das generierte Dynpro:&nbsp;Men&uuml; <EM>Umfeld &#8211; Modifikation &#8211; Pflegebild</EM>.</P><P>Im Dynproeditor ziehen Sie einfach ein Feld vom Typ &#8220;Drucktaste&#8221; rechts neben die Felder <STRONG>im</STRONG> TableControl.</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Pflegeview/00call_dynpro.jpg"><BR>Die neue Drucktaste</P></TD></TR></TBODY></TABLE></P><P>Die Attribute zur Drucktaste k&ouml;nnten so aussehen:</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Pflegeview/00call_attr.jpg"><BR>Attribute der Drucktaste</P></TD></TR></TBODY></TABLE></P><P>Wichtig hierbei ist der Funktionscode, der mit&nbsp;Prozentzeichen enden <STRONG>muss</STRONG>.&nbsp;Die Prozentzeichen werden beim Dr&uuml;cken in die aktuelle Zeile umgewandelt. Wird der Druckknopf in der dritten Zeile gedr&uuml;ckt, so hat der Funktionscode den Wert ZZCALL003.</P><P class="head2">Aufruf des Pflegedialogs</P><P>Es gibt leider keinen Zeitpunkt mit dem man auf das Dr&uuml;cken des Knopfes reagieren k&ouml;nnte. Deswegen implementieren wir ein neues MODUL in die Ablauflogik des Dynpros.</P><P>Es g&auml;be zwei M&ouml;glichkeiten, an welcher Stelle man auf den Tastendruck reagieren k&ouml;nnte: </P><OL><LI>innerhalb des LOOP &uuml;ber die Tabellenzeilen <LI>am Ende der Verarbeitung des PAI</LI></OL><P>Innerhalb des LOOP im TableControl muss man abfragen, ob die aktuell durchlaufene Zeile die ist, in der die Drucktaste bet&auml;tigt wurde.</P><P>Bei Variante (2) muss man die Zeilennummer&nbsp;im Funktionscode auswerten und den entsprechenden Tabelleneintrag nachlesen.</P><P>Hier habe ich mich f&uuml;r die erste Variante entschieden.</P><P>F&uuml;gen Sie in der Ablauflogik direkt nach &#8220;LOOP AT EXTRACT&#8221; die folgende Zeile ein:</P><P class="sap1">MODULE ZZ_USERCOMMAND.</P><P>Mit Doppelklick legen Sie das Modul an. Das Programm schl&auml;gt automatisch vor, dass das Modul in ein neues Include in der Funktionsgruppe des Pflegeviews angelegt wird. </P><P>So k&ouml;nnte das Coding des Moduls aussehen:</P><P class="sap1"><FONT color="#fb2412">*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR>*&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Module&nbsp; ZZ_USERCOMMAND&nbsp; INPUT<BR>*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR></FONT>MODULE zz_usercommand INPUT.<BR><BR>&nbsp; IF sy-ucomm(6) = &#8216;ZZCALL&#8217;.&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; PERFORM zz_call_view_dialog USING sy-ucomm+6(3).&nbsp;&nbsp;<BR>&nbsp; ENDIF.<BR><BR>ENDMODULE.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8221; ZZ_USERCOMMAND&nbsp; INPUT</P><P class="text1">Die Routine ZZ_CALL_VIEW_DIALOG enth&auml;lt das eigentliche Coding f&uuml;r den Aufruf des Pflegedialogs:</P><P class="sap1"><FONT color="#fb2412">*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR>*&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form&nbsp; ZZ_CALL_VIEW_DIALOG<BR>*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*</FONT><BR>FORM zz_call_view_dialog USING value(fi_row).<BR><BR><FONT color="#fb2412">*** Datendeklarationen</FONT><BR>&nbsp; DATA lv_tabname TYPE tabname.<BR>&nbsp; DATA ls_sellist TYPE vimsellist.<BR>&nbsp; DATA lt_sellist TYPE STANDARD TABLE OF vimsellist.<BR>&nbsp; DATA lv_row&nbsp;&nbsp;&nbsp;&nbsp; TYPE i.<BR><BR><FONT color="#fb2412">*** Die &uuml;bergebene Nummer aus der Drucktaste&nbsp;ist der aktuellen<BR>*** sichtbaren Zeile im TableControl. Um die richtige Position<BR>*** herauszubekommen, muss die&nbsp;erste im TableControl angezeigte<BR>*** Zeile addiert werden:</FONT><BR>&nbsp; lv_row = fi_row + tctrl_zmatpruef_v-top_line &#8211; 1.<BR><BR><FONT color="#fb2412">*** Hier pr&uuml;fen wir, ob die aktuell im LOOP durchlaufene&nbsp;Zeile<BR>*** auch die Zeile ist, in der der Druckknopf bet&auml;tigt wurde</FONT><BR>&nbsp; CHECK lv_row = tctrl_zmatpruef_v-current_line.<BR><BR><FONT color="#fb2412">*** &Uuml;bernahme der unstrukturierten Daten EXTRACT in die View-Struktur</FONT><BR>&nbsp; zmatpruef_v = extract.<BR><BR><FONT color="#fb2412">*** Hier entscheiden wir uns, welche Tabelle zur Materialart geh&ouml;rt:</FONT><BR>&nbsp; CASE zmatpruef_v-mtart.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;FERT&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lv_tabname = &#8216;ZMATPRUEF_FERT&#8217;.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;ROH&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lv_tabname = &#8216;ZMATPRUEF_ROH&#8217;.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;HALB&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lv_tabname = &#8216;ZMATPRUEF_HALB&#8217;.<BR>&nbsp;&nbsp;&nbsp; WHEN OTHERS.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MESSAGE i000(vz) WITH &#8216;Kein Customizing n&ouml;tig&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXIT.<BR>&nbsp; ENDCASE.<BR><BR><FONT color="#fb2412">*** In der ermittelten Customizingtabelle sollte als Schl&uuml;sselfeld die <BR>*** Materialnummer vorhanden sein, da ja die Einstellungen zur <BR>*** Materialnummer vorgenommen werden m&uuml;ssen.<BR>*** Deswegen&nbsp;&uuml;bergeben wir dem Pflegeview die Materialnummer<BR></FONT>&nbsp; CLEAR lt_sellist.<BR>&nbsp; ls_sellist-viewfield = &#8216;MATNR&#8217;.<BR>&nbsp; ls_sellist-operator = &#8216;EQ&#8217;.<BR>&nbsp; ls_sellist-value = zmatpruef_v-matnr.<BR>&nbsp; APPEND ls_sellist TO lt_sellist.<BR><BR><BR><FONT color="#fb2412">*** Dies ist der Aufruf des Pflegedialoges zur ermittelten Tabelle</FONT><BR>&nbsp; CALL FUNCTION &#8216;VIEW_MAINTENANCE_CALL&#8217;<BR>&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = status-action<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = lv_tabname<BR>&nbsp;&nbsp;&nbsp; TABLES<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dba_sellist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = lt_sellist<BR>&nbsp;&nbsp;&nbsp; EXCEPTIONS<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; client_reference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreign_lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invalid_action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_clientindependent_auth&nbsp;&nbsp;&nbsp; = 4<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_database_function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 5<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_editor_function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 6<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_show_auth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 7<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_tvdir_entry&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 8<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_upd_auth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 9<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; only_show_allowed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 10<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; system_failure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 11<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unknown_field_in_dba_sellist = 12<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view_not_found&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 13<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maintenance_prohibited&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 14<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OTHERS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 15.<BR>&nbsp; IF sy-subrc = 0.<BR><FONT color="#fb2412">*** Falls der Pflegeview zur Tabelle ZMATPRUEF_V Teil eines <BR>*** Viewclusters ist, m&uuml;ssen Sie die folgenden beiden Zeilen<BR>*** aktivieren, um wieder auf dem Pflegeview zu landen&nbsp;</FONT><BR><FONT color="#008952">*&nbsp;&nbsp;&nbsp; CLEAR: vim_leave_screen, vim_act_dynp_view.<BR>*&nbsp;&nbsp;&nbsp; SET SCREEN 0. LEAVE SCREEN.<BR></FONT>&nbsp; ELSE.<BR><FONT color="#fb2412">*** Fehlermeldung,&nbsp;falls eine Pflege nicht m&ouml;glich war<BR></FONT>&nbsp;&nbsp;&nbsp; MESSAGE i000(vz) WITH &#8216;Pflege nicht m&ouml;glich; SUBRC=&#8217; sy-subrc.<BR>&nbsp; ENDIF.<BR><BR>ENDFORM.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8221; ZZ_CALL_VIEW_DIALOG</P><P class="head2">&Auml;nderung der&nbsp;Feldeigenschaften</P><P>Als letztes bleibt uns noch die &Auml;nderung der Feldeigenschaften f&uuml;r den Druckknopf, denn im Anzeigemodus ist der Druckknopf nicht aktiv.</P><P>um den Druckknopf auch im Anzeigemodus zu aktivieren, m&uuml;ssen Sie im PBO innerhalb des LOOP AT EXTRACT ein Modul einf&uuml;gen:</P><P class="sap1">MODULE ZZ_SCREEN.</P><P>Coding in diesem Modul:</P><P class="sap1"><FONT color="#fb2412">*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR>*&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Module&nbsp; ZZ_SCREEN&nbsp; OUTPUT<BR>*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR></FONT>MODULE zz_screen OUTPUT.<BR><BR>&nbsp; LOOP AT SCREEN.<BR>&nbsp;&nbsp;&nbsp; IF screen-name = &#8216;ZZBUTTON_CALL&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; screen-input = &#8216;1&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MODIFY SCREEN.<BR>&nbsp;&nbsp;&nbsp; ENDIF.<BR>&nbsp; ENDLOOP.<BR><BR>ENDMODULE.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8221; ZZ_SCREEN&nbsp; OUTPUT</P><P class="head1">Anmerkungen</P><P>Nachdem Sie nun alles aktiviert haben, k&ouml;nnen Sie die Funktionalit&auml;t nutzen.</P><P>Beachten Sie bitte, dass bei einer Neugenerierung die folgenden &Auml;nderungen &uuml;berschrieben werden und erneut angepasst werden m&uuml;ssen:</P><UL><LI>Druckknopf im Dynpro <LI>Ablauflogik im Dynpro</LI></UL><P>Diese &Auml;nderungen sind jedoch minimal, da das Coding der Module erhalten bleibt.</P></p>
<p>Der Beitrag <a href="/blog/anderen-pflegedialog-aufrufen/">Anderen Pflegedialog aufrufen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/anderen-pflegedialog-aufrufen/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Wichtige Felder</title>
		<link>/blog/wichtige-felder/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate></pubDate>
				<category><![CDATA[Tabellenpflegedialog]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[TableControl]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=395</guid>

					<description><![CDATA[<p>Eine Beschreibung der Felder, die w&#228;hrend der Zeitpunkte im Pflegedialog verwendet werden k&#246;nnen. So ist es z.B. wichtig zu wissen, ob man im Anzeige- oder &#196;nderungsmodus ist.</p>
<p>Der Beitrag <a href="/blog/wichtige-felder/">Wichtige Felder</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Eine Beschreibung der Felder, die w&auml;hrend der Zeitpunkte im Pflegedialog verwendet werden k&ouml;nnen. So ist es z.B. wichtig zu wissen, ob man im Anzeige- oder &Auml;nderungsmodus ist.<br /><P class="head1">MAINT_MODE</P><P>Zeigt an, ob der Anwender sich im Anzeige- oder &Auml;nderungsmodus befindet.</P><P>M&ouml;gliche Werte:</P><UL><LI>anzeigen (S) <LI>aendern (U) <LI>hinzufuegen (A) <LI>kopieren (C) <LI>transportieren (T) <LI>pruefen (C) <LI>zurueckholen (Z)</LI></UL><P>Die Werte sind ersichtlich im Include LSVIMDAT.</P><P class="head1">Tabellen TOTAL/ EXTRACT</P><P>In diesen Tabellen befinden sich die Daten aus der Customizingtabelle. Wenn der View Teil eines Viewclusters ist, dann befindet sich in <FONT color="#fb2412">TOTAL </FONT>der gesamte Tabelleninhalt und in <FONT color="#fb2412">EXTRACT</FONT> der augenblicklich ausgew&auml;hlte.</P><P>Die Tabellen haben keine Struktur. Deswegen m&uuml;ssen diese zum Lesen in eine Tabelle oder einen Arbeitsbereich mit der entsprechenden Struktur &uuml;berf&uuml;hrt werden.</P><P>Der eigentlichen Tabellenstruktur sind noch die Felder ACTION und MARK nachgestellt.&nbsp;</P><P>Mit Feld ACTION wird im Tabellenpflegedialog gekennzeichnet, ob ein Eintrag ge&auml;ndert, gel&ouml;scht oder hinzugef&uuml;gt wurde.</P><P>Das Feld MARK bekommt ein &#8220;M&#8221;, wenn der Eintrag markiert wurde.</P><P class="head1">&lt;VIM_TOTAL_STRUC&gt;</P><P class="text1">ist ein Feldsymbol zur aktuellen Struktur.</P><P class="head1">&lt;STATUS&gt;</P><P class="text1">Dieses Feldsymbol enth&auml;lt viele wichtige Felder, wie z. B. die aktuelle Position auf dem Tablecontrol, den Funktionscode (FCODE)</P><P class="head1">&nbsp;Tablecontrol</P><P>Der aktuelle Tablecontrol heisst <FONT color="#fb2412">TCTRL_&lt;Name des Views&gt;</FONT>. Wenn der View ZVMATKV heisst, dann ist der Name des generierten Tablecontrols TCTRL_ZVMATKV. </P><P>Dies ist wichtig zu wissen, wenn man zur Laufzeit Daten des Tablecontrols &auml;ndern m&ouml;chte. Man kann z.B. in den Feldeigenschaften ein Feld ausblenden (COLS-INVISIBLE = X), die L&auml;nge des Ausgabefeldes &auml;ndern (COLS-VISLENGTH) oder ein Feld hervorheben (COLS-SCREEN-INTENSIFIED = &#8216;1&#8217;).</P><P>Mit dem Feld <FONT color="#fb2412">LINE_SEL_MODE</FONT> kann man definieren, ob mehrere Eintr&auml;ge selektiert werden d&uuml;rfen (2) oder nur ein Eintrag (1).</P><P>Mit dem Feld <FONT color="#fb2412">INVISIBLE</FONT> kann man sogar den gesamten Tablecontrol ausblenden.</P></p>
<p>Der Beitrag <a href="/blog/wichtige-felder/">Wichtige Felder</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
