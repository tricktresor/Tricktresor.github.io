<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>xml Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/xml/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Fri, 24 Aug 2018 09:40:57 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>xml Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>WMHelp &#8211; XMLpad-Editor [Tool]</title>
		<link>/blog/wmhelp-xmlpad-editor-tool/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 17 Feb 2016 18:42:46 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[freeware]]></category>
		<category><![CDATA[Editor]]></category>
		<category><![CDATA[xml]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=490192</guid>

					<description><![CDATA[<p>Gute Tools sind selten und teilweise schwer zu finden. Mit dem WMHep XMLpad for Windows habe ich einen guten und verlässlichen XML-Editor gefunden. Diesen stelle ich hier kurz vor. </p>
<p>Der Beitrag <a href="/blog/wmhelp-xmlpad-editor-tool/">WMHelp &#8211; XMLpad-Editor [Tool]</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Nachdem ich nach einer Neuinstallation meines Notebooks wieder lange nach einem XML-Editor gesucht habe, hier ein Merker für mich und für euch:</p>
<p><a href="http://xmlpad-mobile.com/">WMHelp &#8211; XMLpad</a> =&gt; Link ist nicht mehr aktuell; Alternative: Download bei <a href="http://www.tucows.com/thankyou.html?swid=507699">tucows.com</a>.</p>
<p>Ich muss gelegentlich XML-Dateien sichten und analysieren. Dafür brauche ich kein riesiges Tool aber Notepad reicht auch nicht mehr aus. Nach langem Suchen bin ich auf WMHelp XMLpad gestoßen. Er hat mir sehr gut gefallen und bietet jede Menge Features und Ansichten.</p>
<p>Ihr seht eine einfache XML-Datei, die in Wikipedia als Beispiel verwendet wird:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/02/2016-02-17_19-27-56.jpg" rel="attachment wp-att-490193"><img fetchpriority="high" decoding="async" class="alignnone size-full wp-image-490193" src="https://tricktresor.com/wp-content/uploads/2016/02/2016-02-17_19-27-56.jpg" alt="2016-02-17_19-27-56" width="1101" height="713" srcset="/wp-content/uploads/2016/02/2016-02-17_19-27-56.jpg 1101w, /wp-content/uploads/2016/02/2016-02-17_19-27-56-300x194.jpg 300w, /wp-content/uploads/2016/02/2016-02-17_19-27-56-768x497.jpg 768w, /wp-content/uploads/2016/02/2016-02-17_19-27-56-1024x663.jpg 1024w" sizes="(max-width: 1101px) 100vw, 1101px" /></a></p>
<p>Auf Knopfdruck lässt sich ein DTD zur Datei erzeugen. Das XML kann auf Fehler geprüft werden. Im Viewer kann direkt auf einzelne Knoten zugegriffen werden.</p>
<p>Sehr schön finde ich die Ansichten <em>Grid View</em> und <em>Table View</em>:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/02/2016-02-17_19-28-14.jpg" rel="attachment wp-att-490194"><img decoding="async" class="alignnone size-full wp-image-490194" src="https://tricktresor.com/wp-content/uploads/2016/02/2016-02-17_19-28-14.jpg" alt="2016-02-17_19-28-14" width="640" height="359" srcset="/wp-content/uploads/2016/02/2016-02-17_19-28-14.jpg 640w, /wp-content/uploads/2016/02/2016-02-17_19-28-14-300x168.jpg 300w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/02/2016-02-17_19-28-25.jpg" rel="attachment wp-att-490195"><img decoding="async" class="alignnone size-full wp-image-490195" src="https://tricktresor.com/wp-content/uploads/2016/02/2016-02-17_19-28-25.jpg" alt="2016-02-17_19-28-25" width="640" height="359" srcset="/wp-content/uploads/2016/02/2016-02-17_19-28-25.jpg 640w, /wp-content/uploads/2016/02/2016-02-17_19-28-25-300x168.jpg 300w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
<p>Das Programm ist Freeware und kann hier herunter geladen werden:</p>
<p>http://xmlpad-mobile.com/wp-content/uploads/2014/03/XmlPad_3.0.4.1.zip</p>
<p>Der Beitrag <a href="/blog/wmhelp-xmlpad-editor-tool/">WMHelp &#8211; XMLpad-Editor [Tool]</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Serialize me</title>
		<link>/blog/serialize-me/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 02 Dec 2015 17:42:33 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[call transformation]]></category>
		<category><![CDATA[interface]]></category>
		<category><![CDATA[ZIP]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=368973</guid>

					<description><![CDATA[<p>Serialisierung von Objekten. Was ist das? Wozu braucht man das? Wie kann man es sinnvoll nutzen? </p>
<p>Der Beitrag <a href="/blog/serialize-me/">Serialize me</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Das Interface IF_SERIALIZABLE_OBJECT läuft einem hin und wieder in SAP-Standardklassen über den Weg.</p>
<h2>Was ist Serialisierung?</h2>
<p>Wikipedia sagt über <a href="https://de.wikipedia.org/wiki/Serialisierung">Serialisierung</a>:</p>
<blockquote><p>Die <b>Serialisierung</b> ist in der Informatik eine Abbildung von strukturierten Daten auf eine sequenzielle Darstellungsform.</p></blockquote>
<p>Eine der bekanntesten Anwendungen für die Serialisierung ist das JSON-Format, in dem komplexe Daten in einer lesbaren Form dargestellt werden können.</p>
<p>Eine andere Form der Serialisierung lässt sich mit XML bewerkstelligen.</p>
<h2>Interface IF_SERIALIZABLE_OBJECT</h2>
<p>Damit ein Objekt (Klasse) serialisierbar ist, muss es das Interface IF_SERIALIZABLE_OBJECT implementieren:</p>
<pre>CLASS lcl_serialize_me DEFINITION.
 PUBLIC SECTION.
 INTERFACES if_serializable_object.

 DATA mt_t005  TYPE STANDARD TABLE OF t005.
 DATA mt_t005t TYPE STANDARD TABLE OF t005t.

ENDCLASS.</pre>
<p>Zur Demonstration habe ich die zwei öffentlichen Attribute MT_T005 und MT_T005T hinzugefügt.</p>
<p>Um die Klasse nutzen zu können, muss sie instantiiert werden:</p>
<pre>DATA ref TYPE REF TO lcl_serialize_me.
CREATE OBJECT ref.</pre>
<p>In die Tabellen laden wir nun alle EG-Länder inklusive Texte:</p>
<pre> SELECT * FROM t005 INTO TABLE ref-&gt;mt_t005 WHERE xegld = abap_true.
 IF sy-subrc = 0.
   SELECT * FROM t005t INTO TABLE ref-&gt;mt_t005t
      FOR ALL ENTRIES IN ref-&gt;mt_t005
    WHERE land1 = ref-&gt;mt_t005-land1
      AND spras = sy-langu.
 ENDIF.
</pre>
<p>Somit haben wir eine Objektreferenz erzeugt, die ein paar Daten enthält.</p>
<p>Diese Daten sind auch serialisierbar. Andere Daten, wie zum Beispiel Attribute mit Referenzen zu anderen Klassen, sind nicht serialisierbar.</p>
<p>Deswegen darf das Interface IF_SERIALIZABLE_OBJECT nur dann implementiert werden, wenn alle Attribute der Klasse für die Serialisierung geeignet sind.</p>
<h2>Serialisierung</h2>
<p>Nun soll das Objekt mittels XML serialisiert werden. Das geht schnell und einfach:</p>
<pre>DATA ser TYPE string.</pre>
<pre>CALL TRANSFORMATION id
     SOURCE model = ref
     RESULT XML ser.</pre>
<p>Das Ergebnis ist ein lesbarer XML-String (Ausschnitt):</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-20-37.png"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-368974" src="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-20-37-300x168.png" alt="2015-12-02_18-20-37" width="300" height="168" srcset="/wp-content/uploads/2015/12/2015-12-02_18-20-37-300x168.png 300w, /wp-content/uploads/2015/12/2015-12-02_18-20-37-1024x572.png 1024w, /wp-content/uploads/2015/12/2015-12-02_18-20-37.png 1145w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Tipp: Im Debugger ist es möglich, einen XML-String komplett darstellen zu lassen:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-21-08.png"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-368975" src="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-21-08-300x101.png" alt="2015-12-02_18-21-08" width="300" height="101" srcset="/wp-content/uploads/2015/12/2015-12-02_18-21-08-300x101.png 300w, /wp-content/uploads/2015/12/2015-12-02_18-21-08.png 960w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<h2>Speicherplatz sparen</h2>
<p>Da die Tabellen gefüllt sind, ist das Objekt recht groß geworden. Mit GZIP schrumpfen wir es auf eine kleinere Größe:</p>
<pre>DATA zip TYPE xstring.
cl_abap_gzip=&gt;compress_text(
     EXPORTING text_in  = ser
     IMPORTING gzip_out = zip ).</pre>
<p>Dies aber nur nebenbei&#8230;</p>
<h2>Deserialisierung</h2>
<p>Nun möchten wir das serialisierte Objekt natürlich irgendwo speichern, ablegen oder verschicken.</p>
<p>Das ist jedoch nur sinnvoll, wenn wir es auch wieder deserialisieren können&#8230;</p>
<p>Die Objektreferenz ist in dem Fall natürlich leer:</p>
<pre>CLEAR ref.
</pre>
<p>Die Deserialisierung funktioniert ebenfalls mittel CALL TRANSFORMATION in der Standardvariante:</p>
<pre>CALL TRANSFORMATION id
     SOURCE XML ser
     RESULT model = ref.</pre>
<p>Im Debugger kannst du überprüfen, dass die komplette Referenz wiederhergestellt wurde. Das ist fast schon Zauberei&#8230; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f642.png" alt="🙂" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Vielen Dank an Haubi für diese Idee!</p>
<h2>Nutzen</h2>
<p>Wozu die Serialisierung und Deserialisierung tatsächlich nützlich ist, wird man wahrscheinlich erst wissen, wenn man es braucht. Daher ist es in jedem Fall gut zu wissen, dass es funktioniert.</p>
<h2>DEMO</h2>
<p>Ein einfaches Demoprogramm ist DEMO_SERIALIZABLE_OBJECT. Hier wird ebenfalls die Serialisierung demonstriert.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-41-07.png"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-368977" src="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-41-07-300x269.png" alt="2015-12-02_18-41-07" width="300" height="269" srcset="/wp-content/uploads/2015/12/2015-12-02_18-41-07-300x269.png 300w, /wp-content/uploads/2015/12/2015-12-02_18-41-07-1024x917.png 1024w, /wp-content/uploads/2015/12/2015-12-02_18-41-07.png 1116w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Wer ein komplexes Demoprogramm zur Konvertierung von (Daten-) Typen sehen möchte, sollte sich das Programm STRANSDEMO_FLIGHTS anschauen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-37-23.png"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-368976" src="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-02_18-37-23-300x237.png" alt="2015-12-02_18-37-23" width="300" height="237" srcset="/wp-content/uploads/2015/12/2015-12-02_18-37-23-300x237.png 300w, /wp-content/uploads/2015/12/2015-12-02_18-37-23-1024x810.png 1024w, /wp-content/uploads/2015/12/2015-12-02_18-37-23.png 1466w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Viel Spaß damit; mir ist es zu kompliziert!</p>
<p>Der Beitrag <a href="/blog/serialize-me/">Serialize me</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Beliebige XML-Datei in interne Tabelle einlesen</title>
		<link>/blog/beliebige-xml-datei-in-interne-tabelle-einlesen/</link>
					<comments>/blog/beliebige-xml-datei-in-interne-tabelle-einlesen/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 24 Sep 2014 17:05:16 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[Debugger]]></category>
		<category><![CDATA[cl_xml_document]]></category>
		<category><![CDATA[GUI]]></category>
		<category><![CDATA[Tricktresor]]></category>
		<category><![CDATA[Upload]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[parser]]></category>
		<category><![CDATA[itab]]></category>
		<category><![CDATA[field-symbols]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=5081</guid>

					<description><![CDATA[<p>Viele Daten werden im XML-Format ausgetauscht. Um die Daten in SAP verarbeiten zu können, muss man parsen oder eine entsprechende Transformation "programmieren". Mit XML tue ich mich manchmal etwas schwer und bin daher froh über jede Vereinfachung.</p>
<p>Mithilfe eines kleinen generischen Programms ist es einfach möglich, die folgende XML-Datei in eine interne Tabelle zu laden.</p>
<p>Der Beitrag <a href="/blog/beliebige-xml-datei-in-interne-tabelle-einlesen/">Beliebige XML-Datei in interne Tabelle einlesen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Viele Daten werden im XML-Format ausgetauscht. Um die Daten in SAP verarbeiten zu können, muss man parsen oder eine entsprechende Transformation &#8220;programmieren&#8221;. Mit XML tue ich mich manchmal etwas schwer und bin daher froh über jede Vereinfachung.</p>
<p>Mithilfe eines kleinen generischen Programms ist es einfach möglich, die folgende XML-Datei in eine interne Tabelle zu laden:</p>
<pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;hierarchie1&gt;
&lt;hierarchie2&gt;Beispiel XML&lt;/hierarchie2&gt;
&lt;hierarchie2&gt;Tricktresor&lt;/hierarchie2&gt;
&lt;hierarchie2&gt;Enno Wulff&lt;/hierarchie2&gt;
&lt;/hierarchie1&gt;
</pre>
<figure id="attachment_5082" aria-describedby="caption-attachment-5082" style="width: 487px" class="wp-caption alignnone"><a href="https://tricktresor.com/wp-content/uploads/2014/09/xml_itab.png"><img loading="lazy" decoding="async" class="wp-image-5082 size-full" src="https://tricktresor.com/wp-content/uploads/2014/09/xml_itab.png" alt="Interne Tabelle mit XML-Daten" width="487" height="110" srcset="/wp-content/uploads/2014/09/xml_itab.png 487w, /wp-content/uploads/2014/09/xml_itab-300x67.png 300w" sizes="(max-width: 487px) 100vw, 487px" /></a><figcaption id="caption-attachment-5082" class="wp-caption-text">Screenshot aus dem Debugger</figcaption></figure>
<p>Man sieht deutlich, dass die einzelnen Tags der XML-Datei sequentiell in die Tabelle übernommen wurden. Für viele Anwendungsfälle dürfte das für die weitere Verarbeitung ausreichen.</p>
<p>[notice type=&#8217;info&#8217;]Dieses Programm erzeugt lediglich die Transformation von der XML-Struktur in eine interne Tabelle. Es erfolgt keine Ausgabe![/notice]</p>
<h2>Coding</h2>
<pre>REPORT.
TYPES tyt_tab_xml TYPE TABLE OF smum_xmltb.

DATA: gv_xml_xstring  TYPE          xstring,
      gt_xml_tab      TYPE TABLE OF smum_xmltb,
      gv_filename     TYPE          localfile,
      go_xml_document TYPE REF TO   cl_xml_document,
      gv_subrc        TYPE          sy-subrc,
      gv_size         TYPE          sy-tabix.


START-OF-SELECTION.

  PERFORM display_popup CHANGING gv_filename.

  PERFORM upload_xml USING gv_filename
                     CHANGING go_xml_document
                              gv_subrc.
  IF gv_subrc = 0.

    PERFORM parse_to_xstring USING go_xml_document
                             CHANGING gv_xml_xstring
                                      gv_size
                                      gv_subrc.
    IF gv_subrc = 0.
      PERFORM parse_xml_to_itab USING gv_xml_xstring
                                CHANGING gt_xml_tab.

    ELSE.
      EXIT.
    ENDIF.
  ELSE.
    EXIT.
  ENDIF.

END-OF-SELECTION.

FORM display_popup CHANGING cv_filename TYPE localfile.

  DATA: lt_filetable TYPE filetable,
        lv_anz_dat   TYPE i.

  cl_gui_frontend_services=&gt;file_open_dialog(
    EXPORTING
      window_title            =     'Wählen Sie eine XML.Datei aus'    " Titel des Datei-Öffnen Dialogs
      default_filename        =     'C:\test.xml'
      initial_directory       =     'C:\' " Ausgangsverzeichnis
  CHANGING
      file_table              = lt_filetable   " Tabelle, die selektierte Dateien enthält
      rc                      = lv_anz_dat     " Rückgabewert: Anzahl Dateien oder -1 falls Fehler auftritt
  EXCEPTIONS
    OTHERS                  = 5
    ).

  READ TABLE lt_filetable INTO cv_filename INDEX 1.

ENDFORM.

FORM upload_xml USING iv_filename        TYPE localfile
                CHANGING co_xml_document TYPE REF TO cl_xml_document
                         cv_subrc        TYPE sy-subrc.
*== create the object
  CREATE OBJECT co_xml_document.

*== Upload xml file
  co_xml_document-&gt;import_from_file(
  EXPORTING
    filename = iv_filename
    RECEIVING
    retcode = cv_subrc  ).

ENDFORM.

FORM parse_to_xstring USING io_xml_document  TYPE REF TO cl_xml_document
                      CHANGING cv_xml_string TYPE xstring
                               cv_size       TYPE sy-tabix
                               cv_subrc      TYPE sy-subrc.
*== Convert to xstring
  CALL METHOD io_xml_document-&gt;render_2_xstring
    IMPORTING
      retcode = cv_subrc      " Returncode
      stream  = cv_xml_string " XString (STREAM)
      size    = cv_size.      " Anzahl Zeichen
ENDFORM.

FORM parse_xml_to_itab USING iv_xml_string TYPE xstring
                       CHANGING ct_xml_tab TYPE tyt_tab_xml.

  DATA: lt_return TYPE TABLE OF bapiret2.

*== Convert XML to itab
  CALL FUNCTION 'SMUM_XML_PARSE'
    EXPORTING
      xml_input = iv_xml_string
    TABLES
      xml_table = ct_xml_tab
      return    = lt_return.
  BREAK-POINT.

ENDFORM.</pre>
<h2>Übertragen der generischen in eine interne Tabelle</h2>
<p>In unserem Beispiel muss die interne Tabelle das Feld &#8220;HIERARCHIE2&#8221; besitzen. Die Zuweisung aller XML-Werte der &#8220;Hierarchiestufe 2&#8221; werden dann dem Feld &#8220;ITAB-HIERARCHIE2&#8221; zugewiesen.</p>
<p>[notice type=&#8217;info&#8217;]Der Aufruf der Routine muss noch hinzugefügt werden. Die zu übergebene interne Tabelle kann jeden beliebigen Typ haben. In diesem Beispiel wird der Typ TYT_ITAB verwendet.[/notice]</p>
<pre>FORM build_itab USING it_xml_tab     TYPE tyt_tab_xml
             CHANGING itab TYPE tyt_itab.

  FIELD-SYMBOLS: &lt;ls_data_tab&gt; LIKE LINE OF itab,
                 &lt;ls_xml_tab&gt;  LIKE LINE OF it_xml_tab,
                 &lt;lv_value&gt;    TYPE         data.

  LOOP AT it_xml_tab ASSIGNING &lt;ls_xml_tab&gt; WHERE hier EQ 2.
    TRANSLATE &lt;ls_xml_tab&gt;-cname TO UPPER CASE.
    IF &lt;ls_xml_tab&gt;-cname = 'HIERARCHIE2'.
      APPEND INITIAL LINE TO itab ASSIGNING &lt;ls_data_tab&gt;.
    ENDIF.
    ASSIGN COMPONENT &lt;ls_xml_tab&gt;-cname OF STRUCTURE &lt;ls_data_tab&gt; TO &lt;lv_value&gt;.
    &lt;lv_value&gt; = &lt;ls_xml_tab&gt;-cvalue.
  ENDLOOP.
ENDFORM..</pre>
<p>Der Beitrag <a href="/blog/beliebige-xml-datei-in-interne-tabelle-einlesen/">Beliebige XML-Datei in interne Tabelle einlesen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/beliebige-xml-datei-in-interne-tabelle-einlesen/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
		<item>
		<title>Anzeige von XML-Strings</title>
		<link>/blog/anzeige-von-xml-strings/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 24 Jun 2014 08:39:16 +0000</pubDate>
				<category><![CDATA[Reports]]></category>
		<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Controls]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[string]]></category>
		<category><![CDATA[xstring]]></category>
		<category><![CDATA[anzeige]]></category>
		<category><![CDATA[display]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=4869</guid>

					<description><![CDATA[<p>Die Anzeige von XML-Daten zur Information oder zu Debug-Zwecken ist sinnvoll und hilfreich. Mit diesen beiden Bausteinen ist das schnell erledigt. Die XML-Daten werden in einem Popup mithilfe des HTML-Controls angezeigt.</p>
<p>Der Beitrag <a href="/blog/anzeige-von-xml-strings/">Anzeige von XML-Strings</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Die Anzeige von XML-Daten zur Information oder zu Debug-Zwecken ist sinnvoll und hilfreich. Mit diesen beiden Bausteinen ist das schnell erledigt. Die XML-Daten werden in einem Popup mithilfe des HTML-Controls angezeigt:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/06/Bild_2014_06_24_100628.jpg"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-4870" src="https://tricktresor.com/wp-content/uploads/2014/06/Bild_2014_06_24_100628-291x300.jpg" alt="Display XML" width="291" height="300" srcset="/wp-content/uploads/2014/06/Bild_2014_06_24_100628-291x300.jpg 291w, /wp-content/uploads/2014/06/Bild_2014_06_24_100628-624x642.jpg 624w, /wp-content/uploads/2014/06/Bild_2014_06_24_100628.jpg 670w" sizes="(max-width: 291px) 100vw, 291px" /></a></p>
<h2>Coding</h2>
<pre>*== data
  DATA lv_xml_data    TYPE string.
  DATA lv_xml_xstring TYPE xstring.

*== Convert string to Xstring
  CALL FUNCTION 'J_3RT_CONV_STRING_TO_XSTRING'
    EXPORTING
      im_string  = lv_xml_data
    IMPORTING
      ex_xstring = lv_xml_xstring.

*== display XML data
  CALL FUNCTION 'DISPLAY_XML_STRING'
    EXPORTING
      xml_string      = lv_xml_xstring
    EXCEPTIONS
      no_xml_document = 1
      OTHERS          = 2.</pre>
<h2>Veraltet&#8230;</h2>
<p>Wie so vieles, was man sich mühsam erarbeitet hat, ist auch dieser Tipp veraltet. Inzwischen gibt es eine kleine Methode im Standard, die auch gerne in den Code-Beispielen verwendet wird:</p>
<pre>cl_abap_browser=&gt;show_xml( 
         EXPORTING xml_string = lv_xmldata
                   size       = CL_ABAP_BROWSER=&gt;xlarge ).</pre>
<p>Der Beitrag <a href="/blog/anzeige-von-xml-strings/">Anzeige von XML-Strings</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Daten dynamisch verwalten</title>
		<link>/blog/daten-dynamisch-verwalten/</link>
					<comments>/blog/daten-dynamisch-verwalten/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 31 May 2012 16:05:40 +0000</pubDate>
				<category><![CDATA[Reports]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[call transformation]]></category>
		<category><![CDATA[ALV-Grid]]></category>
		<category><![CDATA[rtti]]></category>
		<category><![CDATA[Datenbeschaffung]]></category>
		<category><![CDATA[Tricktresor]]></category>
		<category><![CDATA[Customizing]]></category>
		<category><![CDATA[export to database]]></category>
		<category><![CDATA[export]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=647</guid>

					<description><![CDATA[<p>Daten werden in der Regel in Tabellen abgelegt. Bei komplexen Datenstrukturen oder auch bei Daten, die nicht allzulange vorgehalten werden m&#252;ssen, bietet sich ein EXPORT TO DATABASE an. Zusammen mit der Umwandlung von Daten ins XML-Format kann man eine Menge interessanter Dinge machen. In diesem Beispiel Speichern wir eine Tabelle mit einer bestimmten Struktur und lesen die Daten danach wieder in eine Tabelle mit einer anderen Struktur.</p>
<p>Der Beitrag <a href="/blog/daten-dynamisch-verwalten/">Daten dynamisch verwalten</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Daten werden in der Regel in Tabellen abgelegt. Bei komplexen Datenstrukturen oder auch bei Daten, die nicht allzulange vorgehalten werden müssen, bietet sich ein EXPORT TO DATABASE an. Zusammen mit der Umwandlung von Daten ins XML-Format kann man eine Menge interessanter Dinge machen. In diesem Beispiel Speichern wir eine Tabelle mit einer bestimmten Struktur und lesen die Daten danach wieder in eine Tabelle mit einer anderen Struktur.</p>
<h2 class="head1">Um was geht es?</h2>
<p>Wir simulieren in diesem Beispiel eine Strukturänderung, die in Folge einer Programmerweiterung auftreten kann.</p>
<p>Stellen Sie sich vor, Sie haben eine Struktur in der Sie die Materialnummer und eine Serialnummer zu einem &#8220;Vorgang&#8221; speichern.</p>
<p>Die Struktur sähe dann z.B. so aus:</p>
<pre class="lang:abap decode:true ">TYPES: BEGIN OF ty_struc,
         vorgang TYPE c LENGTH 10,
         matnr   TYPE c LENGTH 18,
         sernr   TYPE c LENGTH 18,
       END OF ty_struc.</pre>
<p>Die Speicherung erfolgt durch EXPORT TO DATABASE:</p>
<p class="sap1">EXPORT gt_data TO DATABASE indx(zz) ID &#8216;$mydata$&#8217;.</p>
<p>Das Programm läuft und funktioniert gut. Es werden zu einem Vorgang Materialnummer und Serialnummer gespeichert und gelesen.</p>
<h2 class="head1">Strukturänderung</h2>
<p>Nach einiger Zeit erweist es sich jedoch als hilfreich, die Equipmentnummer zum Vorgang ebenfalls zu speichern. Sie fügen den Feldern VORGANG, MATNR und SERNR also das Feld EQUNR hinzu:</p>
<pre class="lang:abap decode:true ">TYPES: BEGIN OF ty_struc,
         vorgang TYPE c LENGTH 10,
         equnr   TYPE c LENGTH 18,
         matnr   TYPE c LENGTH 18,
         sernr   TYPE c LENGTH 18,
       END OF ty_struc.</pre>
<p>Wenn Sie nun allerdings einen alten Vorgang bearbeiten, werden Sie einen Shortdump bekommen:</p>
<p class="sap1">Laufzeitfehler         CONNE_IMPORT_WRONG_COMP_LENG<br />
Ausnahme               CX_SY_IMPORT_MISMATCH_ERROR</p>
<p class="text1">Die Zusätze IGNORING STRUCTURE BOUNDARIES oder IGNORING CONVERSION CONVERSION ERRORS helfen uns leider nicht weiter.</p>
<h2 class="head1">Die Lösung</h2>
<p class="text1">Man kann einfach Abhilfe schaffen, in dem man von Anfang an die Daten in ein XML-Objekt umwandelt. Das geht mithilfe von CALL TRANSFORMATION extrem schnell, unkompliziert und sicher.</p>
<pre class="lang:abap decode:true ">CALL TRANSFORMATION id 
     SOURCE data = gt_data
     RESULT XML xml_string.</pre>
<p>Der Trick dabei ist, dass im Datencluster nicht vorhandene Felder einfach ignoriert werden. Ebenso werden Felder ignoriert, die zwar im Datencluster, aber nicht in der zu importierenden Struktur/ Tabelle vorhanden sind.</p>
<p class="text1">Die Struktur kann fast beliebig geändert werden, solange die Feldnamen identisch bleiben. Sogar Feldtypen können problemlos geändert werden.</p>
<p class="text1">Wenn natürlich ein CHAR-Feld in ein INT-Feld geändert wird, dann kann ein C-Wert natürlich nicht in ein numerisches Feld gewandelt werden.</p>
<h2 class="head1">Und wozu brauche ich das?</h2>
<p class="text1">Die Anwendung ist sicherlich nicht ganz alltäglich, denn normalerweise wird man wohl eine Datenbank-Tabelle definieren und die Daten dort strukturiert ablegen.</p>
<p class="text1">Interessant wird es, wenn die Daten zu einer Anwendung teilweise dynamisch &#8211; zum Beispiel unterschiedliche Felder je Belegart &#8211; verwaltet werden. Sie könnten dann per Customizing zusätzliche Felder definieren, die in einer Anwendung geändert werden sollen. Mittels RTTI ist es inzwischen einfach, anhand eines Feldkatalogs eine interne Tabelle zu generieren.</p>
<p class="text1">siehe: <a href="/wp-content/index.php?aID=426" target="_self">Interne Tabelle zur Laufzeit generieren</a></p>
<p class="text1">Zur Anzeige oder Änderung kann dann ein ALV-Grid verwendet werden. Wenn Sie diese Art der Datenspeicherung verwenden, dann kann die Tabellenstruktur fast beliebig geändert werden.</p>
<h2 class="head1">Coding</h2>
<p class="text1">Das folgende Programm demonstriert das Vorgehen und simuliert die zeitliche Änderung einer Struktur dadurch, das einfach zwei verschiedene Strukturen verwendet werden.</p>
<pre class="lang:abap decode:true ">*== old structure
TYPES: BEGIN OF ty_test1,
         eins TYPE c LENGTH 2,
         zwei TYPE c LENGTH 2,
         drei TYPE c LENGTH 2,
       END OF ty_test1.

*== new structure
TYPES: BEGIN OF ty_test2,
         neu TYPE c LENGTH 2,
         eins TYPE c LENGTH 5,
         zwei TYPE i,
       END OF ty_test2.

*== data tables
DATA gt_test1 TYPE STANDARD TABLE OF ty_test1.
DATA gt_test2 TYPE STANDARD TABLE OF ty_test2.
*== id for storing data
DATA gc_id TYPE c LENGTH 20 VALUE '$TRICKTRESOR!'.
*== XML-String containing the data in XML-format
DATA gv_xml TYPE string.
*== exception reference CALL TRANSFORMATION
DATA gx_error TYPE REF TO cx_dynamic_check.

START-OF-SELECTION.

*== add test data to "old" table
  APPEND 'AA1111' TO gt_test1.
  APPEND 'BB2222' TO gt_test1.
  APPEND 'CC3333' TO gt_test1.</pre>
<p><img decoding="async" src="/wp-content/uploads/tt_images/screenshots/gt_test1.jpg" alt="" /></p>
<p class="sap1">
<pre class="lang:abap decode:true">*== save xml string into&amp;nbsp;data cluster*== Transform data table into xml string
CALL TRANSFORMATION id
     SOURCE test = gt_test1
     RESULT XML gv_xml.

EXPORT test = gv_xml TO DATABASE indx(zv) ID gc_id.

*== clearance
CLEAR gt_test1.
CLEAR gt_test2.
CLEAR gv_xml.

*== import data into xml string
IMPORT test TO gv_xml FROM DATABASE indx(zv) ID gc_id.

TRY .
*== transform xml data into table with NEW structure
  CALL TRANSFORMATION id
       SOURCE XML gv_xml
       RESULT test = gt_test2.
    CATCH cx_transformation_error INTO gx_error.
  BREAK-POINT.
ENDTRY.</pre>
<p><img decoding="async" src="/wp-content/uploads/tt_images/screenshots/gt_test2.jpg" alt="" /></p>
<p>Der Beitrag <a href="/blog/daten-dynamisch-verwalten/">Daten dynamisch verwalten</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/daten-dynamisch-verwalten/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Exporting ALV to Memory2</title>
		<link>/blog/exporting-alv-to-memory2/</link>
					<comments>/blog/exporting-alv-to-memory2/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Mon, 12 Sep 2011 14:54:53 +0000</pubDate>
				<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[cl_alv_table_create=>create_dynamic_table]]></category>
		<category><![CDATA[color]]></category>
		<category><![CDATA[assign]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[demoprogramme]]></category>
		<category><![CDATA[if_ixml]]></category>
		<category><![CDATA[if_ixml_stream_factory]]></category>
		<category><![CDATA[Office]]></category>
		<category><![CDATA[if_ixml_document]]></category>
		<category><![CDATA[ALV-Grid]]></category>
		<category><![CDATA[if_ixml_parser]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=625</guid>

					<description><![CDATA[<p>Wir greifen den Trick - nach SUBMIT an die ALV-Daten im Office-Format zu gelangen - noch einmal auf und zeigen, wie man aus dem XML-String eine Tabelle erh&#228;lt.</p>
<p>Der Beitrag <a href="/blog/exporting-alv-to-memory2/">Exporting ALV to Memory2</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Wir greifen den Trick &#8211; nach SUBMIT an die ALV-Daten im Office-Format zu gelangen &#8211; noch einmal auf und zeigen, wie man aus dem XML-String eine Tabelle erhält.</p>
<p>In diesem Beispiel rufen wir das Beispielprogramm BCALV_FULLSCREEN_DEMO auf, um mittels ALV-Grid Daten zu erzeugen.</p>
<p>Die Flugdatenbank muss natürlich gefüllt sein!!</p>
<p><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-4193" src="https://tricktresor.com/wp-content/uploads/2011/09/01_13_11_46_26-300x140.jpg" alt="BCALV_FULLSCREEN_DEMO" width="300" height="140" srcset="/wp-content/uploads/2011/09/01_13_11_46_26-300x140.jpg 300w, /wp-content/uploads/2011/09/01_13_11_46_26-624x292.jpg 624w, /wp-content/uploads/2011/09/01_13_11_46_26.jpg 727w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>Die grundlegenden Bestandteile sind bereits im vorherigen Artikel erläutert worden. In diesem Programm zeigen wir, wie man die im XML-Format vorliegenden Daten in eine interne Tabelle umwandelt.</p>
<p>Das XML-Ergebnis wird dabei Ereignisgesteuert bearbeitet. Das bedeutet: Die XML-Tags werden Stück für Stück durchlaufen und im Programm wird entsprechend darauf reagiert.</p>
<p class="head1">XML</p>
<p>Die zurückgelieferte XML-Struktur, die die Tabelle beschreibt ist recht komplex. Hier ist die Beispiel-XML-Datei zu sehen: <a href="http://pastebin.com/XkgctkJA" target="_blank" rel="noopener">http://pastebin.com/XkgctkJA</a></p>
<p>Uns interessieren jedoch nur die folgenden Tags:</p>
<p class="head2">Anzahl der Spalten</p>
<p class="sap1">&lt;Table&gt;&lt;Column/&gt;&lt;Column/&gt;&lt;/Table&gt;</p>
<p class="head2">Zellen und Zelleninhalte</p>
<p class="sap1">&lt;Cell&gt;&lt;Data&gt;Inhalt&lt;/data&gt;&lt;/cell&gt;</p>
<h2 class="head1">Coding</h2>
<pre class="lang:abap decode:true ">REPORT  zz_export_alv_to_memory_demo01.

*----------------------------------------------------------------------*
*       CLASS lcl_xml DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_xml DEFINITION.

  PUBLIC SECTION.
CLASS-METHODS call_report  IMPORTING iv_repid TYPE syrepid
iv_list  TYPE char1.

    CLASS-METHODS create_table IMPORTING iv_fields TYPE i
EXPORTING ed_table TYPE REF TO data.

    CLASS-METHODS display_data IMPORTING it_table TYPE STANDARD TABLE PREFERRED PARAMETER it_table.

ENDCLASS.                    "lcl_xml DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_xml IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_xml IMPLEMENTATION.

  METHOD call_report.

*== Data
DATA lv_guid   TYPE guid_32.
DATA ls_params TYPE rsparams.
DATA lt_params TYPE TABLE OF rsparams.

*== Create and export GUIID for ALV
lv_guid = cl_salv_export_db_storage=&gt;create_guid( ).
EXPORT l_mode = 'M' TO MEMORY ID 'ALV_EXTRACT_MODE'.
EXPORT l_guid = lv_guid TO MEMORY ID 'ALV_EXTRACT_GUID'.

*== Call Report
    SUBMIT (iv_repid)
WITH SELECTION-TABLE lt_params
AND RETURN.                                       "#EC CI_SUBMIT

    DATA lv_xstring           TYPE xstring.
DATA lr_stream_factory    TYPE REF TO if_ixml_stream_factory.
DATA lr_ixml              TYPE REF TO if_ixml.
DATA lr_istream           TYPE REF TO if_ixml_istream.
DATA lr_doc               TYPE REF TO if_ixml_document.
DATA lr_parser            TYPE REF TO if_ixml_parser.
DATA lv_events            TYPE i.
DATA lv_number_of_fields  TYPE i.

    DATA lr_event             TYPE REF TO if_ixml_event.
DATA lv_type              TYPE i.
DATA lv_current_node      TYPE string.
DATA lv_current_value     TYPE string.
DATA lv_cell_index        TYPE i.

*== Import XML-data from AVL and convert to stream
lv_xstring        = cl_salv_export_db_storage=&gt;import_xmlstring
( guid  = lv_guid ).
lr_ixml           = cl_ixml=&gt;create( ).
lr_stream_factory = lr_ixml-&gt;create_stream_factory( ).
lr_istream        = lr_stream_factory-&gt;create_istream_xstring
( string = lv_xstring ).

    lr_doc            = lr_ixml-&gt;create_document( ).

*== Create parser for document
    lr_parser   = lr_ixml-&gt;create_parser(
document       = lr_doc
istream        = lr_istream
stream_factory = lr_stream_factory ).

*== deactivate DOM generation
lr_parser-&gt;set_dom_generating( space ).

*== data for dynamically generated internal table
DATA ld_table            TYPE REF TO data.
FIELD-SYMBOLS &lt;table&gt;    TYPE STANDARD TABLE.
FIELD-SYMBOLS &lt;row&gt;      TYPE ANY. "line of &lt;table&gt;.
FIELD-SYMBOLS &lt;cell&gt;     TYPE string.

*== define Parser events
lv_events = if_ixml_event=&gt;co_event_element_pre2
+ if_ixml_event=&gt;co_event_element_post
+ if_ixml_event=&gt;co_event_text_post.

*== Register XML-Events
lr_parser-&gt;set_event_subscription( lv_events ).

    DO.

*== get next event (XML-tag)
lr_event = lr_parser-&gt;parse_event( ).
IF lr_event IS INITIAL.
EXIT.
ENDIF.

*== get type of event
lv_type = lr_event-&gt;get_type( ).
*== New element
CASE lv_type.
WHEN if_ixml_event=&gt;co_event_element_pre2.
*===&gt; Event "PRE2"
lv_current_node = lr_event-&gt;get_name( ).
IF iv_list &lt;&gt; space.
WRITE: / lv_current_node.
ENDIF.

          CASE lv_current_node.
WHEN 'Column'.
*=====&gt; New Column: Add column counter
ADD 1 TO lv_number_of_fields.

            WHEN 'Row'.
*=====&gt; New Row
IF &lt;table&gt; IS NOT ASSIGNED.
*=====&gt; Create table if not done yet
create_table( EXPORTING iv_fields = lv_number_of_fields
IMPORTING ed_table  = ld_table ).

                ASSIGN ld_table-&gt;* TO &lt;table&gt;.
ENDIF.

*=====&gt; Insert new table line
APPEND INITIAL LINE TO &lt;table&gt; ASSIGNING &lt;row&gt;.
CLEAR lv_cell_index.

            WHEN 'Cell'.
*======&gt; new cell data:
ADD 1 TO lv_cell_index.
ASSIGN COMPONENT lv_cell_index
OF STRUCTURE &lt;row&gt; TO &lt;cell&gt;.
ENDCASE.

        WHEN if_ixml_event=&gt;co_event_text_post.
*===&gt; Event "TEXT"
CASE lv_current_node.
WHEN 'Data'.
*=====&gt; get cell value and assign to table cell
&lt;cell&gt; = lr_event-&gt;get_value( ).
ENDCASE.

          IF iv_list &lt;&gt; space.
lv_current_value = lr_event-&gt;get_value( )..
WRITE lv_current_value COLOR COL_TOTAL.
ENDIF.

        WHEN if_ixml_event=&gt;co_event_element_post.
*===&gt; Event "POST"
IF iv_list &lt;&gt; space.
lv_current_node = lr_event-&gt;get_name( ).
WRITE: lv_current_node COLOR COL_GROUP.
ENDIF.

      ENDCASE.
ENDDO.

*== Display table
    IF &lt;table&gt; IS ASSIGNED.
display_data( &lt;table&gt; ).
ENDIF.

  ENDMETHOD.                    "call_report

METHOD create_table.

*== field catalog
    DATA lt_fcat             TYPE lvc_t_fcat.
FIELD-SYMBOLS &lt;fcat&gt;     TYPE lvc_s_fcat.

*== create field catalog for internal table
    DO iv_fields TIMES.
*== cell
APPEND INITIAL LINE TO lt_fcat ASSIGNING &lt;fcat&gt;.
&lt;fcat&gt;-fieldname = sy-index.
CONDENSE &lt;fcat&gt;-fieldname.
&lt;fcat&gt;-tabname   = 'GT_TABLE'.
&lt;fcat&gt;-inttype   = 'g'. "String
ENDDO.

*== generate internal table from given field catalog
CALL METHOD cl_alv_table_create=&gt;create_dynamic_table
EXPORTING
it_fieldcatalog           = lt_fcat
IMPORTING
ep_table                  = ed_table
EXCEPTIONS
generate_subpool_dir_full = 1
OTHERS                    = 2.

  ENDMETHOD.                    "create_table

  METHOD display_data.

*== Data
DATA lv_col          TYPE i.
FIELD-SYMBOLS &lt;row&gt;  TYPE ANY.
FIELD-SYMBOLS &lt;cell&gt; TYPE string.

*== Display all table lines
LOOP AT it_table ASSIGNING &lt;row&gt;.
NEW-LINE.
DO.
*== Display each table cell
ASSIGN COMPONENT sy-index OF STRUCTURE &lt;row&gt; TO &lt;cell&gt;.
IF sy-subrc = 0.
lv_col = ( sy-index - 1 ) * 21.
WRITE AT lv_col(19)  &lt;cell&gt; COLOR COL_POSITIVE.
ELSE.
EXIT. "from do
ENDIF.
ENDDO.
ENDLOOP.
ENDMETHOD.                    "display_data

ENDCLASS.                    "lcl_xml IMPLEMENTATION

***___________________________________________________________________
***
*** SELECTION SCREEN
***___________________________________________________________________
***

SELECTION-SCREEN BEGIN OF BLOCK reps   WITH FRAME TITLE text-var.
PARAMETERS p_repid TYPE syrepid        DEFAULT 'BCALV_FULLSCREEN_DEMO'.
PARAMETERS p_data  RADIOBUTTON GROUP x DEFAULT 'X'.
PARAMETERS p_list  RADIOBUTTON GROUP x.
SELECTION-SCREEN END OF BLOCK reps.

START-OF-SELECTION.

*== Start report
lcl_xml=&gt;call_report( EXPORTING iv_repid = p_repid
iv_list  = p_list ).

</pre>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/exporting-alv-to-memory2/">Exporting ALV to Memory2</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/exporting-alv-to-memory2/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
	</channel>
</rss>
