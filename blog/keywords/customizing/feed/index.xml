<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>Customizing Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/customizing/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 14 Apr 2020 13:02:59 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>Customizing Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Logik vs. Daten // SAP vs. SimDia¬≤ // Programmierer vs. Anwender</title>
		<link>/blog/logik-vs-daten-sap-vs-simdia%c2%b2-programmierer-vs-anwender/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 08 Nov 2017 22:20:13 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Partner]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Customizing]]></category>
		<category><![CDATA[Anwender]]></category>
		<category><![CDATA[Entwicklung]]></category>
		<category><![CDATA[Logik]]></category>
		<category><![CDATA[Kunde]]></category>
		<category><![CDATA[simdia]]></category>
		<category><![CDATA[Datenstruktur]]></category>
		<category><![CDATA[Entwickler]]></category>
		<category><![CDATA[Daten√ºbernahme]]></category>
		<category><![CDATA[Programmierer]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1018010</guid>

					<description><![CDATA[<p>Ein paar mehr oder weniger philosophische Gedanken, die ich mir gemacht habe. Manches flie√üt einfach und will heraus. Ansonsten kann ich nicht schlafen, weil mir diese Gedanken immer und immer wieder im Kopf herum spuken. Um so sch√∂ner, wenn dabei der Bogen zu meinem Lieblings-AddOn "SimDia¬≤" geschlagen werden kann. Den Kampf zwischen Anwender und Entwickler, Logik und Daten werden hoffentlich viele kennen. </p>
<p>Der Beitrag <a href="/blog/logik-vs-daten-sap-vs-simdia%c2%b2-programmierer-vs-anwender/">Logik vs. Daten // SAP vs. SimDia¬≤ // Programmierer vs. Anwender</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Ich bin Programmierer aus Leidenschaft. Ich liebe es, Daten so zu maltr√§tieren, umzuformen und anzureichern, dass eine f√ºr den Menschen sinnvolle Darstellung dabei herauskommt. Ebenso liebe ich es, Anforderungen so umzusetzen, dass am Ende ein paar zufriedene Anwender vor dem PC und wohlgeformte Daten auf der Datenbank sind. Zudem bin ich bestrebt, die Programmierungen so universell und wiederverwendbar wie m√∂glich zu gestalten.</p>
<p>Voraussetzung daf√ºr ist, dass der Anwender oder Kunde sich exzellent ausdr√ºcken kann und sehr genau wei√ü, was er m√∂chte und seine Prozesse und Daten selbst gut kennt. Dabei ist nicht nur der aktuelle Zustand wichtig, sondern auch, wie es mit den Daten weiter gehen soll. Wie m√ºssen sie weiter verarbeitet werden? Inwieweit m√ºssen sie wie lange √§nderbar sein? H√§ufig m√ºssen im Nachhinein wilde Verrenkungen gemacht werden, um Dinge zu pr√ºfen oder sicherzustellen, die bei sorgf√§ltiger Planung &#8211; ich glaube so etwas nennt man 360¬∞-Sicht &#8211; nicht n√∂tig gewesen w√§re.</p>
<p>Zugegebener Ma√üen ist das nicht immer m√∂glich, denn sehr oft entwickeln sich Dinge einfach. Aus einem ehemals kleinen Auswertungsreport entsteht nach und nach die Schaltzentrale f√ºr eine ganze Abteilung.</p>
<h2>Daten</h2>
<p>Die Daten sind tats√§chlich der wichtigste Bestandteil bei der Programmierung in einem ERP-System. Dadurch, dass die Daten in Strukturen abgelegt und organisiert werden, ist es recht einfach, zusammengeh√∂rende Daten zu ermitteln. Es ist allerdings sehr schwer, diese Strukturen erst einmal zu erkennen und dann zu erzeugen. Zudem ist es schwer, wenn nicht gar unm√∂glich, anhand der Daten die Zugeh√∂rigkeit zu Prozessen zu ermitteln. Um die zu einem Prozess notwendigen Daten zu wissen, m√ºsste ein detailliertes Datenflussdiagramm erstellt werden. Das wird jedoch kaum gemacht, denn es ist unendlich viel Arbeit und starken √Ñnderungen unterworfen.</p>
<h2>Logik</h2>
<p>F√ºr einen Programmierer ist es sehr wichtig zu wissen, wo welche Daten stehen und wie sie verarbeitet werden m√ºssen. Der Programmierer muss die Daten so verarbeiten, dass am Ende das gew√ºnschte Ergebnis heraus kommt. Daf√ºr ist es notwendig, dass er bestimmte Logiken anwendet. Einige Logiken ergeben sich aus den Einstellungen im Customizing, andere Logiken m√ºssen vom Fachbereich bzw. dem Kunden vorgegeben werden. Sofern es genug &#8220;Beweismaterial&#8221; gibt, k√∂nnen aus speziellen Anforderungen allgemein g√ºltige Logiken abgeleitet werden. Diese wiederum k√∂nnen im Kundeneigenen Customizing abgebildet werden. Dies hat den Vorteil, dass die L√∂sung flexibel und vom Kunden steuerbar ist.</p>
<h2>Programmierer</h2>
<p>Ja, es mag ein Klischee sein, aber Programmierer sind ein wundersames V√∂lkchen. Ich spreche aus eigener Erfahrung&#8230; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="üòâ" class="wp-smiley" style="height: 1em; max-height: 1em;" />¬† Programmierer sind in der Regel sehr Technik-affin und sind mehr daran interessiert, eine m√∂glichst <em>figgelinsche</em>¬†L√∂sung zu pr√§sentieren oder eine besonders komplexe Aufgabenstellung zu meistern. In der Regel haben Programmierer wenig Sinn f√ºr Design und Layout. Ja, es gibt Ausnahmen&#8230;! Aber meistens bilden Programmierer genau das ab, was in der Vorgabe steht &#8211; egal wie es aussieht und ob es den SAP-Design-Vorgaben gleich in mehreren Ebenen widerspricht. Der einfachste Weg, einen Programmierer zur Arbeit zu bewegen ist, ihm zu sagen: &#8220;Das geht nicht. Haben schon andere versucht&#8221;.</p>
<h2>Anwender</h2>
<p>Auch Anwender sind h√§ufig <em>speziell</em>. Sie m√ºssen mit ihrer Arbeit fertig werden und sie wollen ihre Arbeit in der Regel gut machen. Anwender verstehen ihre Daten und ihre Prozesse. Aber sie k√∂nnen h√§ufig nicht einsch√§tzen welche Auswirkungen √Ñnderungen in ihrem Bereich auf andere Teile der Firma haben. Zudem sch√§tzen sie h√§ufig die Komplexit√§t von Programmieraufgaben falsch ein. Dinge, die einfach zu programmieren sind, weil bereits √§hnliche Programmierungen vorhanden sind oder es eine SAP-Funktion daf√ºr gibt, werden eventuell als zu komplex abgetan. Andererseits werden Dinge, die sich verbal einfach ausdr√ºcken lassen und <em>offensichtlich</em> sind, als einfach eingesch√§tzt. Dabei sind gerade diese Dinge schwer und aufw√§ndig zu programmieren.</p>
<h2>Programmierer vs. Anwender</h2>
<p>Im allgemeinen mehr oder weniger chaotischen Durcheinander, was in einigen Firmen <em>Alltag</em> genannt wird, m√ºssen Programmierer und Anwender (Fachbereiche) miteinander auskommen und sich gegenseitig soweit verstehen, dass eindeutige Ergebnisse erzielt werden. Ein guter Programmierer wird versuchen, ein Schema, eine Logik, eine allgemein g√ºltige Regel zu finden oder scheinbar allgemein g√ºltige Regeln zu hinterfragen. Ein guter Anwender kennt seine Daten und Prozesse und¬†erkennt Daten, die &#8220;nicht passen&#8221; oder &#8220;unsinnig&#8221; sind. Dahingehend unterscheiden sich in der Regel Programmierer und Anwender. Denn genau das, was der eine kann, kann der andere mit ziemlicher Sicherheit nicht. Ein Programmierer kann nicht erkennen, ob Daten unsinnig sind und ein Anwender erkennt selten die technische Logik hinter bestimmten Prozessen oder Funktionen.</p>
<h2>Logik vs. Daten</h2>
<p>F√ºr einen Anwender ist es eventuell einfacher &#8220;seine&#8221; Daten so zu ordnen, wie sie f√ºr ihn aktuell sinnvoll und wichtig sind. Um Daten aus einem Fremdsystem oder manuell erarbeiteten Prozessen in ein SAP-System zu √ºbernehmen gibt es im Grunde zwei maschinelle M√∂glichkeiten</p>
<ol>
<li>Anwender und Programmierer setzen sich zusammen und definieren eine Datenstruktur. Sie besprechen, welche Daten wann unter welchen Bedingungen wo hin m√ºssen. Der Programmierer arbeitet in der Regel mit <strong>einer</strong>¬†(je nach Anforderung nat√ºrlich auch mit mehreren) allgemeinen Datenstruktur. Felder, die f√ºr einen Datensatz nicht relevant sind, bleiben leer. Der Programmierer erstellt dann ein Programm mit den entsprechenden Regeln, um die Daten ins SAP-System zu schreiben.</li>
<li>Der Anwender baut sich seine Daten in Gruppen so zusammen, wie sie f√ºr ihn logisch sind. Dabei ist es egal, dass er 12 Excel-Bl√§tter hat, die alle zu 90% die gleiche Struktur haben. F√ºr ihn ist wichtig, dass er die komplexen Daten m√∂glichst einfach gruppieren und verwalten kann. Der Anwender kann dann einen einfachen Prozess starten, um die Daten zu √ºbernehmen (zum Beispiel mit SimDia¬≤).</li>
</ol>
<p>Die erste L√∂sung w√ºrde ich als Programmierer nat√ºrlich immer bevorzugen. Immerhin verdiene ich damit mein Geld. Es ist jedoch nicht von der Hand zu weisen, dass eine Programmierung fast immer recht kompliziert ist. Es sind Absprachen mit dem Auftraggeber notwendig, es muss getestet werden, es m√ºssen Programme transportiert werden usw. Zudem erfordert die Arbeit in der Ausf√ºhrung h√§ufig zwei Leute: Einen aus der IT (Programmierer), der Daten in ein Verzeichnis schiebt, Daten hochl√§dt, Daten konvertiert und so weiter. Der Anwender ist hilflos, wenn etwas nicht so funktioniert, wie er es erwartet.</p>
<p>Die zweite L√∂sung mag auf den ersten Blick nicht professionell erscheinen. Im Hinblick darauf, dass Daten meistens regelm√§√üig und von beliebigen Personen √ºbernommen werden sollen, wird eine &#8220;Frickell√∂sung&#8221; h√§ufig nicht in Betracht gezogen.</p>
<p>Dass der Anwender meistens gar nichts machen kann, liegt h√§ufig an diesen zwei Umst√§nden:</p>
<ol>
<li>Es gibt h√§ufig keine guten M√∂glichkeiten f√ºr einen Anwender, Daten massenhaft in ein SAP-System zu importieren.</li>
<li>Die IT-Abteilung hat f√ºr kleinere Aufgaben h√§ufig keine Zeit und keine Kapazit√§ten.</li>
</ol>
<p>Die cleverste M√∂glichkeit, von der ich geh√∂rt habe ist die folgende: Ein Poweruser (also ein Benutzer mit hinreichend guten Berechtigungen zum Ausf√ºhren von Programmen) hat sich die Batchinputstruktur zu einem SAP-Standard-√úbernahmeprogramm genommen, diese in Word bearbeitet und mit Hilfe der Serienbrieffunktion eine Batchinputdatei f√ºr seine Daten generiert. Die so erzeugten Batchinputmappen hat der Anwender dann eingespielt. Ich wei√ü leider nicht mehr genau, um welche Daten es sich handelte.</p>
<p>Diese L√∂sung erfordert jedoch umfangreiche Berechtigungen, sehr gutes Word- und Excelwissen sowie nat√ºrlich ein vorhandenes SAP-√úbernahmeprogramm.</p>
<h2>Alternative SimDia¬≤</h2>
<p>Das Addon <a href="https://ersasoft.de/de/simdia/?s=tt">SimDia¬≤</a> von <a href="https://ersasoft.de/de/?s=tt">Ersasoft</a> ist eine &#8211; gemessen am Nutzen &#8211; kosteng√ºnstige Alternative f√ºr den Fachbereich um allt√§glich wiederkehrende Daten√ºbernahmen einfach und effizient zu erledigen. Der Anwender hat zumeist hinreichende Excel-Kenntnisse und er kennt seine SAP-Anwendungen. Die Bedienung von SimDia¬≤ ist sehr leicht und darauf ausgelegt, wiederkehrende Datenimporte von Excel nach SAP auszuf√ºhren.</p>
<p><a href="https://ersasoft.de/de/simdia/?s=tt"><img fetchpriority="high" decoding="async" class="alignnone size-full wp-image-1018210" src="https://tricktresor.com/wp-content/uploads/2017/11/starten-sie-mit-ihren-daten-durch2.png" alt="" width="760" height="323" srcset="/wp-content/uploads/2017/11/starten-sie-mit-ihren-daten-durch2.png 760w, /wp-content/uploads/2017/11/starten-sie-mit-ihren-daten-durch2-300x128.png 300w" sizes="(max-width: 760px) 100vw, 760px" /></a></p>
<p>Beispiele f√ºr die Anwendung sind:</p>
<ol>
<li>√úbernahme von Vertriebsst√ºcklisten</li>
<li>Ausf√ºhrung von Buchungen</li>
<li>Anlage von Fertigungsauftr√§gen</li>
<li>Gezieltes √Ñndern von Materialst√§mmen</li>
</ol>
<p>SimDia¬≤ kann sogar dazu genutzt werden, um Daten aus einem SAP-System f√ºr Auswertungszwecke zu sammeln, da SimDia¬≤ Felder einer SAP-Transaktion auslesen kann. Ein Anwender kann sich so also gezielt selber Listen erstellen, ohne dass er die entsprechenden SAP-Tabellen kennen muss. Besonders gut funktioniert das bei Daten, die f√ºr einen Programmierer nur sehr umst√§ndlich zu ermitteln sind, da die Daten auf viele untereinander verkn√ºpfte Tabellen verteilt sind.</p>
<p>Der Beitrag <a href="/blog/logik-vs-daten-sap-vs-simdia%c2%b2-programmierer-vs-anwender/">Logik vs. Daten // SAP vs. SimDia¬≤ // Programmierer vs. Anwender</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Customizing √ºbersetzen</title>
		<link>/blog/customizing-uebersetzen/</link>
					<comments>/blog/customizing-uebersetzen/#comments</comments>
		
		<dc:creator><![CDATA[M&#38;Mler]]></dc:creator>
		<pubDate>Sat, 29 Nov 2014 00:00:00 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Materialwirtschaft]]></category>
		<category><![CDATA[Customizing]]></category>
		<category><![CDATA[√úbersetzung]]></category>
		<category><![CDATA[Rollout]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=5154</guid>

					<description><![CDATA[<p>Neuer Rollout &#8211; Neues Gl√ºck. Sp√§testens beim ersten internationalen Rollout kommt die Frage auf welche Customizing Objekte zu √ºbersetzen sind. In der SPRO ist &#8211; etwas versteckt &#8211; eine sehr n√ºtzliche Standard-Funktion. &#160; &#160;</p>
<p>Der Beitrag <a href="/blog/customizing-uebersetzen/">Customizing √ºbersetzen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Neuer Rollout &#8211; Neues Gl√ºck.<br />
Sp√§testens beim ersten internationalen Rollout kommt die Frage auf welche Customizing Objekte zu √ºbersetzen sind.<br />
In der SPRO ist &#8211; etwas versteckt &#8211; eine sehr n√ºtzliche Standard-Funktion.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/11/Spro-√ºbersetzung.png"><img decoding="async" class="alignnone size-medium wp-image-5155" src="https://tricktresor.com/wp-content/uploads/2014/11/Spro-√ºbersetzung-259x300.png" alt="Spro √ºbersetzung" width="259" height="300" srcset="/wp-content/uploads/2014/11/Spro-√ºbersetzung-259x300.png 259w, /wp-content/uploads/2014/11/Spro-√ºbersetzung-624x720.png 624w, /wp-content/uploads/2014/11/Spro-√ºbersetzung.png 846w" sizes="(max-width: 259px) 100vw, 259px" /></a></p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/11/uebersetzung2.png"><img decoding="async" class="alignnone size-medium wp-image-5156" src="https://tricktresor.com/wp-content/uploads/2014/11/uebersetzung2-300x234.png" alt="uebersetzung2" width="300" height="234" srcset="/wp-content/uploads/2014/11/uebersetzung2-300x234.png 300w, /wp-content/uploads/2014/11/uebersetzung2-624x487.png 624w, /wp-content/uploads/2014/11/uebersetzung2.png 907w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/customizing-uebersetzen/">Customizing √ºbersetzen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/customizing-uebersetzen/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Daten dynamisch verwalten</title>
		<link>/blog/daten-dynamisch-verwalten/</link>
					<comments>/blog/daten-dynamisch-verwalten/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 31 May 2012 16:05:40 +0000</pubDate>
				<category><![CDATA[Reports]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[export to database]]></category>
		<category><![CDATA[export]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[call transformation]]></category>
		<category><![CDATA[ALV-Grid]]></category>
		<category><![CDATA[rtti]]></category>
		<category><![CDATA[Datenbeschaffung]]></category>
		<category><![CDATA[Tricktresor]]></category>
		<category><![CDATA[Customizing]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=647</guid>

					<description><![CDATA[<p>Daten werden in der Regel in Tabellen abgelegt. Bei komplexen Datenstrukturen oder auch bei Daten, die nicht allzulange vorgehalten werden m&#252;ssen, bietet sich ein EXPORT TO DATABASE an. Zusammen mit der Umwandlung von Daten ins XML-Format kann man eine Menge interessanter Dinge machen. In diesem Beispiel Speichern wir eine Tabelle mit einer bestimmten Struktur und lesen die Daten danach wieder in eine Tabelle mit einer anderen Struktur.</p>
<p>Der Beitrag <a href="/blog/daten-dynamisch-verwalten/">Daten dynamisch verwalten</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Daten werden in der Regel in Tabellen abgelegt. Bei komplexen Datenstrukturen oder auch bei Daten, die nicht allzulange vorgehalten werden m√ºssen, bietet sich ein EXPORT TO DATABASE an. Zusammen mit der Umwandlung von Daten ins XML-Format kann man eine Menge interessanter Dinge machen. In diesem Beispiel Speichern wir eine Tabelle mit einer bestimmten Struktur und lesen die Daten danach wieder in eine Tabelle mit einer anderen Struktur.</p>
<h2 class="head1">Um was geht es?</h2>
<p>Wir simulieren in diesem Beispiel eine Struktur√§nderung, die in Folge einer Programmerweiterung auftreten kann.</p>
<p>Stellen Sie sich vor, Sie haben eine Struktur in der Sie die Materialnummer und eine Serialnummer zu einem &#8220;Vorgang&#8221; speichern.</p>
<p>Die Struktur s√§he dann z.B. so aus:</p>
<pre class="lang:abap decode:true ">TYPES: BEGIN OF ty_struc,
         vorgang TYPE c LENGTH¬†10,
         matnr¬†¬† TYPE c LENGTH 18,
         sernr¬†¬† TYPE c LENGTH 18,
       END OF ty_struc.</pre>
<p>Die Speicherung erfolgt durch EXPORT TO DATABASE:</p>
<p class="sap1">EXPORT gt_data TO DATABASE indx(zz) ID &#8216;$mydata$&#8217;.</p>
<p>Das Programm l√§uft und funktioniert gut. Es werden zu einem Vorgang Materialnummer und Serialnummer gespeichert und gelesen.</p>
<h2 class="head1">Struktur√§nderung</h2>
<p>Nach einiger Zeit erweist es sich jedoch als hilfreich, die Equipmentnummer zum Vorgang ebenfalls zu¬†speichern. Sie f√ºgen den Feldern VORGANG, MATNR und SERNR also das Feld EQUNR¬†hinzu:</p>
<pre class="lang:abap decode:true ">TYPES: BEGIN OF ty_struc,
         vorgang TYPE c LENGTH 10,
         equnr¬†¬† TYPE c LENGTH 18,
         matnr¬†¬† TYPE c LENGTH 18,
         sernr¬†¬† TYPE c LENGTH 18,
       END OF ty_struc.</pre>
<p>Wenn Sie nun allerdings einen alten Vorgang bearbeiten, werden Sie einen¬†Shortdump bekommen:</p>
<p class="sap1">Laufzeitfehler¬†¬†¬†¬†¬†¬†¬†¬† CONNE_IMPORT_WRONG_COMP_LENG<br />
Ausnahme¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† CX_SY_IMPORT_MISMATCH_ERROR</p>
<p class="text1">Die Zus√§tze IGNORING STRUCTURE BOUNDARIES oder IGNORING CONVERSION CONVERSION ERRORS helfen uns leider nicht weiter.</p>
<h2 class="head1">Die L√∂sung</h2>
<p class="text1">Man kann einfach Abhilfe schaffen, in dem man von Anfang an die Daten in ein XML-Objekt umwandelt. Das geht mithilfe von CALL TRANSFORMATION extrem schnell, unkompliziert und sicher.</p>
<pre class="lang:abap decode:true ">CALL TRANSFORMATION id 
     SOURCE data = gt_data
     RESULT XML xml_string.</pre>
<p>Der Trick dabei ist, dass im Datencluster nicht vorhandene Felder einfach ignoriert werden. Ebenso werden Felder ignoriert, die zwar im Datencluster, aber nicht in der zu importierenden Struktur/ Tabelle¬†vorhanden sind.</p>
<p class="text1">Die Struktur kann fast beliebig ge√§ndert werden, solange die Feldnamen identisch bleiben. Sogar Feldtypen k√∂nnen problemlos ge√§ndert werden.</p>
<p class="text1">Wenn nat√ºrlich ein CHAR-Feld in ein INT-Feld ge√§ndert wird, dann kann ein C-Wert nat√ºrlich nicht in ein numerisches Feld gewandelt werden.</p>
<h2 class="head1">Und wozu brauche ich das?</h2>
<p class="text1">Die Anwendung ist sicherlich nicht ganz allt√§glich, denn normalerweise wird man wohl eine Datenbank-Tabelle definieren und die Daten dort strukturiert ablegen.</p>
<p class="text1">Interessant wird es, wenn die Daten zu einer Anwendung teilweise dynamisch &#8211; zum Beispiel unterschiedliche Felder je Belegart &#8211; verwaltet werden. Sie k√∂nnten dann per Customizing zus√§tzliche Felder definieren, die in einer Anwendung ge√§ndert werden sollen. Mittels RTTI ist es inzwischen einfach, anhand eines Feldkatalogs eine interne Tabelle zu generieren.</p>
<p class="text1">siehe: <a href="/wp-content/index.php?aID=426" target="_self">Interne Tabelle zur Laufzeit generieren</a></p>
<p class="text1">Zur Anzeige oder √Ñnderung¬†kann dann ein ALV-Grid verwendet werden. Wenn Sie diese Art der Datenspeicherung verwenden, dann kann die Tabellenstruktur fast beliebig ge√§ndert werden.</p>
<h2 class="head1">Coding</h2>
<p class="text1">Das folgende Programm demonstriert das Vorgehen und simuliert die zeitliche √Ñnderung einer Struktur dadurch, das einfach zwei verschiedene Strukturen verwendet werden.</p>
<pre class="lang:abap decode:true ">*== old structure
TYPES: BEGIN OF ty_test1,
         eins TYPE c LENGTH 2,
         zwei TYPE c LENGTH 2,
         drei TYPE c LENGTH 2,
       END OF ty_test1.

*== new structure
TYPES: BEGIN OF ty_test2,
         neu TYPE c LENGTH 2,
         eins TYPE c LENGTH 5,
         zwei TYPE i,
       END OF ty_test2.

*== data tables
DATA gt_test1 TYPE STANDARD TABLE OF ty_test1.
DATA gt_test2 TYPE STANDARD TABLE OF ty_test2.
*== id for storing data
DATA gc_id TYPE c LENGTH 20 VALUE '$TRICKTRESOR!'.
*== XML-String containing the data in XML-format
DATA gv_xml TYPE string.
*== exception reference CALL TRANSFORMATION
DATA gx_error TYPE REF TO cx_dynamic_check.

START-OF-SELECTION.

*== add test data to "old" table
  APPEND 'AA1111' TO gt_test1.
  APPEND 'BB2222' TO gt_test1.
  APPEND 'CC3333' TO gt_test1.</pre>
<p><img decoding="async" src="/wp-content/uploads/tt_images/screenshots/gt_test1.jpg" alt="" /></p>
<p class="sap1">
<pre class="lang:abap decode:true">*== save xml string into&amp;nbsp;data cluster*== Transform data table into xml string
CALL TRANSFORMATION id
     SOURCE test = gt_test1
     RESULT XML gv_xml.

EXPORT test = gv_xml TO DATABASE indx(zv) ID gc_id.

*== clearance
CLEAR gt_test1.
CLEAR gt_test2.
CLEAR gv_xml.

*== import data into xml string
IMPORT test TO gv_xml FROM DATABASE indx(zv) ID gc_id.

TRY .
*== transform xml data into table with NEW structure
  CALL TRANSFORMATION id
       SOURCE XML gv_xml
       RESULT test = gt_test2.
    CATCH cx_transformation_error INTO gx_error.
  BREAK-POINT.
ENDTRY.</pre>
<p><img decoding="async" src="/wp-content/uploads/tt_images/screenshots/gt_test2.jpg" alt="" /></p>
<p>Der Beitrag <a href="/blog/daten-dynamisch-verwalten/">Daten dynamisch verwalten</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/daten-dynamisch-verwalten/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Anderen Pflegedialog aufrufen</title>
		<link>/blog/anderen-pflegedialog-aufrufen/</link>
					<comments>/blog/anderen-pflegedialog-aufrufen/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate></pubDate>
				<category><![CDATA[Tabellenpflegedialog]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Editor]]></category>
		<category><![CDATA[Materialstamm]]></category>
		<category><![CDATA[Customizing]]></category>
		<category><![CDATA[TableControl]]></category>
		<category><![CDATA[Dynpros]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=396</guid>

					<description><![CDATA[<p>Durch Zeitpunkte k&#246;nnen Sie in die Verarbeitung der Programmlogik eingreifen. Leider gibt es nur f&#252;r einige Funktionen die entsprechenden Zeitpunkte. In diesem Artikel zeigen wir Ihnen, wie Sie durch eine einfache Manipulation des Dynpros aus der View-Pflege den Aufruf eines anderen Pflegedialogs einbinden k&#246;nnen.</p>
<p>Der Beitrag <a href="/blog/anderen-pflegedialog-aufrufen/">Anderen Pflegedialog aufrufen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Durch Zeitpunkte k&ouml;nnen Sie in die Verarbeitung der Programmlogik eingreifen. Leider gibt es nur f&uuml;r einige Funktionen die entsprechenden Zeitpunkte. In diesem Artikel zeigen wir Ihnen, wie Sie durch eine einfache Manipulation des Dynpros aus der View-Pflege den Aufruf eines anderen Pflegedialogs einbinden k&ouml;nnen.<br /><P class="head1">Anwendung</P><P>Einen Pflegedialog zu einer anderen Tabelle aufzurufen, kann recht n&uuml;tzlich sein. Zum Beispiel k&ouml;nnten Sie in einer Tabelle Daten mit verschieden &#8220;Typen&#8221; hinterlegen. Je &#8220;Typ&#8221; k&ouml;nnte es dann n&ouml;tig sein, zus&auml;tzlich eine andere Tabelle zu pflegen.</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Pflegeview/00call_demo.jpg"><BR>Beispieltabelle mit Druckknopf</P></TD></TR></TBODY></TABLE></P><P class="head1">Beispiel</P><P>Nehmen wir an, Sie haben eine Tabelle mit dem Feld &#8220;Materialnummer&#8221;. Eine Materialnummer ist einer Materialart zugeordnet. In der Tabelle sollen Materialien hinterlegt werden, zu denen bei der Produktion spezielle Pr&uuml;fungen notwendig sind. Die Art der Pr&uuml;fungen sind in einer separaten Customizingtabelle hinterlegt. Da sich die Pr&uuml;fungen und Ausp&auml;gungen aber je Materialart unterscheiden, muss zu Fertigerzeugnissen eine andere Tabelle gepflegt werden als f&uuml;r Rohstoffe.</P><P>&Uuml;ber einen View k&ouml;nnen Sie die Materialtabelle &#8211; nennen wir sie ZMATPRUEF &#8211; mit dem Materialstamm (Tabelle MARA) verbinden. Als zus&auml;tzliches Viewfeld wird die Materialart aufgenommen.</P><P>Um die Materialart in den View aufnehmen zu k&ouml;nnen, m&uuml;ssen Sie in ZMATPRUEF den Fremdschl&uuml;ssel f&uuml;r Feld MATNR auf die Tabelle MARA definiert haben.</P><P>Sie k&ouml;nnen dann im Pflegeview &uuml;ber den Button [_Beziehungen_] die Tabelle MARA ausw&auml;hlen und das Feld MTART in die Feldliste aufnehmen.</P><P>Im angelegten View &#8211; er k&ouml;nnte ZMATPRUEF_V heissen &#8211; definieren Sie in den Feldeigenschaften, dass das Feld &#8220;Materialart&#8221; nur gelesen werden darf (Feld &#8220;P&#8221; [Pflegemerkmal] auf &#8220;R&#8221; setzen&#8221;).</P><P>Aufgrund dieses Feldes entscheiden wir hinterher, welche Pflegetabelle wir aufrufen.&nbsp;</P><P class="head1">Vorgehen</P><P class="head2">Drucktaste in den TableControl einf&uuml;gen</P><P>So gehen Sie vor, um einen Button in ein Dynpro hinzuzuf&uuml;gen um mit diesem einen anderen Pflegedialog aufzurufen:</P><P>Nachdem Sie den Pflegedialog f&uuml;r den View ZMATPRUEF_V angelegt haben, &auml;ndern Sie das generierte Dynpro:&nbsp;Men&uuml; <EM>Umfeld &#8211; Modifikation &#8211; Pflegebild</EM>.</P><P>Im Dynproeditor ziehen Sie einfach ein Feld vom Typ &#8220;Drucktaste&#8221; rechts neben die Felder <STRONG>im</STRONG> TableControl.</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Pflegeview/00call_dynpro.jpg"><BR>Die neue Drucktaste</P></TD></TR></TBODY></TABLE></P><P>Die Attribute zur Drucktaste k&ouml;nnten so aussehen:</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Pflegeview/00call_attr.jpg"><BR>Attribute der Drucktaste</P></TD></TR></TBODY></TABLE></P><P>Wichtig hierbei ist der Funktionscode, der mit&nbsp;Prozentzeichen enden <STRONG>muss</STRONG>.&nbsp;Die Prozentzeichen werden beim Dr&uuml;cken in die aktuelle Zeile umgewandelt. Wird der Druckknopf in der dritten Zeile gedr&uuml;ckt, so hat der Funktionscode den Wert ZZCALL003.</P><P class="head2">Aufruf des Pflegedialogs</P><P>Es gibt leider keinen Zeitpunkt mit dem man auf das Dr&uuml;cken des Knopfes reagieren k&ouml;nnte. Deswegen implementieren wir ein neues MODUL in die Ablauflogik des Dynpros.</P><P>Es g&auml;be zwei M&ouml;glichkeiten, an welcher Stelle man auf den Tastendruck reagieren k&ouml;nnte: </P><OL><LI>innerhalb des LOOP &uuml;ber die Tabellenzeilen <LI>am Ende der Verarbeitung des PAI</LI></OL><P>Innerhalb des LOOP im TableControl muss man abfragen, ob die aktuell durchlaufene Zeile die ist, in der die Drucktaste bet&auml;tigt wurde.</P><P>Bei Variante (2) muss man die Zeilennummer&nbsp;im Funktionscode auswerten und den entsprechenden Tabelleneintrag nachlesen.</P><P>Hier habe ich mich f&uuml;r die erste Variante entschieden.</P><P>F&uuml;gen Sie in der Ablauflogik direkt nach &#8220;LOOP AT EXTRACT&#8221; die folgende Zeile ein:</P><P class="sap1">MODULE ZZ_USERCOMMAND.</P><P>Mit Doppelklick legen Sie das Modul an. Das Programm schl&auml;gt automatisch vor, dass das Modul in ein neues Include in der Funktionsgruppe des Pflegeviews angelegt wird. </P><P>So k&ouml;nnte das Coding des Moduls aussehen:</P><P class="sap1"><FONT color="#fb2412">*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR>*&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Module&nbsp; ZZ_USERCOMMAND&nbsp; INPUT<BR>*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR></FONT>MODULE zz_usercommand INPUT.<BR><BR>&nbsp; IF sy-ucomm(6) = &#8216;ZZCALL&#8217;.&nbsp;&nbsp;&nbsp;&nbsp;<BR>&nbsp;&nbsp;&nbsp; PERFORM zz_call_view_dialog USING sy-ucomm+6(3).&nbsp;&nbsp;<BR>&nbsp; ENDIF.<BR><BR>ENDMODULE.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8221; ZZ_USERCOMMAND&nbsp; INPUT</P><P class="text1">Die Routine ZZ_CALL_VIEW_DIALOG enth&auml;lt das eigentliche Coding f&uuml;r den Aufruf des Pflegedialogs:</P><P class="sap1"><FONT color="#fb2412">*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR>*&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Form&nbsp; ZZ_CALL_VIEW_DIALOG<BR>*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*</FONT><BR>FORM zz_call_view_dialog USING value(fi_row).<BR><BR><FONT color="#fb2412">*** Datendeklarationen</FONT><BR>&nbsp; DATA lv_tabname TYPE tabname.<BR>&nbsp; DATA ls_sellist TYPE vimsellist.<BR>&nbsp; DATA lt_sellist TYPE STANDARD TABLE OF vimsellist.<BR>&nbsp; DATA lv_row&nbsp;&nbsp;&nbsp;&nbsp; TYPE i.<BR><BR><FONT color="#fb2412">*** Die &uuml;bergebene Nummer aus der Drucktaste&nbsp;ist der aktuellen<BR>*** sichtbaren Zeile im TableControl. Um die richtige Position<BR>*** herauszubekommen, muss die&nbsp;erste im TableControl angezeigte<BR>*** Zeile addiert werden:</FONT><BR>&nbsp; lv_row = fi_row + tctrl_zmatpruef_v-top_line &#8211; 1.<BR><BR><FONT color="#fb2412">*** Hier pr&uuml;fen wir, ob die aktuell im LOOP durchlaufene&nbsp;Zeile<BR>*** auch die Zeile ist, in der der Druckknopf bet&auml;tigt wurde</FONT><BR>&nbsp; CHECK lv_row = tctrl_zmatpruef_v-current_line.<BR><BR><FONT color="#fb2412">*** &Uuml;bernahme der unstrukturierten Daten EXTRACT in die View-Struktur</FONT><BR>&nbsp; zmatpruef_v = extract.<BR><BR><FONT color="#fb2412">*** Hier entscheiden wir uns, welche Tabelle zur Materialart geh&ouml;rt:</FONT><BR>&nbsp; CASE zmatpruef_v-mtart.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;FERT&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lv_tabname = &#8216;ZMATPRUEF_FERT&#8217;.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;ROH&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lv_tabname = &#8216;ZMATPRUEF_ROH&#8217;.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;HALB&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lv_tabname = &#8216;ZMATPRUEF_HALB&#8217;.<BR>&nbsp;&nbsp;&nbsp; WHEN OTHERS.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MESSAGE i000(vz) WITH &#8216;Kein Customizing n&ouml;tig&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXIT.<BR>&nbsp; ENDCASE.<BR><BR><FONT color="#fb2412">*** In der ermittelten Customizingtabelle sollte als Schl&uuml;sselfeld die <BR>*** Materialnummer vorhanden sein, da ja die Einstellungen zur <BR>*** Materialnummer vorgenommen werden m&uuml;ssen.<BR>*** Deswegen&nbsp;&uuml;bergeben wir dem Pflegeview die Materialnummer<BR></FONT>&nbsp; CLEAR lt_sellist.<BR>&nbsp; ls_sellist-viewfield = &#8216;MATNR&#8217;.<BR>&nbsp; ls_sellist-operator = &#8216;EQ&#8217;.<BR>&nbsp; ls_sellist-value = zmatpruef_v-matnr.<BR>&nbsp; APPEND ls_sellist TO lt_sellist.<BR><BR><BR><FONT color="#fb2412">*** Dies ist der Aufruf des Pflegedialoges zur ermittelten Tabelle</FONT><BR>&nbsp; CALL FUNCTION &#8216;VIEW_MAINTENANCE_CALL&#8217;<BR>&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = status-action<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = lv_tabname<BR>&nbsp;&nbsp;&nbsp; TABLES<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dba_sellist&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = lt_sellist<BR>&nbsp;&nbsp;&nbsp; EXCEPTIONS<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; client_reference&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; foreign_lock&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invalid_action&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 3<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_clientindependent_auth&nbsp;&nbsp;&nbsp; = 4<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_database_function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 5<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_editor_function&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 6<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_show_auth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 7<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_tvdir_entry&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 8<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_upd_auth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 9<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; only_show_allowed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 10<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; system_failure&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 11<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unknown_field_in_dba_sellist = 12<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; view_not_found&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 13<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maintenance_prohibited&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 14<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OTHERS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 15.<BR>&nbsp; IF sy-subrc = 0.<BR><FONT color="#fb2412">*** Falls der Pflegeview zur Tabelle ZMATPRUEF_V Teil eines <BR>*** Viewclusters ist, m&uuml;ssen Sie die folgenden beiden Zeilen<BR>*** aktivieren, um wieder auf dem Pflegeview zu landen&nbsp;</FONT><BR><FONT color="#008952">*&nbsp;&nbsp;&nbsp; CLEAR: vim_leave_screen, vim_act_dynp_view.<BR>*&nbsp;&nbsp;&nbsp; SET SCREEN 0. LEAVE SCREEN.<BR></FONT>&nbsp; ELSE.<BR><FONT color="#fb2412">*** Fehlermeldung,&nbsp;falls eine Pflege nicht m&ouml;glich war<BR></FONT>&nbsp;&nbsp;&nbsp; MESSAGE i000(vz) WITH &#8216;Pflege nicht m&ouml;glich; SUBRC=&#8217; sy-subrc.<BR>&nbsp; ENDIF.<BR><BR>ENDFORM.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8221; ZZ_CALL_VIEW_DIALOG</P><P class="head2">&Auml;nderung der&nbsp;Feldeigenschaften</P><P>Als letztes bleibt uns noch die &Auml;nderung der Feldeigenschaften f&uuml;r den Druckknopf, denn im Anzeigemodus ist der Druckknopf nicht aktiv.</P><P>um den Druckknopf auch im Anzeigemodus zu aktivieren, m&uuml;ssen Sie im PBO innerhalb des LOOP AT EXTRACT ein Modul einf&uuml;gen:</P><P class="sap1">MODULE ZZ_SCREEN.</P><P>Coding in diesem Modul:</P><P class="sap1"><FONT color="#fb2412">*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR>*&amp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Module&nbsp; ZZ_SCREEN&nbsp; OUTPUT<BR>*&amp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;*<BR></FONT>MODULE zz_screen OUTPUT.<BR><BR>&nbsp; LOOP AT SCREEN.<BR>&nbsp;&nbsp;&nbsp; IF screen-name = &#8216;ZZBUTTON_CALL&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; screen-input = &#8216;1&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MODIFY SCREEN.<BR>&nbsp;&nbsp;&nbsp; ENDIF.<BR>&nbsp; ENDLOOP.<BR><BR>ENDMODULE.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8221; ZZ_SCREEN&nbsp; OUTPUT</P><P class="head1">Anmerkungen</P><P>Nachdem Sie nun alles aktiviert haben, k&ouml;nnen Sie die Funktionalit&auml;t nutzen.</P><P>Beachten Sie bitte, dass bei einer Neugenerierung die folgenden &Auml;nderungen &uuml;berschrieben werden und erneut angepasst werden m&uuml;ssen:</P><UL><LI>Druckknopf im Dynpro <LI>Ablauflogik im Dynpro</LI></UL><P>Diese &Auml;nderungen sind jedoch minimal, da das Coding der Module erhalten bleibt.</P></p>
<p>Der Beitrag <a href="/blog/anderen-pflegedialog-aufrufen/">Anderen Pflegedialog aufrufen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/anderen-pflegedialog-aufrufen/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
