<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>Verkauf Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/verkauf/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Wed, 12 Aug 2015 09:35:00 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>Verkauf Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Kunde/ Lieferant anlegen</title>
		<link>/blog/kunde-lieferant-anlegen/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 24 Feb 2012 14:12:59 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=637</guid>

					<description><![CDATA[<p>Die BAPIs f&#252;r das erstellen von Kundenstamms&#228;tzen oder Lieferantenstamms&#228;tzen sind mehr als &#252;bersichtlich - sie sind n&#228;mlich nicht vorhanden. Es gibt aber inzwischen zwei Klassen, die man gut verwenden kann.</p>
<p>Der Beitrag <a href="/blog/kunde-lieferant-anlegen/">Kunde/ Lieferant anlegen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Die BAPIs f&uuml;r das erstellen von Kundenstamms&auml;tzen oder Lieferantenstamms&auml;tzen sind mehr als &uuml;bersichtlich &#8211; sie sind n&auml;mlich nicht vorhanden. Es gibt aber inzwischen zwei Klassen, die man gut verwenden kann.<br /><P class="head1">Info</P><P class="text1">Die Klassen sehen wohlsortiert aus, die Datenstrukturen komplex, aber ordentlich strukturiert.</P><P class="text1">Da geht was&#8230;!</P><P class="head1">Kundenbearbeitungs-API: CMD_EI_API</P><P>Hier folgen Beizeiten Infos zum Anlegen und &Auml;ndern.</P><P class="head1">Lieferantenbearbeitungs-API: VMD_EI_API</P><P>Hier folgen Beizeiten Infos zum Anlegen und &Auml;ndern.</P><P>&nbsp;</P></p>
<p>Der Beitrag <a href="/blog/kunde-lieferant-anlegen/">Kunde/ Lieferant anlegen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Serialnummern in Kundenauftrag einfügen</title>
		<link>/blog/serialnummern-in-kundenauftrag-einfuegen/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 28 Jan 2011 09:11:16 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<category><![CDATA[Auftragserfassung]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=576</guid>

					<description><![CDATA[<p>Hier ein kleiner Codeschnipsel mit dem es m&#246;glich ist, Serialnummern in eine Kundenauftragsposition einzuf&#252;gen.</p>
<p>Der Beitrag <a href="/blog/serialnummern-in-kundenauftrag-einfuegen/">Serialnummern in Kundenauftrag einfügen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Hier ein kleiner Codeschnipsel mit dem es möglich ist, Serialnummern in eine Kundenauftragsposition einzufügen.</p>
<p class="text1">Die vorhanden Serialnummern werden eingelesen. Sind keine vorhanden, so erscheint der Standard-Serialnummerndialog, um Serialnummern einzutragen.</p>
<p class="text1">Soll das Hinzufügen ohne Dialog erfolgen, dann muss der Funktionsbaustein SERNR_ADD_TO_DOCUMENT verwendet werden.</p>
<h2 class="head1">Coding</h2>
<p class="sap1">DATA ls_serxx          TYPE rserxx.<br />
DATA lt_serxx          TYPE STANDARD TABLE OF rserxx.<br />
DATA lt_sernr          TYPE STANDARD TABLE OF e1rmsno.<br />
DATA ls_rserob         TYPE rserob.<br />
DATA ls_vbap TYPE vbap.<br />
FIELD-SYMBOLS &lt;sernr&gt;  TYPE e1rmsno.</p>
<p class="sap1"><span style="color: #fb2412;">*** Select customer order item</span><br />
SELECT single * FROM vbap<br />
INTO ls_vbap<br />
WHERE vbeln = p_vbeln<br />
AND posnr = p_posnr.<br />
CHECK sy-subrc = 0.</p>
<p class="sap1"><span style="color: #fb2412;">*** get existing serial numbers<br />
</span>ls_rserob-taser   = &#8216;SER02&#8217;.<br />
ls_rserob-sdaufnr = ls_vbap-vbeln.<br />
ls_rserob-posnr   = ls_vbap-posnr.<br />
CALL FUNCTION &#8216;GET_SERNOS_OF_DOCUMENT&#8217;<br />
EXPORTING<br />
key_data            = ls_rserob<br />
TABLES<br />
serxx               = lt_serxx<br />
EXCEPTIONS<br />
key_parameter_error = 1<br />
no_supported_access = 2<br />
no_data_found       = 3<br />
OTHERS              = 4.<br />
IF sy-subrc = 3 AND lt_serxx IS INITIAL.<br />
<span style="color: #fb2412;">*** No serial numbers exist: show maintenance popup<br />
</span>  ls_serxx-sdaufnr = ls_vbap-vbeln.<br />
ls_serxx-posnr   = ls_vbap-posnr.<br />
CALL FUNCTION &#8216;SERNR_MAINTAIN_IN_DOCUMENT&#8217;<br />
EXPORTING<br />
operation                 = &#8216;SDAU&#8217;<br />
objkopf                   = &#8216;SER02&#8217;<br />
serxx                     = ls_serxx<br />
activity                  = &#8216;H&#8217; &#8220;create<br />
material                  = ls_vbap-matnr<br />
profile                   = ls_vbap-serail<br />
quantity                  = 1<br />
EXCEPTIONS<br />
konfigurations_error      = 1<br />
general_serial_error      = 2<br />
no_profile_operation      = 3<br />
no_automatic              = 4<br />
difference_in_header_data = 5<br />
OTHERS                    = 6.<br />
IF sy-subrc = 0.<br />
<span style="color: #fb2412;">*** Post entered serial numbers<br />
</span>    CALL FUNCTION &#8216;SERIAL_LISTE_POST_AU&#8217;.<br />
COMMIT WORK AND WAIT.<br />
ENDIF.<br />
ENDIF.</p>
<p>Der Beitrag <a href="/blog/serialnummern-in-kundenauftrag-einfuegen/">Serialnummern in Kundenauftrag einfügen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Konditionen ändern</title>
		<link>/blog/konditionen-aendern/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 29 Apr 2009 19:40:20 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<category><![CDATA[BAPIs]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=519</guid>

					<description><![CDATA[<p>Konditionen k&#246;nnen mit dem BAPI_SALESORDER_CHANGE ge&#228;ndert werden. Die M&#246;glichkeiten sind jedoch sehr beschr&#228;nkt. Bei jeder &#196;nderung wird eine neue Kondition eingef&#252;gt und die vorhandene auf "inaktiv" gesetzt. &#196;nderungen von Zu- und Abschl&#228;gen sind &#252;berhaupt nicht m&#246;glich. Mit dem folgenden Coding k&#246;nnen die Konditionen angepasst werden.</p>
<p>Der Beitrag <a href="/blog/konditionen-aendern/">Konditionen ändern</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Konditionen k&ouml;nnen mit dem BAPI_SALESORDER_CHANGE ge&auml;ndert werden. Die M&ouml;glichkeiten sind jedoch sehr beschr&auml;nkt. Bei jeder &Auml;nderung wird eine neue Kondition eingef&uuml;gt und die vorhandene auf &#8220;inaktiv&#8221; gesetzt. &Auml;nderungen von Zu- und Abschl&auml;gen sind &uuml;berhaupt nicht m&ouml;glich. Mit dem folgenden Coding k&ouml;nnen die Konditionen angepasst werden.<br /><P>Das Programm verwendet Standardfunktionsbausteine, die aber normalerweise nur intern genutzt werden.</P><P>Sollten Sie das folgende Coding also&nbsp;verwenden wollen, sollten Sie auf jeden Fall ausgiebig testen!</P><P>Denken Sie daran, dass es inaktive Konditionen geben kann oder eine Kondition als prozentualer&nbsp;Auf- oder Abschlag definiert als auch wertm&auml;&szlig;ig eingestellt sein kann&#8230;!</P><P>Das hier vorgestellte Coding &auml;ndert den Wert einer Kopfkondition. Diese wird auch ordnungsgem&auml;&szlig; auf die Positionen heruntergebrochen.</P><P class="sap1"><FONT color="#fb2412">*** DATA<BR></FONT>DATA gs_xkomv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TYPE komv.<BR>DATA gt_xkomv&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TYPE STANDARD TABLE OF komv.<BR>DATA gs_komk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TYPE&nbsp;komk.<BR>DATA gs_komp&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TYPE&nbsp;komp.<BR><BR><FONT color="#fb2412">*** FIELD SYMBOLS<BR></FONT>FIELD-SYMBOLS &lt;komv&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TYPE komv.<BR>FIELD-SYMBOLS &lt;dataloss&gt;&nbsp;&nbsp;&nbsp;&nbsp;TYPE c.<BR>FIELD-SYMBOLS &lt;konvchanged&gt;&nbsp;TYPE c.<BR><BR><FONT color="#fb2412">*** SELECTION SCREEN</FONT><BR>PARAMETERS p_vbeln TYPE vbeln DEFAULT &#8216;12345&#8217;.<BR><BR>START-OF-SELECTION.<BR><BR><FONT color="#fb2412">*** READ DOCUMENT</FONT><BR>&nbsp; CALL FUNCTION &#8216;SD_SALES_DOCUMENT_READ&#8217;<BR>&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; document_number = p_vbeln.<BR><BR><FONT color="#fb2412">*** GET PRICING INFORMATION</FONT><BR>&nbsp; CALL FUNCTION &#8216;SD_SALES_PRICING_INFORMATION&#8217;<BR>&nbsp;&nbsp;&nbsp; IMPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e_komk = gs_komk<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e_komp = gs_komp<BR>&nbsp;&nbsp;&nbsp; TABLES<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ftkomv = gt_xkomv.<BR><BR><FONT color="#fb2412">*** CHANGE ONE HEADER CONDITION<BR></FONT>&nbsp; READ TABLE gt_xkomv ASSIGNING &lt;komv&gt; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WITH KEY kschl = &#8216;ZZZZ&#8217; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kposn = 0.<BR>&nbsp; IF sy-subrc = 0.<BR><FONT color="#fb2412">*** CHANGE CONDITIONS VALUE</FONT><BR>&nbsp;&nbsp;&nbsp; SUBTRACT 3 FROM &lt;komv&gt;-kbetr.<BR><FONT color="#fb2412">*** CHECK IF CHANGES ARE OK:</FONT><BR>&nbsp;&nbsp;&nbsp; CALL FUNCTION &#8216;PRICING_CHECK&#8217;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comm_head_i = gs_komk<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; comm_item_i = gs_komp<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; komv_i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = &lt;komv&gt;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preliminary = &#8216;X&#8217;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXCEPTIONS<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; condition&nbsp;&nbsp; = 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; OTHERS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = 2.<BR>&nbsp;&nbsp;&nbsp; IF sy-subrc &gt; 0.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8220;Do something to stop updating the wrong condition<BR>&nbsp;&nbsp;&nbsp; ENDIF.<BR>&nbsp; ENDIF.<BR><BR><FONT color="#fb2412">*** ASSIGN DATA-LOSS-FLAG&nbsp;TO FORCE SAVING</FONT><BR>&nbsp; ASSIGN (&#8216;(SAPMV45A)R185D-DATALOSS&#8217;) TO &lt;dataloss&gt;.<BR>&nbsp; &lt;dataloss&gt; = &#8216;X&#8217;.<BR><BR><FONT color="#fb2412">*** ASSIGN&nbsp;CONDITIONS-CHANGED-FLAG&nbsp;TO FORCE SAVING CONDITIONS</FONT><BR>&nbsp; ASSIGN (&#8216;(SAPMV45A)KONV_GEAENDERT&#8217;) TO &lt;konvchanged&gt;.<BR>&nbsp; &lt;konvchanged&gt; = &#8216;X&#8217;.<BR><BR><FONT color="#fb2412">*** DO NOT UPDATE IF THERE ARE NO CONDITIONS</FONT><BR>&nbsp; CHECK gt_xkomv IS NOT INITIAL.<BR><BR><FONT color="#fb2412">*** SET NEW PRICING</FONT><BR>&nbsp; CALL FUNCTION &#8216;SD_SALES_PRICING_PUT&#8217;<BR>&nbsp;&nbsp;&nbsp; TABLES<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fxkomv = gt_xkomv.<BR><BR><FONT color="#fb2412">*** SAVE DOCUMENT</FONT><BR>&nbsp; CALL FUNCTION &#8216;SD_SALES_DOCUMENT_SAVE&#8217;<BR>&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; synchron = &#8216;X&#8217;.&nbsp;</P></p>
<p>Der Beitrag <a href="/blog/konditionen-aendern/">Konditionen ändern</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Grafischer Belegfluß</title>
		<link>/blog/grafischer-belegfluss/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 19 Mar 2008 16:59:48 +0000</pubDate>
				<category><![CDATA[Reports]]></category>
		<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Container]]></category>
		<category><![CDATA[abap]]></category>
		<category><![CDATA[Verkauf]]></category>
		<category><![CDATA[GUI]]></category>
		<category><![CDATA[Tree]]></category>
		<category><![CDATA[Hilfsprogramme]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=467</guid>

					<description><![CDATA[<p>Auf http://www.erpgenie.com/ wurde ein Programm bereitgestellt, mit dem man den Belegfluss zu Belegen grafisch darstellen kann. Es ist ein sehr nettes Tool, das vielleicht bei der täglichen Arbeit weiter hilft.</p>
<p>Der Beitrag <a href="/blog/grafischer-belegfluss/">Grafischer Belegfluß</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Auf http://www.erpgenie.com/ wurde ein Programm bereitgestellt, mit dem man den Belegfluss zu Belegen grafisch darstellen kann. Es ist ein sehr nettes Tool, das vielleicht bei der täglichen Arbeit weiter hilft.</p>
<p class="text1">Das hier vorgestellte Coding ist leicht verschlankt. Eine Version mit Doppelklick-Funktionalität und Screenshots sehen Sie bei <a title="Sales Order Workflow | ERP Genie" href="http://www.erpgenie.com/sap/abap/SalesOrderFlow.htm" target="_blank">ERPgenie</a>.</p>
<h2>Screenshot</h2>
<p><img decoding="async" alt="" src="/wp-content/uploads/tt_images/screenshots/Bild006.jpg" /> Belegfluss für Aufträge</p>
<h2 class="head1">Coding</h2>
<pre>*Sales Order Flow - Tree Report
REPORT z_sales_tree_rpt .
*http://www.erpgenie.com/sap/abap/SalesOrderFlow.htm

* Table Definitions
TABLES: vbak,            "Sales Document: Header Data
        vbfa.            "Sales Document Flow

* Type definitions
TYPES: BEGIN OF itab_type,
         folder   TYPE flag,
         node_key TYPE mtreeitm,
         relatkey TYPE tv_nodekey,
         type     LIKE vbak-vbtyp,
         vbeln    LIKE vbak-vbeln,
         posnn    LIKE vbfa-posnn,
         rfmng(10) TYPE c,
         rfwrt(12) TYPE c,
       END OF itab_type.

TYPES: BEGIN OF sel_type,
         vbeln    LIKE vbak-vbeln,
         vbtyp    LIKE vbak-vbtyp,
       END OF sel_type.

* Data Definitions
DATA: okcode    LIKE sy-ucomm,
      itab_data TYPE itab_type OCCURS 0,
      itab_selection TYPE sel_type OCCURS 0.
DATA: BEGIN OF it_vbfa OCCURS 0.
        INCLUDE STRUCTURE vbfa.
DATA: END OF it_vbfa,

      is_vbfa   LIKE LINE OF it_vbfa,
      is_vbc06  LIKE vbco6,
      wa_vbelv  LIKE vbfa-vbelv,
      wj_vbelv  LIKE vbfa-vbelv,
      wa_posnv  LIKE vbfa-posnv,
      wj_posnv  LIKE vbfa-posnv,
      wa_nodekey TYPE tv_nodekey,
      t_screen(3) TYPE c,
      t_dynnr LIKE sy-dynnr,
      wa_data   TYPE itab_type.

* Tree list definitions

CLASS cl_gui_cfw      DEFINITION LOAD.

TYPES: item_table_type LIKE STANDARD TABLE OF mtreeitm  WITH DEFAULT KEY.

DATA: g_custom_container TYPE REF TO cl_gui_custom_container,
      g_tree             TYPE REF TO cl_gui_list_tree,
      g_ok_code          TYPE sy-ucomm.

*******************************************************************
*  Create a tree report of sales orders to deliveries to invoices *
*******************************************************************

SELECTION-SCREEN BEGIN OF BLOCK a0 WITH FRAME TITLE text-001.

SELECT-OPTIONS:
  s_vbeln FOR vbak-vbeln,
  s_erdat FOR vbak-erdat,
  s_ernam FOR vbak-ernam.
PARAMETERS: p_vbtyp LIKE vbfa-vbtyp_n DEFAULT 'C'.

SELECTION-SCREEN END OF BLOCK a0.

*----------------------------------------------------------------------*
* Start of Selection
*----------------------------------------------------------------------*
START-OF-SELECTION.

  REFRESH: itab_data, itab_selection.
  PERFORM update_selection_table TABLES itab_selection.
  PERFORM create_input_table TABLES itab_data
                                    itab_selection.

  IF NOT itab_data IS INITIAL.
    CALL SCREEN 2000.
  ENDIF.

END-OF-SELECTION.

*&amp;---------------------------------------------------------------------*
*&amp;      Form  create_and_init_tree
*&amp;---------------------------------------------------------------------*
FORM create_and_init_tree.

  DATA: node_table TYPE treev_ntab,
        item_table TYPE item_table_type.

* create a container for the tree control
  CREATE OBJECT g_custom_container
    EXPORTING
      container_name = 'TREE_CONTROL'.

* create a list tree control
  CREATE OBJECT g_tree
    EXPORTING
      parent              = g_custom_container
      node_selection_mode = cl_gui_list_tree=&gt;node_sel_mode_single
      item_selection     = 'X'
      with_headers       = ' '.

  PERFORM build_node_and_item_table USING node_table item_table.

  CALL METHOD g_tree-&gt;add_nodes_and_items
    EXPORTING
      node_table                     = node_table
      item_table                     = item_table
      item_table_structure_name      = 'MTREEITM'.

ENDFORM.                    " create_and_init_tree

*&amp;---------------------------------------------------------------------*
*&amp;      Form  build_node_and_item_table
*&amp;---------------------------------------------------------------------*
FORM build_node_and_item_table  USING
                                       node_table TYPE treev_ntab
                                       item_table TYPE item_table_type.
  DATA: node TYPE treev_node,
        item TYPE mtreeitm.

* Build the node and item table.
  LOOP AT itab_data INTO wa_data.
    CLEAR node.

    node-node_key = wa_data-node_key-node_key.
    node-relatkey = wa_data-relatkey.
    node-isfolder = wa_data-folder.
    IF wa_data-relatkey IS INITIAL.
      CLEAR: node-relatship,
             node-exp_image,
             node-expander.
      node-hidden = ' '.
      node-disabled = ' '.
    ELSE.
      node-relatship = cl_gui_list_tree=&gt;relat_last_child.
    ENDIF.
    APPEND node TO node_table.

* Update Items
    CLEAR item.
    item-node_key   = wa_data-node_key-node_key.
    item-item_name  = '1'.
    item-length     = 10.
    item-class      = cl_gui_list_tree=&gt;item_class_text. " Text Item
    item-alignment  = cl_gui_list_tree=&gt;align_auto.
    item-font       = cl_gui_list_tree=&gt;item_font_prop.
    CASE wa_data-type.
      WHEN 'C'.
        item-text = 'Order'.
      WHEN 'J'.
        item-text = 'Delivery'.
      WHEN 'M'.
        item-text = 'Invoice'.
      WHEN '+'.
        item-text = 'Payment'.
      WHEN 'Q'.
        item-text = 'Warehouse Xfer'.
      WHEN 'R'.
        item-text = 'Goods Mvmt'.
      WHEN 'H'.
        item-text = 'Return Gds'.
    ENDCASE.
    APPEND item TO item_table.

    CLEAR item.
    item-node_key   = wa_data-node_key-node_key.
    item-item_name  = '2'.
    item-length     = 10.
    item-class      = cl_gui_list_tree=&gt;item_class_text. " Text Item
    item-alignment  = cl_gui_list_tree=&gt;align_auto.
    item-font       = cl_gui_list_tree=&gt;item_font_prop.
    item-text       = wa_data-vbeln.
    APPEND item TO item_table.

    CLEAR item.
    item-node_key   = wa_data-node_key-node_key.
    item-item_name  = '3'.
    item-length     = 6.
    item-class      = cl_gui_list_tree=&gt;item_class_text. " Text Item
    item-alignment  = cl_gui_list_tree=&gt;align_auto.
    item-font       = cl_gui_list_tree=&gt;item_font_prop.
    item-text       = wa_data-posnn.
    APPEND item TO item_table.

    CLEAR item.
    item-node_key   = wa_data-node_key-node_key.
    item-item_name  = '4'.
    item-length     = 10.
    item-class      = cl_gui_list_tree=&gt;item_class_text. " Text Item
    item-alignment  = cl_gui_list_tree=&gt;align_auto.
    item-font       = cl_gui_list_tree=&gt;item_font_prop.
    item-text       = wa_data-rfmng.
    APPEND item TO item_table.

    CLEAR item.
    item-node_key   = wa_data-node_key-node_key.
    item-item_name  = '5'.
    item-length     = 10.
    item-class      = cl_gui_list_tree=&gt;item_class_text. " Text Item
    item-alignment  = cl_gui_list_tree=&gt;align_auto.
    item-font       = cl_gui_list_tree=&gt;item_font_prop.
    item-text       = wa_data-rfwrt.
    APPEND item TO item_table.

  ENDLOOP.

ENDFORM.                    " build_node_and_item_table

*&amp;---------------------------------------------------------------------*
*&amp;      Form  create_input_table
*&amp;---------------------------------------------------------------------*
FORM create_input_table TABLES   p_itab_data LIKE itab_data
                                 p_itab_selection LIKE itab_selection.

  DATA: l_tabix LIKE sy-tabix,
        lm_tabix LIKE sy-tabix,
        BEGIN OF wl_data,
          vbeln   LIKE vbfa-vbeln,
          posnn   LIKE vbfa-posnn,
        END OF  wl_data,
        t_counter(4) TYPE n,
        t_parent(4) TYPE c,
        t_parent1(4) TYPE c,
        t_exit TYPE flag,
        is_del_data LIKE LINE OF itab_data,
        it_inv_data TYPE itab_type OCCURS 0.

  t_counter = 1.
  LOOP AT p_itab_selection.

    CLEAR: t_parent, t_parent1, t_exit.
    REFRESH it_vbfa.
    is_vbc06-vbeln = p_itab_selection-vbeln.
    CALL FUNCTION 'RV_ORDER_FLOW_INFORMATION'
      EXPORTING
        aufbereitung        = '2'
        comwa               = is_vbc06
        nachfolger          = 'X'
        n_stufen            = '50'
        vorgaenger          = 'X'
        v_stufen            = '50'
      TABLES
        vbfa_tab            =  it_vbfa
      EXCEPTIONS
        no_vbfa             = 1
        no_vbuk_found       = 2
        OTHERS              = 3.

    CLEAR: wa_data.
    wa_data-folder = 'X'.
    WRITE t_counter TO wa_data-node_key-node_key..
    wa_data-relatkey = t_parent.
    wa_data-type     = p_itab_selection-vbtyp.
    wa_data-vbeln    = p_itab_selection-vbeln.
    wa_data-posnn    = '0'.
    APPEND wa_data TO p_itab_data.
    t_parent = t_counter.
    ADD 1 TO t_counter.

* Find any deliveries for this order
    LOOP AT it_vbfa WHERE vbtyp_n = 'J'.      " Delivery

      CLEAR: wa_data.
      wa_data-folder = 'X'.
      WRITE t_counter TO wa_data-node_key-node_key..
      wa_data-relatkey = t_parent.
      wa_data-type     = it_vbfa-vbtyp_n.
      wa_data-vbeln    = it_vbfa-vbeln.
      wa_data-posnn    = it_vbfa-posnn.
      wa_data-rfmng    = it_vbfa-rfmng.
      is_del_data      = wa_data.
*
      t_parent1 = t_counter.
      ADD 1 TO t_counter.
      wa_vbelv  = it_vbfa-vbeln.
      wa_posnv  = it_vbfa-posnn.
      l_tabix   = sy-tabix.
* Find any invoices Warehouse xfers or Goods Movements for this delivery
      REFRESH: it_inv_data.
      LOOP AT it_vbfa WHERE vbelv = wa_vbelv
                      AND   posnv = wa_posnv.

        CASE it_vbfa-vbtyp_n.
          WHEN 'M'.    "Invoice
            CLEAR: wa_data.
            wa_data-folder = ' '.
            wa_data-node_key-node_key = t_counter.
            wa_data-relatkey = t_parent1.
            wa_data-type     = it_vbfa-vbtyp_n.
            wa_data-vbeln    = it_vbfa-vbeln.
            wa_data-posnn    = it_vbfa-posnn.
            wa_data-rfmng    = it_vbfa-rfmng.
            wa_data-rfwrt    = it_vbfa-rfwrt.
            APPEND wa_data TO it_inv_data.
            wj_vbelv         = it_vbfa-vbeln.
            wj_posnv         = it_vbfa-posnn.
            wa_nodekey       = wa_data-node_key.
            DESCRIBE TABLE it_inv_data LINES lm_tabix.
            ADD 1 TO t_counter.
            PERFORM get_payment  TABLES it_inv_data USING t_counter.
            PERFORM get_returns  TABLES it_inv_data USING t_counter.
            DESCRIBE TABLE it_inv_data LINES l_tabix.
            IF l_tabix &gt; lm_tabix.
              READ TABLE it_inv_data INDEX lm_tabix INTO wa_data.
              wa_data-folder = 'X'.
             MODIFY it_inv_data INDEX lm_tabix FROM wa_data.
            ENDIF.

          WHEN 'Q' OR 'R'.    " WMS transfer, or Goods Mvmt
            CLEAR: wa_data.
            wa_data-folder = ' '.
            wa_data-node_key-node_key = t_counter.
            wa_data-relatkey = t_parent1.
            wa_data-type     = it_vbfa-vbtyp_n.
            wa_data-vbeln    = it_vbfa-vbeln.
            wa_data-posnn    = it_vbfa-posnn.
            wa_data-rfmng    = it_vbfa-rfmng.
            APPEND wa_data TO it_inv_data.
            ADD 1 TO t_counter.
          WHEN OTHERS.
        ENDCASE.

      ENDLOOP.              " finding any matching invoices
      IF it_inv_data IS INITIAL.
        is_del_data-folder = ' '.
      ENDIF.
     APPEND is_del_data TO p_itab_data.
     APPEND LINES OF it_inv_data TO p_itab_data.
      REFRESH: it_inv_data.
    ENDLOOP.                " finding any deliveries

  ENDLOOP.
  CLEAR: t_parent, t_parent1, t_exit.

ENDFORM.                    " create_input_table

*&amp;---------------------------------------------------------------------*
*&amp;      Form  update_selection_table
*&amp;---------------------------------------------------------------------*
FORM update_selection_table TABLES  itab_selection.

  IF NOT s_ernam IS INITIAL OR
     NOT s_erdat IS INITIAL OR
     NOT p_vbtyp IS INITIAL OR
     NOT s_vbeln IS INITIAL.

    SELECT vbeln vbtyp INTO CORRESPONDING FIELDS OF
    TABLE  itab_selection
    FROM   vbak
    WHERE vbeln IN s_vbeln AND
          erdat IN s_erdat AND
          ernam IN s_ernam AND
          vbtyp =  p_vbtyp.
  ENDIF.

ENDFORM.                    " update_selection_table

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_payment
*&amp;---------------------------------------------------------------------*
FORM get_payment  TABLES it_inv_data USING pt_counter .

  LOOP AT it_vbfa WHERE vbelv = wj_vbelv
                  AND   posnv = wj_posnv
                  AND   vbtyp_n = '+'.
    wa_data-folder = ' '.
    wa_data-relatkey = wa_nodekey.
    wa_data-node_key-node_key = pt_counter.
    wa_data-type     = it_vbfa-vbtyp_n.
    wa_data-vbeln    = it_vbfa-vbeln.
    wa_data-posnn    = it_vbfa-posnn.
    wa_data-rfmng    = it_vbfa-rfmng.
    wa_data-rfwrt    = it_vbfa-rfwrt.
    APPEND wa_data TO it_inv_data.
    ADD 1 TO pt_counter.
  ENDLOOP.

ENDFORM.                    " get_payment

*&amp;---------------------------------------------------------------------*
*&amp;      Form  get_returns
*&amp;---------------------------------------------------------------------*
FORM get_returns   TABLES it_inv_data USING pt_counter .

  DATA: ld_rfwrt(11) TYPE c,
        ld_tabix LIKE sy-tabix.

  LOOP AT it_vbfa WHERE vbelv = wj_vbelv
                  AND   posnv = wj_posnv
                  AND   vbtyp_n = 'H'.
    ld_tabix         = sy-tabix.
    wa_data-folder   = ' '.
    wa_data-relatkey = wa_nodekey.
    wa_data-node_key-node_key = pt_counter.
    wa_data-type     = it_vbfa-vbtyp_n.
    wa_data-vbeln    = it_vbfa-vbeln.
    wa_data-posnn    = it_vbfa-posnn.
    wa_data-rfmng    = it_vbfa-rfmng.
    ld_rfwrt         = it_vbfa-rfwrt.
    CONCATENATE ld_rfwrt '-' INTO  ld_rfwrt.
    wa_data-rfwrt    = ld_rfwrt.
    APPEND wa_data TO it_inv_data.
    ADD 1 TO pt_counter.
  ENDLOOP.

ENDFORM.                    "get_returns

*&amp;---------------------------------------------------------------------*
*&amp;      Module  STATUS_2000  OUTPUT
*&amp;---------------------------------------------------------------------*
MODULE status_2000 OUTPUT.

  SET PF-STATUS 'Z_SALES_TREE_2000'.
  SET TITLEBAR 'Z_SALES_TREE_2000'.

ENDMODULE.                 " STATUS_2000  OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  init_data_2000  OUTPUT
*&amp;---------------------------------------------------------------------*
MODULE init_data_2000 OUTPUT.

  IF g_tree IS INITIAL.
    PERFORM create_and_init_tree.
  ENDIF.

ENDMODULE.                    "init_data_2000 OUTPUT

*&amp;---------------------------------------------------------------------*
*&amp;      Module  USER_COMMAND_2000  INPUT
*&amp;---------------------------------------------------------------------*
MODULE user_command_2000 INPUT.

  DATA: return_code TYPE i.

  CALL METHOD cl_gui_cfw=&gt;dispatch
    IMPORTING
      return_code = return_code.

  IF return_code &lt;&gt; cl_gui_cfw=&gt;rc_noevent.
    CLEAR okcode.
    EXIT.
  ENDIF.

  CASE okcode.
    WHEN 'EXIT' OR 'RETURN'. " Finish program
      IF NOT g_custom_container IS INITIAL.
        " destroy tree container (detroys contained tree control, too)
        CALL METHOD g_custom_container-&gt;free
          EXCEPTIONS
            cntl_system_error = 1
            cntl_error        = 2.
        IF sy-subrc &lt;&gt; 0.
          MESSAGE a000(tree_control_msg).
        ENDIF.
        CLEAR g_custom_container.
        CLEAR g_tree.
      ENDIF.
      LEAVE TO SCREEN 0.
  ENDCASE.

  CLEAR okcode.

ENDMODULE.                 " USER_COMMAND_2000  INPUT</pre>
<p>Der Beitrag <a href="/blog/grafischer-belegfluss/">Grafischer Belegfluß</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Übersetzung von Konditionstabellen</title>
		<link>/blog/uebersetzung-von-konditionstabellen/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 25 Oct 2005 10:56:08 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<category><![CDATA[Nachrichtenfindung]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=355</guid>

					<description><![CDATA[<p>Konditionstabellen werden mittels eines speziellen Objektes &#252;bersetzt. Man kann sich zwar auch auf english anmelden und in der Transaktion VK04 den Text &#228;ndern, aber einfacher geht's &#252;ber das logische Objekt.</p>
<p>Der Beitrag <a href="/blog/uebersetzung-von-konditionstabellen/">Übersetzung von Konditionstabellen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Konditionstabellen werden mittels eines speziellen Objektes &uuml;bersetzt. Man kann sich zwar auch auf english anmelden und in der Transaktion VK04 den Text &auml;ndern, aber einfacher geht&#8217;s &uuml;ber das logische Objekt.<br /><P>In der Transaktion SE63 den Men&uuml;punkt &#8220;logisches Objekt&#8221; ausw&auml;hlen.</P><P>Das logische Objekt f&uuml;r die Konditionstabelle heisst: VKOI</P><P>Als Textnamen geben Sie den Tabellennamen ein (Z.B. B950).</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/Verkauf/vkoi.JPG"><BR>Konditionstabellen &uuml;bersetzen</P></TD></TR></TBODY></TABLE></P><P>&Uuml;ber [Bearbeiten] kann der Text &uuml;bersetzt werden.</P></p>
<p>Der Beitrag <a href="/blog/uebersetzung-von-konditionstabellen/">Übersetzung von Konditionstabellen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Belegfluß</title>
		<link>/blog/belegfluss/</link>
					<comments>/blog/belegfluss/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 08 Oct 2004 15:16:33 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=292</guid>

					<description><![CDATA[<p>Wir erkl&#228;ren Ihnen hier, wie man am schnellsten an den Belegflu&#223; eines Beleges herankommt. In diesem Artikel zeigen wir Ihnen, wie Sie den Belegflu&#223; am besten Lesen und wie Sie ihn am einfachsten ausgeben.</p>
<p>Der Beitrag <a href="/blog/belegfluss/">Belegfluß</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Wir erkl&auml;ren Ihnen hier, wie man am schnellsten an den Belegflu&szlig; eines Beleges herankommt. In diesem Artikel zeigen wir Ihnen, wie Sie den Belegflu&szlig; am besten Lesen und wie Sie ihn am einfachsten ausgeben.<br /><P class="head1">Lesen</P><P>Verwenden Sie den Funktionsbaustein <STRONG><FONT>RV_ORDER_FLOW_INFORMATION</FONT> </STRONG>um den Belegfluss zu einem Beleg zu lesen.</P><P>Vermeiden Sie es, wenn m&ouml;glich, die Belegflu&szlig;-Tabelle <STRONG>VBFA</STRONG> per SELECT zu lesen!! Wenn Sie verkehrte Zugriffe verwenden, kann der SELECT sehr lange dauern.</P><P class="head1">Anzeige</P><P>Um den Belegflu&szlig; anzuzeigen, k&ouml;nnen Sie den Dialogbaustein <STRONG>RV_DOCUMENT_FLOW</STRONG> benutzen.</P><P>Das folgende Coding verdeutlicht die Verwendung:</P><P class="sap1">DATA ls_vbco6 TYPE vbco6.<BR><BR>ls_vbco6-vbeln = &#8216;0012345678&#8217;.<BR>ls_vbco6-posnr = &#8216;000010&#8217;.<BR><BR>CALL DIALOG &#8216;RV_DOCUMENT_FLOW&#8217;<BR>&nbsp;&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vbco6 FROM ls_vbco6.</P></p>
<p>Der Beitrag <a href="/blog/belegfluss/">Belegfluß</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/belegfluss/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Lesen der Konfiguration</title>
		<link>/blog/lesen-der-konfiguration/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 01 Apr 2004 20:20:50 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<category><![CDATA[Konfiguration]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=238</guid>

					<description><![CDATA[<p>Hier erfahren Sie, wie man die Konfiguration am besten liest. </p>
<p>Der Beitrag <a href="/blog/lesen-der-konfiguration/">Lesen der Konfiguration</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Hier erfahren Sie, wie man die Konfiguration am besten liest. <br /><P>Funktionsbausteine </P><P>CE_I_GET_CONFIGURATION</P><P>VC_I_GET_CONFIGURATION</P><P>CUXI_CONFIGURATION_GET</P><P>Die Instanz steht im Feld&nbsp;VBAP-CUOBJ.</P><P><STRONG>Der Funktionsbaustein VC_I_GET_CONFIGURATION darf seitens der SAP nicht innerhalb der Auftragsbearbeitung verwendet werden.</STRONG><BR><BR>Siehe dazu auch die OSS-Hinweise 460106 und 428343.<BR><BR>Ansonsten f&uuml;hrt die Benutzung zu DUMPs (im Idealfall) oder zu Inkonsistenzen in der Konfiguration/Datenbank,die sich erst sp&auml;ter bemerkbar machen.<BR><BR>In eigenen Programmen kann der Funktionsbaustein nat&uuml;rlich gut verwendet werden!<BR></P><P>Anstelle der Funktion VC_I_GET_CONFIGURATION sollten die Funktionen <STRONG><BR>&#8211; CUCB_GET_SINGLE_INSTANCE </STRONG>und dann<STRONG> <BR>&#8211; CUCB_GET_VALUES_FROM_INSTANCE</STRONG> <BR>verwendet werden. Diese Funktionen liefern die Bewertung einer Konfiguration im Datenbankformat. Notwendige Aufbereitungen m&uuml;ssen im Userexit bzw. in der kundeneigenen Funktion erfolgen.</P><P><HR noShade><P></P><P>Anzeige einer Konfiguration mit Funktionsbaustein <STRONG>VC_I_DISPLAY_CONFIGURATION</STRONG><BR></P></p>
<p>Der Beitrag <a href="/blog/lesen-der-konfiguration/">Lesen der Konfiguration</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Steuerung Unvollständigkeit</title>
		<link>/blog/steuerung-unvollstaendigkeit/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 15 Aug 2003 16:32:53 +0000</pubDate>
				<category><![CDATA[Vertrieb]]></category>
		<category><![CDATA[Verkauf]]></category>
		<category><![CDATA[Userexits]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=112</guid>

					<description><![CDATA[<p>Damit beim Abarbeiten des Unvollst&#228;ndigkeitsprotokolls bei Feldern auf den "Zusatzdaten B" der Cursor auch auf das richtige Feld springt, ist eine Kleinigkeit zu beachten.</p>
<p>Der Beitrag <a href="/blog/steuerung-unvollstaendigkeit/">Steuerung Unvollständigkeit</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Damit beim Abarbeiten des Unvollst&auml;ndigkeitsprotokolls bei Feldern auf den &#8220;Zusatzdaten B&#8221; der Cursor auch auf das richtige Feld springt, ist eine Kleinigkeit zu beachten.<br /><P>Wenn Sie eigene Felder auf dem Bild &#8220;<FONT color="#f49047">Kopf &#8211; Zusatzdaten B</FONT>&#8221; oder &#8220;<FONT color="#f49047">Position &#8211; Zusatzdaten B</FONT>&#8221; haben, dann sollten Sie das Modul <FONT>INCOMPLOG_SET_CURSOR</FONT> im Process-Before-Output des Customer-Subscreens aufrufen.&nbsp;Dies bewirkt n&auml;mlich, dass bei dem Abarbeiten des <FONT color="#f49047">Unvollst&auml;ndigkeitsprotokolls</FONT> der Cursor auch auf das richtige Feld in den &#8220;Zusatzdaten B&#8221; gesetzt wird.</P></p>
<p>Der Beitrag <a href="/blog/steuerung-unvollstaendigkeit/">Steuerung Unvollständigkeit</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
