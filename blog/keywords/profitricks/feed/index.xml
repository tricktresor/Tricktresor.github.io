<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>Profitricks Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/profitricks/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Fri, 13 Mar 2020 13:43:43 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>Profitricks Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Versteckte Kundennamensräume</title>
		<link>/blog/versteckte-kundennamensraeume/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 20 Dec 2007 19:19:38 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Profitricks]]></category>
		<category><![CDATA[ABAP Profitricks]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=449</guid>

					<description><![CDATA[<p>Der Kundennamensraum f&#252;r Programme beschr&#228;nkt sich eigentlich auf Z*, Y*, SAPMZ*, SAPMY*, MZ* und MY*. Es gibt aber noch ein paar L&#252;cken im SAP-Namensraum, in denen man unbehelligt Programme anlegen kann.... Zum Beispiel aus der Zeit der Dialogbausteine mit DZ*...</p>
<p>Der Beitrag <a href="/blog/versteckte-kundennamensraeume/">Versteckte Kundennamensräume</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Der Kundennamensraum f&uuml;r Programme beschr&auml;nkt sich eigentlich auf Z*, Y*, SAPMZ*, SAPMY*, MZ* und MY*. Es gibt aber noch ein paar L&uuml;cken im SAP-Namensraum, in denen man unbehelligt Programme anlegen kann&#8230;. Zum Beispiel aus der Zeit der Dialogbausteine mit DZ*&#8230;<br /><P>&#8230;das sollte nat&uuml;rlich niemand tun, denn jeder schaut erstmal nach &#8220;Z-oder Y-Programmen&#8221;. Es ist aber gut zu wissen, dass es diese L&uuml;cken gibt.</P><P>Folgende Namensr&auml;ume k&ouml;nnen ebenfalls verwendet werden:</P><UL><LI>MP9* <LI>DZ*, DY* <LI>MSTP9* <LI>MSTT9* <LI>MSTPB9* </LI></UL><P>Es gibt noch ein paar andere MST-Namensr&auml;ume&#8230;</P><P>Alle Kombinationen jeglicher Objekttypen k&ouml;nnen in dem Funktionsbaustein <STRONG>TRINT_GET_NAMESPACE</STRONG> eingesehen werden.</P><P class="head1">&nbsp;&#8230;und f&uuml;r Tabellen</P><UL><LI>T9* f&uuml;r eigenes Customizing (stammt noch aus der Zeit der R/2 nach R/3 Migrationen [Transaktion DMIG]).</LI></UL><P>Weiterf&uuml;hrende Infos zu Namensr&auml;umen und Besonderheiten zum Namensraum gibt es hier:</P><P><A href="http://help.sap.com/saphelp_nw73ehp1/helpdata/de/2a/6b0b1f547a11d189600000e829fbbd/content.htm" Target="_blank">http://help.sap.com/saphelp_nw73ehp1/helpdata/de/<BR>2a/6b0b1f547a11d189600000e829fbbd/content.htm</A></P></p>
<p>Der Beitrag <a href="/blog/versteckte-kundennamensraeume/">Versteckte Kundennamensräume</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Interprozesskommunikation</title>
		<link>/blog/interprozesskommunikation/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 23 Aug 2007 18:30:39 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[ABAP Profitricks]]></category>
		<category><![CDATA[Profitricks]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=427</guid>

					<description><![CDATA[<p>In diesem Beispiel wird gezeigt, wie man zwischen verschiedenen SAPGUI-Modi interagieren kann. Aus dem zu startenden Programm werden eine bestimmte Anzahl neuer Modi ge&#246;ffnet und aus dem Start-Dynpro gesteuert. </p>
<p>Der Beitrag <a href="/blog/interprozesskommunikation/">Interprozesskommunikation</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>In diesem Beispiel wird gezeigt, wie man zwischen verschiedenen SAPGUI-Modi interagieren kann. Aus dem zu startenden Programm werden eine bestimmte Anzahl neuer Modi ge&ouml;ffnet und aus dem Start-Dynpro gesteuert. <br /><P>Das ist wirklich was f&uuml;r Profis:</P><P>Mit dem Report <STRONG><FONT>RSIMC003</FONT> </STRONG>werden andere SAPGUI-Modi ge&ouml;ffnet und gesteuert. In diesem Beispiel kann folgendes Mit den &#8220;Kinder-Modi&#8221; passieren:</P><UL><LI>Aktivieren des SAPGUI-Fensters (Also in den Vordergrund bringen) <LI>Schliessen/ Beenden des Fensters <LI>Senden eines Befehls</LI></UL><P>Der &#8220;Vater-Modus&#8221; erkennt sofort, wenn ein Modus beendet wird.</P><P>Im unteren Screenshot wurden drei zus&auml;tzliche Fenster ge&ouml;ffnet. Durch anlicken eines Modus kann man mit ihn mit den Befehlen unter &#8220;ACTION&#8221; steuern.</P><P><IMG src="https://tricktresor.com/wp-content/uploads/tt_images/abap/imc.jpg"></P><P>Ein praktischer Nutzen f&uuml;r diese Intermoduskommunikation muss allerdings noch gefunden werden&#8230;</P><P class="head1">Ebenfalls interessant</P><P>Programm <STRONG>RSIMCTST</STRONG>: Hier k&ouml;nne die einzelnen Funktionen&nbsp;direkt angesteuert werden und auch OK-Codes zu den einzelnen Modi gesendet werden.&nbsp; Wenn es dann noch gel&auml;nge, die Fenstergr&ouml;&szlig;e- und position zu beeinflussen, k&auml;men wir einem praktischen Nutzen schon viel n&auml;her&#8230;</P></p>
<p>Der Beitrag <a href="/blog/interprozesskommunikation/">Interprozesskommunikation</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Report-Dynpro verändern</title>
		<link>/blog/report-dynpro-veraendern/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 30 Jun 2005 11:54:22 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[abap]]></category>
		<category><![CDATA[Profitricks]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=337</guid>

					<description><![CDATA[<p>Auf einem Dynpro kann zu einer Listbox ein Funktionscode ausgel&#246;st werden, wenn der Wert ge&#228;ndert wird. Auf einem Report wird es technisch zwar unterst&#252;tzt, kann aber mit normalen Mitteln nicht aktiviert werden. Mit einem Trick geht es jedoch. Dieser Trick greift jedoch in die Dynprostruktur ein. Dieser Trick dient lediglich dazu, um zu zeigen, wie Dynpro-Manipulationen gemacht werden k&#246;nnen.</p>
<p>Der Beitrag <a href="/blog/report-dynpro-veraendern/">Report-Dynpro verändern</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Auf einem Dynpro kann zu einer Listbox ein Funktionscode ausgel&ouml;st werden, wenn der Wert ge&auml;ndert wird. Auf einem Report wird es technisch zwar unterst&uuml;tzt, kann aber mit normalen Mitteln nicht aktiviert werden. Mit einem Trick geht es jedoch. Dieser Trick greift jedoch in die Dynprostruktur ein. Dieser Trick dient lediglich dazu, um zu zeigen, wie Dynpro-Manipulationen gemacht werden k&ouml;nnen.<br /><HR noShade><P class="text1"><STRONG>HINWEIS</STRONG><BR>Dieser Tipp ist inzwischen veraltet! In aktuellen Releases muss nat&uuml;rlich der Zusatz USER-COMMAND verwendet werden! Die Stelle ist im Coding <FONT color="#008952">GR&Uuml;N </FONT>hervorgehoben.</P><HR noShade><P class="head1">Screenshot</P><P><TABLE class="tblimg" cellPadding="0" align="left"><TBODY><TR><TD vAlign="top"><P><IMG src="/wp-content/uploads/tt_images/listbox.jpg"><BR>Bei Auswahl wird automatisch eine Checkbox aktiviert</P></TD></TR></TBODY></TABLE></P><P class="head1">Coding</P><P class="sap1">REPORT zzreport.</P><P class="sap1"><FONT color="#fb2412">*** Variablen f&uuml;r Dynpro-&Auml;nderung</FONT><BR>DATA:<BR>&nbsp; h&nbsp;&nbsp;&nbsp; TYPE d020s,<BR>&nbsp; f&nbsp;&nbsp;&nbsp; LIKE d021s OCCURS 0 WITH HEADER LINE,<BR>&nbsp; e&nbsp;&nbsp;&nbsp; LIKE d022s OCCURS 0 WITH HEADER LINE,<BR>&nbsp; m&nbsp;&nbsp;&nbsp; LIKE d023s OCCURS 0 WITH HEADER LINE,<BR>&nbsp; res1 LIKE d021s_res1.</P><P class="sap1"><FONT color="#fb2412">*** Variablen f&uuml;r die Checkbox</FONT><BR>TYPE-POOLS vrm.<BR>DATA:<BR>&nbsp; t_values TYPE vrm_values,<BR>&nbsp; l_value&nbsp; TYPE vrm_value.</P><P class="sap1"><FONT color="#fb2412">*** Selektionsbild</FONT><BR>PARAMETERS:<BR>&nbsp; p_test AS LISTBOX VISIBLE LENGTH 20, <FONT color="#008952">&#8220;USER-COMMAND abc</FONT><BR>&nbsp; p_moto AS CHECKBOX,<BR>&nbsp; p_bike AS CHECKBOX,<BR>&nbsp; p_auto AS CHECKBOX.</P><P class="sap1">LOAD-OF-PROGRAM.<BR><FONT color="#fb2412">*** Dynpro einlesen</FONT><BR>&nbsp; IMPORT DYNPRO h f e m<BR>&nbsp;&nbsp;&nbsp; ID &#8216;ZZREPORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000&#8217;.</P><P class="sap1"><FONT color="#fb2412">*** Funktionscode setzen</FONT><BR>&nbsp; LOOP AT f WHERE fnam = &#8216;P_TEST&#8217;.<BR>&nbsp;&nbsp;&nbsp; res1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = f-res1.<BR>&nbsp;&nbsp;&nbsp; res1-funccode = &#8216;TEST&#8217;.<BR>&nbsp;&nbsp;&nbsp; f-res1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = res1.<BR>&nbsp;&nbsp;&nbsp; MODIFY f.<BR>&nbsp; ENDLOOP.</P><P class="sap1"><FONT color="#fb2412">*** Dynpro generieren</FONT><BR>&nbsp; GENERATE DYNPRO h f e m<BR>&nbsp;&nbsp;&nbsp; ID &#8216;ZZREPORT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1000&#8217;<BR>&nbsp;&nbsp;&nbsp; MESSAGE sy-msgv1 LINE sy-msgv2 WORD sy-msgv3.</P><P class="sap1">INITIALIZATION.</P><P class="sap1"><FONT color="#fb2412">*** Werte f&uuml;r Listbox vorbereiten</FONT><BR>&nbsp; l_value-key&nbsp; = &#8216;M&#8217;.<BR>&nbsp; l_value-text = &#8216;Motorrad&#8217;.<BR>&nbsp; APPEND l_value TO t_values.<BR>&nbsp; l_value-key&nbsp; = &#8216;F&#8217;.<BR>&nbsp; l_value-text = &#8216;Fahrrad&#8217;.<BR>&nbsp; APPEND l_value TO t_values.<BR>&nbsp; l_value-key&nbsp; =&nbsp; &#8216;A&#8217;.<BR>&nbsp; l_value-text = &#8216;Auto&#8217;.<BR>&nbsp; APPEND l_value TO t_values.</P><P class="sap1"><FONT color="#fb2412">*** Werte f&uuml;r Listbox setzen</FONT><BR>&nbsp; CALL FUNCTION &#8216;VRM_SET_VALUES&#8217;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXPORTING<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; id&nbsp;&nbsp;&nbsp;&nbsp; = &#8216;P_TEST&#8217;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values = t_values.</P><P class="sap1"><FONT color="#fb2412">*** Kommando auswerten<BR></FONT>AT SELECTION-SCREEN.</P><P class="sap1">&nbsp; CASE sy-ucomm.<BR>&nbsp;&nbsp;&nbsp; WHEN &#8216;TEST&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CASE p_test.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#8216;M&#8217;.<BR><FONT color="#fb2412">*** Wahl &#8220;Motorrad&#8221;</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_moto = &#8216;X&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_bike = &#8216; &#8216;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_auto = &#8216; &#8216;.</P><P class="sap1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#8216;F&#8217;.<BR><FONT color="#fb2412">*** Wahl &#8220;Fahrrad&#8221;</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_moto = &#8216; &#8216;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_bike = &#8216;X&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_auto = &#8216; &#8216;.</P><P class="sap1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN &#8216;A&#8217;.<BR><FONT color="#fb2412">*** Wahl &#8220;Auto&#8221;</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_moto = &#8216; &#8216;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_bike = &#8216; &#8216;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_auto = &#8216;X&#8217;.</P><P class="sap1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WHEN space.<BR><FONT color="#fb2412">*** Keine Auswahl</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_moto = &#8216; &#8216;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_bike = &#8216; &#8216;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p_auto = &#8216; &#8216;.</P><P class="sap1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENDCASE.<BR>&nbsp; ENDCASE.</P></p>
<p>Der Beitrag <a href="/blog/report-dynpro-veraendern/">Report-Dynpro verändern</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Dynamische Datendeklaration</title>
		<link>/blog/dynamische-datendeklaration/</link>
					<comments>/blog/dynamische-datendeklaration/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 31 Jul 2003 23:58:40 +0000</pubDate>
				<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[Profitricks]]></category>
		<category><![CDATA[abap]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=104</guid>

					<description><![CDATA[<p>Ab Version 4.6D ist es möglich, Datenvariablen im Programm dynamisch zu erzeugen. Der neue Befehl CREATE DATA hilft weiter.</p>
<p>Der Beitrag <a href="/blog/dynamische-datendeklaration/">Dynamische Datendeklaration</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Ab Version 4.6D ist es m&ouml;glich, Datenvariablen im Programm dynamisch zu erzeugen. Der neue Befehl CREATE DATA hilft weiter.<br /><P class="sap1">DATA: dref TYPE REF TO data,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tabname(30) VALUE &#8216;T005T&#8217;.<BR>FIELD-SYMBOLS: &lt;f&gt; TYPE ANY, &lt;c&gt;.</P><P class="sap1"><BR>START-OF-SELECTION.<BR><FONT color="#fb2412">*** Dynamische Struktur erzeugen ***<BR></FONT>&nbsp; CREATE DATA dref TYPE (tabname).</P><P class="sap1"><FONT color="#fb2412">*** Zuweisung zum Feldsymbol</FONT><BR>&nbsp; ASSIGN dref-&gt;* TO &lt;f&gt;.</P><P class="sap1"><FONT color="#fb2412">*** Dynamischer SELECT ***</FONT><BR>&nbsp; SELECT * FROM (tabname) INTO &lt;f&gt;.</P><P class="sap1"><FONT color="#fb2412">*** Ausgabe der Struktur ***</FONT><BR>&nbsp;&nbsp;&nbsp; WRITE: / &#8216;|&#8217;.<BR>&nbsp;&nbsp;&nbsp; DO.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ASSIGN COMPONENT sy-index OF STRUCTURE &lt;f&gt; TO &lt;c&gt;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF sy-subrc &gt; 0.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EXIT.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ELSE.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WRITE: &lt;c&gt;, &#8216;|&#8217;.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ENDIF.<BR>&nbsp;&nbsp;&nbsp; ENDDO.</P><P class="sap1">&nbsp; ENDSELECT.</P><P class="sap1">&nbsp; ULINE.</P></p>
<p>Der Beitrag <a href="/blog/dynamische-datendeklaration/">Dynamische Datendeklaration</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/dynamische-datendeklaration/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Aufrufhierarchie ermitteln</title>
		<link>/blog/aktuelle-form-routine-ermitteln/</link>
					<comments>/blog/aktuelle-form-routine-ermitteln/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 07 May 2003 00:17:37 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Profitricks]]></category>
		<category><![CDATA[Include]]></category>
		<category><![CDATA[callstack]]></category>
		<category><![CDATA[aufrufhierarchie]]></category>
		<category><![CDATA[class]]></category>
		<category><![CDATA[program]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=57</guid>

					<description><![CDATA[<p>Beim Programmdebugging ist es manchmal sinnvoll, zu dokumentieren, welche Routine wann durchlaufen wird (SAPMV45A und die Userexits...). Die folgende Funktionen leisten das.</p>
<p>Der Beitrag <a href="/blog/aktuelle-form-routine-ermitteln/">Aufrufhierarchie ermitteln</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Beim Programmdebugging ist es manchmal sinnvoll, zu dokumentieren, welche Routine oder Methode von welchem Aufrufer gerufen wurde (SAPMV45A und die Userexits&#8230;). Die folgende Routine leistet das.</p>
<p>Wird bei dem CALL-Befehl unter DEPTH die Zahl -1 angegeben, so wird die Tabelle TAB mit der gesamten Aufrufhierarchie gefüllt.</p>
<p>Die folgende Routine können Sie in ein eigenes Programm setzen und dann aus jedem beliebigen anderen Programm heraus aufrufen.</p>
<h2 class="head1">Die Routine</h2>
<p class="sap1">
<pre class="lang:abap decode:true ">FORM aktuelle_routine.

  TYPES: 
    begin of abap_call_stack_entry,
      mainprogram  like sy-repid,
      include      like sy-repid,
      line         type i,
      eventtype    like abdbg-leventtype,
      event        like abdbg-levent,
      flag_system  type c,
    end of abap_call_stack_entry.
 
  DATA: 
    acse type abap_call_stack_entry,
    tab  type table of abap_call_stack_entry.

  CALL 'ABAP_CALLSTACK' ID 'DEPTH'     FIELD 2
                        ID 'CALLSTACK' FIELD tab.

    LOOP AT tab INTO acse FROM 2.
*-- Der Start ab dem zweiten Eintrag ist notwendig, weil in
*-- der ersten Tabellenzeile der aktuelle Eintrag steht, also
*-- diese FORM-Routine. 
      WRITE: 
      / 'Mainprog:', acse-mainprogram,
      / 'Include: ', acse-include,
      / 'Event:   ', acse-eventtype,
                     acse-event.

    ENDLOOP.

ENDFORM.</pre>
<h2 class="head1">Funktionsbaustein</h2>
<p class="text1">Hilfreich ist auch der Funktionsbaustein <strong>SYSTEM_CALLSTACK</strong>, der ebenfalls Informationen über die Aufrufhierarchie liefert!</p>
<h2>Klasse</h2>
<p>Die Klasse <strong>CL_ABAP_GET_CALL_STACK</strong> liefert mit Hilfe der Methode <strong>GET_CALL_STACK</strong> ebenfalls die aktuelle Aufrufhierarchie.</p>
<p>Wahrscheinlich ist die aufbereitete Form des Aufrufstapels in der Regel nützlicher:</p>
<pre class="lang:abap decode:true">DATA(stack) = cl_abap_get_call_stack=&gt;format_call_stack_with_struct( cl_abap_get_call_stack=&gt;get_call_stack( ) ).
</pre>
<figure id="attachment_1018064" aria-describedby="caption-attachment-1018064" style="width: 1013px" class="wp-caption alignnone"><a href="https://tricktresor.com/wp-content/uploads/2003/05/callstack.png"><img fetchpriority="high" decoding="async" class="wp-image-1018064 size-full" src="https://tricktresor.com/wp-content/uploads/2003/05/callstack.png" alt="" width="1013" height="480" srcset="/wp-content/uploads/2003/05/callstack.png 1013w, /wp-content/uploads/2003/05/callstack-300x142.png 300w, /wp-content/uploads/2003/05/callstack-768x364.png 768w" sizes="(max-width: 1013px) 100vw, 1013px" /></a><figcaption id="caption-attachment-1018064" class="wp-caption-text">Ausgabe der Aufrufhierarchie aus der Testumgebung des Class Builders mit CL_DEMO_OUTPUT.</figcaption></figure>
<p>Der Beitrag <a href="/blog/aktuelle-form-routine-ermitteln/">Aufrufhierarchie ermitteln</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/aktuelle-form-routine-ermitteln/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Dirty Assign</title>
		<link>/blog/dirty-assign/</link>
					<comments>/blog/dirty-assign/#respond</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 06 May 2003 23:38:00 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[abap]]></category>
		<category><![CDATA[Profitricks]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=56</guid>

					<description><![CDATA[<p>Mit einem "Dirty Assign" kann man auf Daten zugreifen, auf die man eigentlich keinen Zugriff hat...</p>
<p>Der Beitrag <a href="/blog/dirty-assign/">Dirty Assign</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Mit einem &#8220;Dirty Assign&#8221; kann man auf Daten zugreifen, auf die man eigentlich keinen Zugriff hat&#8230;</p>
<p>Mit dem &#8220;<span style="color: #f49047;">Dirty Assign</span>&#8221; haben Sie die Möglichkeit, auf Variablen und Strukturen von rufenden Programmen zuzugreifen, die nicht zur Verfügung stehen.</p>
<p>Dies macht eventuell dann Sinn, wenn Sie einen Funktionsbaustein aufrufen und innerhalb dieses Funktionsbausteins eine Variable verwendet wird, die aber nicht als Exporting-Parameter zurückgegeben wird.</p>
<p>Sie können so auch in einem per externem PERFORM aufgerufenen Routine auf Variablen des gerufenen Programms zugreifen.</p>
<p>Soll auf eine Tabelle zugegriffen werden, so beachten Sie bitte das Beispiel unten im Artikel.</p>
<p>Das folgende Beispiel soll dies verdeutlichen.</p>
<ol>
<li>Als erstes wird ein Funktionsbaustein ausgeführt, der lediglich eine nur in der Funktionsgruppe bekannte Variable setzt. Diese wird durch den Dirty Assign ermittelt.</li>
<li>Danach wird eine externe Routine aufgerufen, die auch nur eine &#8212; nur in diesem Programm bekannte &#8212; Variable setzt.</li>
</ol>
<h3 class="head1">Funktionsbaustein ZTEST</h3>
<pre class="sap1">FUNCTION ZTEST.
<span style="color: #fb2412;">*"----------------------------------------------------------------------
*"*"Lokale Schnittstelle:
*"----------------------------------------------------------------------
* Der Funktionsbaustein befindet sich in der Gruppe ZTESTFG
* Das Rahmenprogramm heisst deswegen: SAPLZTESTFG
*-----------------------------------------------------------------------</span>

  fb_testvar = 'Trick17'.

ENDFUNCTION.</pre>
<h3 class="head1">Programm ZZENNO13</h3>
<pre class="sap1"><span style="color: #fb2412;">*&amp;---------------------------------------------------------------------*
*&amp; Report  ZZENNO13                                                    *
*&amp;                                                                     *
*&amp;---------------------------------------------------------------------*
</span>REPORT  zzenno13.

DATA testvar(12).

START-OF-SELECTION.

  PERFORM test.
  WRITE: / testvar.

<span style="color: #fb2412;">*---------------------------------------------------------------------*
*       FORM test                                                     *
*---------------------------------------------------------------------*</span>
FORM test.
  testvar = 'Tricktresor'.
ENDFORM.</pre>
<h2 class="head1">Der Dirty Assign</h2>
<pre class="sap1">REPORT zzenno12 NO STANDARD PAGE HEADING.

<span style="color: #fb2412;">*-- Das Feldsymbol, dem der Wert zugewiesen wird
</span>FIELD-SYMBOLS: &lt;ptr&gt;.

START-OF-SELECTION.

<span style="color: #fb2412;">*-- Aufruf des Funktionsbausteins
*-- Hier wird die Variable FB_VARIABLE_GLOBAL gesetzt
</span>  CALL FUNCTION 'ZTEST'.
<span style="color: #fb2412;">*-- Den Wert zuweisen (Funktionsgruppe ZTESTFG)</span>
  ASSIGN ('(SAPLZTESTFG)FB_TESTVAR') TO &lt;ptr&gt;.
<span style="color: #fb2412;">*-- und ausgeben</span>
  WRITE: / 'Wert der Funktionsbaustein-Variablen FB_TESTVAR:',
         AT 50 &lt;ptr&gt;.

<span style="color: #fb2412;">*-- Aufruf eines externen Programms:
*-- Hier wird die Variable TESTVAR verwendet.
</span>  PERFORM test(zzenno13).
<span style="color: #fb2412;">*-- Nun die Feldwerte ermitteln:
</span>  ASSIGN ('(ZZENNO13)TESTVAR') TO &lt;ptr&gt;.
<span style="color: #fb2412;">*-- und ausgeben</span>
  WRITE: / 'Wert der Submit-Variablen TESTVAR:', AT 50 &lt;ptr&gt;.</pre>
<h3 class="head1">Ausgabe</h3>
<p class="sap1"><span>Wert der Funktionsbaustein-Variablen FB_TESTVAR: Trick17<br />
Wert der Submit-Variablen TESTVAR:               Tricktresor  </span></p>
<h2 class="head1">Dirty Assign mit Tabelle</h2>
<p>Um auf einen Tabellenkörper mittels der ASSIGN-Technik zuzugreifen, sind die folgenden Schritte notwendig:</p>
<p class="head2">1. Definition des Arbeitsbereiches</p>
<pre class="sap1">DATA ls_xvbap TYPE vbapvb.</pre>
<p class="head2">2. Definition des Feldsymbols</p>
<pre class="sap1">FIELD-SYMBOLS &lt;XVBAP&gt; <span style="color: #fb2412;">TYPE ANY TABLE</span>.</pre>
<p class="head2">3. Der Dirty Assign</p>
<pre class="sap1">ASSIGN ('(SAPMV45A)XVBAP<span style="color: #fb2412;">[]</span>') TO &lt;xvbap&gt;.<span>
</span></pre>
<p class="head2">4. Zuweisung der Tabelle</p>
<pre class="sap1">LOOP AT &lt;xvbap&gt; INTO ls_xvbap.
...
ENDLOOP.<span>
</span></pre>
<p>Der Beitrag <a href="/blog/dirty-assign/">Dirty Assign</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/dirty-assign/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SYSTEM-CALLS</title>
		<link>/blog/system-calls/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 06 May 2003 22:25:52 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Profitricks]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=52</guid>

					<description><![CDATA[<p>Eine Auflistung von SYSTEM-CALLS. Bitte beachten Sie, dass System-Calls nur in dringenden F&#228;llen verwendet werden sollten. Meistens gibt es auch einen Funktionsbaustein der die Aufgabe eines System-Calls &#252;bernimmt. Bei System-Calls k&#246;nnen ohne weiteres mal die Parameter im C-Programm ge&#228;ndert werden, so dass der Aufruf nicht mehr oder nur noch fehlerhaft funktioniert.</p>
<p>Der Beitrag <a href="/blog/system-calls/">SYSTEM-CALLS</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Eine Auflistung von SYSTEM-CALLS. Bitte beachten Sie, dass System-Calls nur in dringenden Fällen verwendet werden sollten. Meistens gibt es auch einen Funktionsbaustein der die Aufgabe eines System-Calls übernimmt. Bei System-Calls können ohne weiteres mal die Parameter im C-Programm geändert werden, so dass der Aufruf nicht mehr oder nur noch fehlerhaft funktioniert.</p>
<hr noshade="noshade" />
<p class="head2">Eine Information von Horst Keller zu SYSTEM-CALLS:<br />
<a href="http://scn.sap.com/people/horst.keller/blog/2013/03/06/a-word-about-call-system" target="_blank">http://scn.sap.com/people/horst.keller/blog/2013/03/06/a-word-about-call-system</a></p>
<hr noshade="noshade" />
<p class="head2">Prüfen, ob ein Funktionsbaustein per RFC gerufen wurde</p>
<p class="sap1">call &#8216;RFCControl&#8217; id &#8216;CODE&#8217; field &#8216;B&#8217;.<br />
if sy-subrc = 0.<br />
*** running under RFC<br />
endif</p>
<p class="sap1">Alternativ kann der Funktionsbaustein RFC_GET_ATTRIBUTES verwendet werden. Dieser liefert eine Excpetion, wenn er nicht im RFC aufgerufen wird. Es wird der System-Call RFCControl verwendet.</p>
<p class="head2">Profilparameter lesen</p>
<p class="sap1">data a_name(30) type c value &#8216;zcsa/installed_languages&#8217;.</p>
<p class="sap1">call &#8216;C_SAPGPARAM&#8217; id &#8216;NAME&#8217;  field a_name<br />
id &#8216;VALUE&#8217; field a_value.<br />
id &#8216;VALUE11&#8217; field val1<br />
id &#8216;VALUE21&#8217; field val2<br />
id &#8216;VALUE31&#8217; field val3</p>
<p class="head2">Aktuell gültige Sprache ermitteln</p>
<p class="sap1">call &#8216;CUR_LCL&#8217; id &#8216;LANG&#8217;     field old_lang<br />
id &#8216;CODEPAGE&#8217; field old_cp<br />
id &#8216;LOCALE&#8217;   field old_loca<br />
id &#8216;ERRMSG&#8217;   field errmsg.</p>
<p class="head2">Im Workprozess zu anderer Sprache wechseln</p>
<p class="sap1">call &#8216;LCL_FOR_LANG&#8217; id &#8216;NEWLANG&#8217; field langu<br />
id &#8216;ENFORCE&#8217; field &#8216;X&#8217;<br />
id &#8216;ERRMSG&#8217;  field errmsg.</p>
<p class="head2">Automatisches Logoff</p>
<p class="sap1">call &#8216;SYST_LOGOFF&#8217;.</p>
<p class="head2">Systembefehle ausführen</p>
<p class="text1"><strong>ACHTUNG:</strong> Die unsachgemäße Anwendung dieses Calls kann wichtige Dateien auf Ihrem Server zerstören!</p>
<p class="sap1">(Programm SAPMSOS0):<br />
DATA: PARCOM(250),<br />
BEGIN OF TABL OCCURS 0,<br />
LINE(200),<br />
END OF TABL.<br />
call &#8216;SYSTEM&#8217; ID &#8216;COMMAND&#8217; FIELD PARCOM<br />
ID &#8216;TAB&#8217;     FIELD TABL-*SYS*.</p>
<p class="head2">Environmentvariablen lesen</p>
<p class="sap1">a_name: SAP_CODEPAGE<br />
PATH_TO_CODEPAGE</p>
<p class="sap1">data longline(170).<br />
call &#8216;C_GETENV&#8217; id &#8216;NAME&#8217;  field a_name<br />
id &#8216;VALUE&#8217; field longline.</p>
<p class="head2">Funktionsgruppe DX_FILE</p>
<p class="sap1">call &#8216;C_SAPGPARAM&#8217; id &#8216;NAME&#8217;  field &#8216;DIR_HOME&#8217;<br />
id &#8216;VALUE&#8217; field i_path.</p>
<p class="sap1">call &#8216;C_DIR_READ_FINISH&#8217;<br />
id &#8216;ERRNO&#8217;  field &#8230;<br />
id &#8216;ERRMSG&#8217; field &#8230;.</p>
<p class="sap1">call &#8216;C_DIR_READ_START&#8217;<br />
id &#8216;DIR&#8217;    field i_path<br />
id &#8216;FILE&#8217;   field filemask<br />
id &#8216;ERRNO&#8217;  field errno<br />
id &#8216;ERRMSG&#8217; field errmsg.</p>
<p class="sap1">call &#8216;C_DIR_READ_NEXT&#8217;<br />
id &#8216;TYPE&#8217;   field type<br />
id &#8216;NAME&#8217;   field name<br />
id &#8216;LEN&#8217;    field len<br />
id &#8216;OWNER&#8217;  field owner<br />
id &#8216;MTIME&#8217;  field mtime<br />
id &#8216;MODE&#8217;   field mode<br />
id &#8216;ERRNO&#8217;  field errno<br />
id &#8216;ERRMSG&#8217; field errmsg.</p>
<p class="head2">OK-Code ermitteln</p>
<p class="text1">Aufruf aus SAPMSSYD, um den eingegebenen OK-Code aus der OK-Code-Leiste zu bekommen:</p>
<p class="sap1">call &#8216;DYNP_OKCODE_GET&#8217; id &#8216;FCODE&#8217;<br />
field my_ucomm.</p>
<p class="head2">Datei löschen:</p>
<p class="sap1">CALL &#8216;C_REMOVE&#8217; ID &#8216;DIR&#8217; FIELD &#8216;/tmp/&#8217;<br />
ID &#8216;FILE&#8217; FIELD &#8216;datei.txt&#8217;.</p>
<p class="head2">Trace</p>
<p class="text1">Schreibt einen Eintrag in das Tracefile des aktuellen Prozesses. Beispiel:</p>
<p class="text1">L Thu Jul 31 23:04:46 2003<br />
L  ACHTUNG: Text1 Text2</p>
<p class="sap1">CALL &#8216;WriteTrace&#8217;<br />
ID &#8216;CALL&#8217; FIELD &#8216;ACHTUNG&#8217;<br />
ID &#8216;PAR1&#8217; FIELD &#8216;Text1&#8217; &#8220;#EC NOTEXT<br />
ID &#8216;PAR2&#8217; FIELD &#8216;Text2&#8217;.</p>
<p class="head2">Uhr</p>
<p class="sap1">CALL &#8216;CLOCK&#8217; ID &#8216;DATE&#8217; FIELD date<br />
ID &#8216;TIME&#8217; FIELD time.</p>
<p class="head2">Verbucher</p>
<p class="text1">Prüfen, ob ein Verbucher im Spiel ist&#8230;</p>
<p class="sap1"><span style="color: #fb2412;">*&#8211; Alten Sperruser besorgen</span><br />
CALL &#8216;C_ENQUEUE&#8217;<br />
ID &#8216;OPCODE&#8217; FIELD &#8216;7&#8217;<br />
ID &#8216;ENQKVB&#8217; FIELD HLP_USER1.</p>
<p class="sap1"><span style="color: #fb2412;">*&#8211; Commit Work<br />
</span>  COMMIT WORK.</p>
<p class="sap1"><span style="color: #fb2412;">*&#8211; Neuen Sperruser besorgen<br />
</span>  CALL &#8216;C_ENQUEUE&#8217;<br />
ID &#8216;OPCODE&#8217; FIELD &#8216;7&#8217;<br />
ID &#8216;ENQKVB&#8217; FIELD HLP_USER2.</p>
<p class="text1">Wenn die User HLP_USER1 und HLP_USER2 ungleich sind, dann ist ein Verbucher im Spiel, da die Sperre beim Aufruf an ihn weitergegeben wird.</p>
<p class="text1">Eine einfachere Möglichkeit ist jedoch die, das Systemfeld SY-ONCOM abzufragen. SY-ONCOM enthält normalerweise &#8216;S&#8217;.<br />
Befindet man sich im &#8220;Verbucher&#8221; (on update task), so ist der Wert &#8216;V&#8217;.<br />
Ist eine Formroutine &#8220;on commit&#8221; registriert, so hat SY-ONCOM den Wert &#8216;P&#8217; beim Prozessieren dieser Formroutine.<br />
Geht es nur um den &#8220;Verbucher&#8221; kann man auch den Funktionsbaustein &#8220;TH_IN_UPDATE_TASK&#8221; benutzen, der auch einen Systemcall absetzt.</p>
<p class="head1">Name des Aufrufers ermitteln</p>
<p class="text1">Verwendet im Funktionsbaustein &#8220;JOB_OPEN&#8221;, um den Programmnamen des aufrufenden Programms zu ermitteln.</p>
<p class="sap1">DATA calling_abap LIKE sy-repid.<br />
CALL &#8216;AB_GET_CALLER&#8217; ID &#8216;PROGRAM&#8217; FIELD calling_abap.</p>
<p class="head1">TableControl</p>
<p class="text1">Gefunden in Funktionsgruppe STCX</p>
<p class="head2">Datendefinition</p>
<p class="sap1">TCVIEWTAB    TYPE STANDARD TABLE OF tcview<br />
CXNAME       TYPE tccontrol<br />
DYNPRODEF(1) TYPE c</p>
<p class="head2">Felder setzen</p>
<p><span style="color: #000000; font-family: 'Arial monospaced for SAP';">call &#8216;AB_SET_CX_DATA&#8217;<br />
id &#8216;PROGRAM&#8217;   field current_control-program<br />
id &#8216;CXNAME&#8217;    field current_control-control<br />
id &#8216;TCVIEWTAB&#8217; field current_data[].         </span></p>
<p class="head2">Felder lesen</p>
<p><span style="color: #000000; font-family: 'Arial monospaced for SAP';">call &#8216;AB_GET_CX_DATA&#8217;<br />
id &#8216;PROGRAM&#8217;   field current_control-program<br />
id &#8216;CXNAME&#8217;    field current_control-control<br />
id &#8216;DYNPRODEF&#8217; field dynpdef<br />
id &#8216;TCVIEWTAB&#8217; field current_data[]<br />
id &#8216;DYNPRONR&#8217;  field dynnr.                  </span></p>
<p class="head2">Transaktion ermitteln, die das aktuelle Programm rief</p>
<p class="sap1">call &#8216;GET_PARAM_TCOD&#8217;<br />
id &#8216;PTCOD&#8217; field calling_transaction.</p>
<p>Der Beitrag <a href="/blog/system-calls/">SYSTEM-CALLS</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
