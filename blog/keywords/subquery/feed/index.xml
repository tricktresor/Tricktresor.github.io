<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>subquery Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/subquery/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 27 Aug 2019 15:27:59 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>subquery Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>SELECT WHERE nur ein Eintrag vorhanden</title>
		<link>/blog/select-where-nur-ein-eintrag-vorhanden/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 27 Aug 2019 15:27:58 +0000</pubDate>
				<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[having]]></category>
		<category><![CDATA[select]]></category>
		<category><![CDATA[subquery]]></category>
		<guid isPermaLink="false">/?p=1022541</guid>

					<description><![CDATA[<p>Select-Befehle sind in der Regel im SAP-Umfeld einigermaßen überschaubar. Meiner Meinung nach liegt es daran, dass in der Regel Programmierer am Werk sind, aber keine SQL-Spezialisten. Zudem bietet der Open-SQL-Standard von SAP auch nur einen eingeschränkten Funktionsumfang. Selbst wenn man etwas kompliziertere Selects durchführen möchte, ist das nicht unbedingt möglich. Joins sind eine andere Geschichte. Hier toben sich Programmierer gerne einmal aus und joinen was das Zeug hält. SELECT oder ABAP? In beiden Fällen, der...</p>
<p>Der Beitrag <a href="/blog/select-where-nur-ein-eintrag-vorhanden/">SELECT WHERE nur ein Eintrag vorhanden</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Select-Befehle sind in der Regel im SAP-Umfeld einigermaßen überschaubar. Meiner Meinung nach liegt es daran, dass in der Regel Programmierer am Werk sind, aber keine SQL-Spezialisten. Zudem bietet der Open-SQL-Standard von SAP auch nur einen eingeschränkten Funktionsumfang. Selbst wenn man etwas kompliziertere Selects durchführen möchte, ist das nicht unbedingt möglich.</p>



<p>Joins sind eine andere Geschichte. Hier toben sich Programmierer gerne einmal aus und joinen was das Zeug hält.</p>



<h2 class="wp-block-heading">SELECT oder ABAP?</h2>



<p>In beiden Fällen, der Select-Anweisung und der nachträglichen Verarbeitung, gibt es Situationen, wo beides irgendwie umständlich ist. Ein solcher Fall ist es zum Beispiel, wenn man nur die Daten selektieren möchte, von denen man erst nach einer Aggregatbildung weiß, ob man sie lesen möchte oder nicht. Also zum Beispiel: Gib mir alle Belege, zu denen nur ein Eintrag in der Positionstabelle vorhanden ist.</p>



<h2 class="wp-block-heading">SUBQUERY</h2>



<p>Der folgende Select ermittelt genau die Einträge, bei denen nur ein Eintrag in der VBAP vorhanden ist.</p>



<pre class="wp-block-code"><code>SELECT vbeln, matnr
  FROM vbap AS v
 WHERE vbeln IN @s_vbeln
   AND matnr IN @s_matnr
   AND 1 =  ( SELECT COUNT( * ) FROM vbap
               WHERE vbeln = v~vbeln )
 GROUP BY vbeln, matnr
 ORDER BY vbeln, matnr
  INTO TABLE @DATA(list).</code></pre>



<h2 class="wp-block-heading">HAVING</h2>



<p>durch Zufall bin ich bei der Nachstellung des Problems auf eine andere Lösung gestoßen, bei der die Anzahl der vorhandenen Sätze mittels HAVING eingeschränkt wird.</p>



<pre class="wp-block-code"><code>SELECT vbeln, sum( kwmeng ) as kwmeng, vrkme
  FROM vbap AS v
    WHERE vbeln IN @s_vbeln
      AND matnr IN @s_matnr
  GROUP BY vbeln, vrkme
  HAVING COUNT(*) = 1
  ORDER BY vbeln, vrkme
  INTO TABLE @data(list).</code></pre>



<p>Der Vorteil bei der HAVING-Variante ist, dass hier die Anzahl der Datensätze auch variabel abgefragt werden können. Das geht mit dem oben vorgestellten Subquery nicht.</p>



<h2 class="wp-block-heading">Performancevergleich</h2>



<p>Ich habe beide Varianten in zwei unterschiedlichen Systemen mit unterschiedlichen Tabellen ausprobiert und einen kleinen Performancevergleich gemacht. In der einen Version ist die Variante mit dem Subquery schneller, in der anderen Version ist HAVING schneller.</p>



<p>Im Gegensatz zu einer umständlichen Analyse per Programmcoding, welcher Satz nur einmal vorhanden ist, sind beide SELECT-Versionen meiner Meinung nach eleganter. Die Performance sollte man auf jeden Fall bei jeder Version im Blick haben.</p>
<p>Der Beitrag <a href="/blog/select-where-nur-ein-eintrag-vorhanden/">SELECT WHERE nur ein Eintrag vorhanden</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Ist das gültig?</title>
		<link>/blog/ist-das-gueltig/</link>
					<comments>/blog/ist-das-gueltig/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 01 Dec 2016 13:55:19 +0000</pubDate>
				<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[tabelle]]></category>
		<category><![CDATA[subquery]]></category>
		<category><![CDATA[Gültigkeit]]></category>
		<category><![CDATA[Zeitraum]]></category>
		<category><![CDATA[MAX]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=950065</guid>

					<description><![CDATA[<p>Das fragt man sich als Programmierer häufig. Speziell dann, wenn man aus zeitlich abgegrenzten Datensätzen den richtigen Datensatz herausfinden muss. Hier zeige ich dir, wie man einfach aber sicher ans Ziel kommt.</p>
<p>Der Beitrag <a href="/blog/ist-das-gueltig/">Ist das gültig?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Das fragt man sich als Programmierer häufig. Speziell dann, wenn man aus zeitlich abgegrenzten Datensätzen den richtigen Datensatz herausfinden muss. Hier zeige ich dir, wie man einfach aber sicher ans Ziel kommt.</p>
<h2>Gültigkeitszeitraum vs. Gültig ab</h2>
<p>Wenn Datensätze zeitlich voneinander abgegrenzt werden sollen, hat man in der Regel die folgenden zwei Möglichkeiten:</p>
<ol>
<li>Exakte zeitliche Abgrenzung mit &#8220;Gültig ab&#8221; und &#8220;Gültig bis&#8221;</li>
<li>Abgrenzung mit &#8220;Gültig ab&#8221;</li>
</ol>
<p>Bei Variante (1) hat man den Vorteil, dass man einen Zeitraum auch &#8220;schließen&#8221; kann. Beziehungsweise im Umkehrschluss: Man <strong>muss</strong> den Zeitraum auch begrenzen. Anders bei Variante (2): Hier gibt es <strong>immer</strong> einen gültigen Eintrag (sofern mindestens ein Eintrag vorhanden ist).</p>
<p>Der große Nachteil bei Variante (1) ist ebenfalls, dass eine exakte zeitliche Abgrenzung schwer zu administrieren und zu programmieren ist. Besonders dann, wenn Zeiträume in einen oder zwei vorhandene Zeiträume eingefügt werden sollen. Hier ist Variante (2) deutlich einfacher und pflegeleichter.</p>
<p>Variante (2) eignet sich also besonders dann sehr gut, wenn zu einem &#8220;Objekt&#8221; immer ein gültiger Eintrag vorhanden sein soll. Deshalb werden wir uns diese Variante genauer ansehen.</p>
<h2>Gültig ab-Tabelle<a href="https://tricktresor.com/wp-content/uploads/2016/12/2016-12-01_14-51-58.jpg"><img fetchpriority="high" decoding="async" class="size-full wp-image-950141 alignright" src="https://tricktresor.com/wp-content/uploads/2016/12/2016-12-01_14-51-58.jpg" alt="2016-12-01_14-51-58" width="329" height="442" srcset="/wp-content/uploads/2016/12/2016-12-01_14-51-58.jpg 329w, /wp-content/uploads/2016/12/2016-12-01_14-51-58-223x300.jpg 223w" sizes="(max-width: 329px) 100vw, 329px" /></a></h2>
<p>Als einfaches Beispiel habe ich mir eine Tabelle erstellt, die ein Gültig-Ab-Datum und eine Monatsbezeichnung hat. Es kann also für jedes Datum eine Bezeichnung vergeben werden.</p>
<p>Diese Tabelle ist zugegebener Weise einigermaßen Sinn frei, verdeutlicht aber sehr gut das Verfahren.</p>
<h2>Ermittlung des gültigen Eintrags &#8211; herkömmlich</h2>
<p>Um aus der vorgestellten Tabelle zu einem Datum den jeweils gültigen Eintrag zu lesen, geht man normalerweise folgendermaßen vor:</p>
<ol>
<li>Lies alle Einträge, deren Gültigkeit kleiner gleich dem gewünschten Datum ist.</li>
<li>Sortiere die Einträge nach GUELTIG_AB absteigend, so dass der aktuellste Eintrag an erster Stelle steht</li>
<li>Lies den Eintrag an erster Stelle</li>
</ol>
<pre class="">SELECT * FROM ztt_datum INTO TABLE lt_datum 
 WHERE gueltig_ab &lt;= mein_datum
 ORDER BY gueltig_ab DESCENDING.
READ TABLE lt_datum INTO DATA(ls_datum) INDEX 1.</pre>
<p>Der Nachteil von dieser Variante ist, dass man alle jemals gültig gewesenen Einträge lesen muss.</p>
<h2>Ermittlung des gültigen Eintrags &#8211; Tricktresor-Style</h2>
<p>Mithilfe eines Subqueries ist es möglich, exakt den einen richtigen Eintrag zu finden. Ein Code-Snippet sagt mehr als tausend Worte:</p>
<pre class="">SELECT single * FROM ztt_datum INTO @DATA(ls_datum)
 WHERE datab = ( SELECT MAX( datab )
                   FROM ztt_datum
                  WHERE datab &lt;= @p_datum ).</pre>
<h2></h2>
<p>Der Beitrag <a href="/blog/ist-das-gueltig/">Ist das gültig?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/ist-das-gueltig/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
	</channel>
</rss>
