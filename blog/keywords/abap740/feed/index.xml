<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>abap740 Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/abap740/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Thu, 09 Nov 2017 18:16:20 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>abap740 Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Simple Tree Model mit User-Object</title>
		<link>/blog/simple-tree-model-mit-user-object/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 09 Nov 2017 18:16:20 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP 740]]></category>
		<category><![CDATA[ABAP 750]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Tree-Control]]></category>
		<category><![CDATA[Model]]></category>
		<category><![CDATA[NEW]]></category>
		<category><![CDATA[abap750]]></category>
		<category><![CDATA[abap740]]></category>
		<category><![CDATA[cl_simple_tree_model]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1018219</guid>

					<description><![CDATA[<p>Baumdarstellungen sind immer eine Herausforderung. Allerdings eine spannende, finde ich. Mit der Klasse CL_SIMPLE_TREE_MODEL zeige ich, wie du einfach auf Informationen zu einem Knoten zugreifen kannst. </p>
<p>Der Beitrag <a href="/blog/simple-tree-model-mit-user-object/">Simple Tree Model mit User-Object</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Bäume sind immer interessant, finde ich. Sie sind nicht so eintönig gleichmäßig wie die meisten Listen. Der CL_SIMPLE_TREE_MODEL hat jedoch zudem auch in der Programmierung eine schöne Besonderheit: Zu jedem Knoten kann die Instanz einer beliebigen Klasse übergeben werden. Mit der Methode NODE_GET_USER_OBJECT kann man sich dann die Instanz geben lassen und hiermit weiter arbeiten.</p>
<h2>Tree-Ausgabe</h2>
<p>Als Beispielaufgabe habe ich mir die folgende gestellt: Zeige alle Materialien zu einer Selektion nach Materialart unterteilt an. Also: Hauptknoten &#8211; Materialart &#8211; Materialien. Die Selektion der Daten erfolgt im Selektionsbild des Reports bei AT SELECTION-SCREEN. Auf unserem IDES-System haben ich nur ein paar Dutzend Materialien, da geht die Selektion zügig.</p>
<p>Mit Doppelklick auf einen Eintrag soll &#8211; je nach Knotenart &#8220;Materialart&#8221; oder &#8220;Materialnummer&#8221; &#8211; die jeweilige Information ausgegeben werden. Es muss also bei dem Knoten &#8220;Materialart&#8221; eine andere Klasse verwendet werden, als bei der Knotenart &#8220;Materialnummer&#8221;.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2017/11/cl_simple_tree_model.png"><img fetchpriority="high" decoding="async" class="alignnone size-full wp-image-1018221" src="https://tricktresor.com/wp-content/uploads/2017/11/cl_simple_tree_model.png" alt="" width="725" height="358" srcset="/wp-content/uploads/2017/11/cl_simple_tree_model.png 725w, /wp-content/uploads/2017/11/cl_simple_tree_model-300x148.png 300w" sizes="(max-width: 725px) 100vw, 725px" /></a></p>
<p>Zusätzlich zur Demonstration des CL_SIMPLE_TREE_MODEL habe ich versucht, möglichst viele neue Sprachbefehle zu verwenden. Gerade bei der Verwendung des User-Objects macht der Befehl NEW zur Instantiierung einer Klasse die Programmierung wirklich elegant.</p>
<h2>User-Object</h2>
<p>für das User-Object habe ich eine Hauptklasse LCL_USER_OBJECT_MARA definiert:</p>
<pre class="lang:abap decode:true">CLASS lcl_user_object_mara DEFINITION ABSTRACT.
  PUBLIC SECTION.
    DATA mara TYPE mara.
    METHODS constructor IMPORTING i_mara TYPE mara.
    METHODS get_text.
ENDCLASS.

CLASS lcl_user_object_mara IMPLEMENTATION.
  METHOD constructor.
    mara = i_mara.
  ENDMETHOD.
  METHOD get_text.
    SELECT SINGLE maktx FROM makt INTO @DATA(text)
     WHERE matnr = @mara-matnr
       AND spras = @sy-langu.
    IF sy-subrc = 0.
      MESSAGE text TYPE 'I'.
    ENDIF.
  ENDMETHOD.
ENDCLASS.</pre>
<p>Die Klasse hat nur das Attribut MARA, das bei der Erzeugung mitgegeben werden muss und die Methode GET_TEXT mit der ein Text zum Objekt ermittelt wird.</p>
<p>Da ich die Klasse als ABSTRAKT definiert habe, kann ich diese Klasse nicht instantiieren. Das geht nur bei den von dieser Klasse abgeleiteten Klassen:</p>
<pre class="lang:abap decode:true">CLASS lcl_user_object_mtart DEFINITION INHERITING FROM lcl_user_object_mara.
  PUBLIC SECTION.
    METHODS get_text REDEFINITION.
ENDCLASS.
CLASS lcl_user_object_mtart IMPLEMENTATION.
  METHOD get_text.
    MESSAGE |Materialart { mara-mtart }|  TYPE 'I'.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_user_object_matnr DEFINITION INHERITING FROM lcl_user_object_mara.
  PUBLIC SECTION.
ENDCLASS.</pre>
<p>In der Klasse <em>MTART</em> redefiniere ich die Methode &#8220;GET_TEXT&#8221; um einen eigenen Text für <em>Materialart</em> zu bekommen.</p>
<p>Die Klasse <em>MATNR</em> ist nur eine leere Hülle, da sie alles andere von der Hauptklasse erbt.</p>
<p>Natürlich hätte ich auch zwei komplett unterschiedliche und voneinander unabhängige Klassen definieren können.</p>
<h2>Hauptprogramm</h2>
<p>Das Hauptprogramm besteht nur den Selektionsparametern und aus zwei Ereignissen:</p>
<ol>
<li>dem Ereignis INITIALIZATION, in dem ich den Docking-Container erzeuge und</li>
<li>dem Ereignis AT SELECTION-SCREEN, in dem ich die Daten selektiere und den Baum erzeuge</li>
</ol>
<pre class="lang:abap decode:true">REPORT z_simple_tree_model.

DATA s_mara TYPE mara.

SELECT-OPTIONS s_matnr FOR s_mara-matnr.
SELECT-OPTIONS s_mtart FOR s_mara-mtart.

[...Klassendefinition...]

INITIALIZATION.
  lcl_main=&gt;create_docker( ).

AT SELECTION-SCREEN.
  TRY.
      lcl_main=&gt;get_data( ).
      lcl_main=&gt;create_tree( ).
      lcl_main=&gt;add_nodes( ).
    CATCH lcx_error.
      MESSAGE 'Fehler bei Selektion' TYPE 'I'.
  ENDTRY.</pre>
<h2>Hauptklasse</h2>
<p>Die Klasse LCL_MAIN, in der die Logik des Programms vorhanden ist, besteht aus diesen vier Methoden:</p>
<ol>
<li>Create_Docker</li>
<li>Create_Tree</li>
<li>Get_Data</li>
<li>Add_Nodes</li>
</ol>
<p>Zusätzlich gibt es noch die Methode zur Ereignisbehandlung des Doppelklicks auf einen Knoten: Handle_Node_Double_Click.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2017/11/cl_simple_tree_model-se80.png"><img decoding="async" class="alignnone size-full wp-image-1018220" src="https://tricktresor.com/wp-content/uploads/2017/11/cl_simple_tree_model-se80.png" alt="" width="331" height="372" srcset="/wp-content/uploads/2017/11/cl_simple_tree_model-se80.png 331w, /wp-content/uploads/2017/11/cl_simple_tree_model-se80-267x300.png 267w" sizes="(max-width: 331px) 100vw, 331px" /></a></p>
<h3>Create_Docker</h3>
<p>So simple:</p>
<pre class="lang:abap decode:true">    IF docker IS INITIAL.
      docker = NEW #( side = cl_gui_docking_container=&gt;dock_at_bottom ratio = 50 ).
    ENDIF.</pre>
<p>&nbsp;</p>
<h3>Get_Data</h3>
<p>Ebenfalls nicht spektakulär:</p>
<pre class="lang:abap decode:true">    SELECT * FROM mara INTO TABLE t_mara
     WHERE matnr IN s_matnr
       AND mtart IN s_mtart.
    IF sy-subrc &gt; 0.
      RAISE EXCEPTION TYPE lcx_error.
    ENDIF.</pre>
<p>Zur Fehlerbehandlung habe ich eine eigene Exception-class erstellt:</p>
<pre class="lang:abap decode:true">CLASS lcx_error DEFINITION INHERITING FROM cx_no_check.
ENDCLASS.</pre>
<h3>Create_Tree</h3>
<p>Bei der Erzeugung des CL_SIMPLE_TREE_MODEL bin ich auf die erste Hürde gestoßen, denn die Erzeugung des Control läuft etwas anders, als bei den meisten anderen GUI-Controls. Normalerweise instantiiert man das GUI-Control unter Angabe des Containers in das das Control eingefügt werden soll (Parameter PARENT). Nicht so bei dieser Klasse. Hier wird erst das Tree-Objekt erzeugt und danach mit der Methode CREATE_TREE_CONTROL an den PARENT-Container gehängt:</p>
<pre class="lang:abap decode:true">    IF tree IS BOUND.
      tree-&gt;delete_all_nodes( ).
    ELSE.
      tree   = NEW #( node_selection_mode = cl_simple_tree_model=&gt;node_sel_mode_single ).
      tree-&gt;create_tree_control( EXPORTING parent = docker ).

      tree-&gt;set_registered_events(
              EXPORTING events = VALUE #(
                 ( eventid = cl_simple_tree_model=&gt;eventid_node_double_click appl_event = space ) ) ).

      SET HANDLER handle_node_double_click FOR tree.
    ENDIF.

    tree-&gt;add_node(
             node_key = 'Root'                              "#EC NOTEXT
             isfolder = 'X'
             text     = 'Materialien zur Selektion' ).</pre>
<p>Das Event Doppelklick wird hier ebenfalls registriert und der event handler dafür installiert. Zusätzlich wird der Hauptknoten ROOT eingefügt.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<h3>Add_Nodes</h3>
<p>Mit der Methode ADD_NODE des Tree-Controls werden einzelne Knoten in den Baum eingehängt. Immer unter Angabe des Knoten-ID, des übergeordneten Knotens, Text und ein paar anderen. An dieser Stelle kann das User-Object übergeben werden, dass dann zur Knoten-ID zur Verfügung steht:</p>
<pre class="lang:abap decode:true">    DATA l_mtart TYPE mtart.

    SORT t_mara BY mtart matnr.

    LOOP AT t_mara INTO DATA(mara).

      IF l_mtart &lt;&gt; mara-mtart.
        l_mtart = mara-mtart.
        "Knoten MATERIALART
        tree-&gt;add_node(
            node_key = CONV #( mara-mtart )
            relative_node_key = 'Root'
            relationship = cl_simple_tree_model=&gt;relat_last_child
            isfolder = 'X'
            text     = |Materialart { mara-mtart } |
            user_object = NEW lcl_user_object_mtart( i_mara = mara ) ).
      ENDIF.

      "Knoten MATERIALNUMMER
      tree-&gt;add_node(
          node_key          = |{ mara-matnr ALPHA = OUT }|
          relative_node_key = CONV #( mara-mtart )
          relationship      = cl_simple_tree_model=&gt;relat_last_child
          isfolder          = space
          text              = |{ mara-matnr ALPHA = OUT }|
          user_object       = NEW lcl_user_object_matnr( i_mara = mara ) ).

    ENDLOOP.

    tree-&gt;expand_root_nodes( ).</pre>
<h2>Ereignisbehandler</h2>
<p>Im Ereignisbehandler prüfen wir, welchen Objekttyp das User-Object hat, um gegebenenfalls anders reagieren zu können:</p>
<pre class="lang:abap decode:true ">    DATA o_user_object_matnr TYPE REF TO lcl_user_object_matnr.
    DATA o_user_object_mtart TYPE REF TO lcl_user_object_mtart.
    DATA o_object TYPE REF TO object.

    tree-&gt;node_get_user_object( EXPORTING node_key    = node_key
                                IMPORTING user_object = o_object ).

    IF o_object IS INSTANCE OF lcl_user_object_mtart.
      o_user_object_mtart ?= o_object.
      o_user_object_mtart-&gt;get_text( ).
      EXIT.
    ENDIF.

    IF o_object IS INSTANCE OF lcl_user_object_matnr.
      o_user_object_matnr ?= o_object.
      o_user_object_matnr-&gt;get_text( ).
      EXIT.
    ENDIF.</pre>
<p>In diesem Fall verwenden wir zwar für MTART und MATNR die gleiche Methode GET_TEXT, aber hier könnte man je Objekt eine andere Funktion ausführen. Falls im ABAP Release die Syntax IS INSTANCE OF noch nicht verfügbar ist, muss mit TRY &#8211; CATCH geprüft werden, ob der Cast zwischen OBJECT und User-Object erfolgreich war oder nicht:</p>
<pre class="lang:abap decode:true ">    TRY.
        o_user_object_matnr ?= o_object.
        o_user_object_matnr-&gt;get_text( ).
      CATCH cx_sy_move_cast_error.
    ENDTRY.</pre>
<h2>Das komplette Programm</h2>
<pre class="lang:abap decode:true ">REPORT zdemo_simple_tree_model.


DATA s_mara TYPE mara.

SELECT-OPTIONS s_matnr FOR s_mara-matnr.
SELECT-OPTIONS s_mtart FOR s_mara-mtart.

CLASS lcx_error DEFINITION INHERITING FROM cx_no_check.
ENDCLASS.

CLASS lcl_user_object_mara DEFINITION ABSTRACT.
  PUBLIC SECTION.
    DATA mara TYPE mara.
    METHODS constructor IMPORTING i_mara TYPE mara.
    METHODS get_text.
ENDCLASS.

CLASS lcl_user_object_mara IMPLEMENTATION.
  METHOD constructor.
    mara = i_mara.
  ENDMETHOD.
  METHOD get_text.
    SELECT SINGLE maktx FROM makt INTO @DATA(text)
     WHERE matnr = @mara-matnr
       AND spras = @sy-langu.
    IF sy-subrc = 0.
      MESSAGE text TYPE 'I'.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_user_object_mtart DEFINITION INHERITING FROM lcl_user_object_mara.
  PUBLIC SECTION.
    METHODS get_text REDEFINITION.
ENDCLASS.

CLASS lcl_user_object_mtart IMPLEMENTATION.
  METHOD get_text.
    MESSAGE |Materialart { mara-mtart }|  TYPE 'I'.
  ENDMETHOD.
ENDCLASS.
CLASS lcl_user_object_matnr DEFINITION INHERITING FROM lcl_user_object_mara.
  PUBLIC SECTION.
ENDCLASS.



CLASS lcl_main DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS get_data.
    CLASS-METHODS create_tree.
    CLASS-METHODS add_nodes.
    CLASS-METHODS create_docker.
    CLASS-METHODS handle_node_double_click
      FOR EVENT node_double_click
                  OF cl_simple_tree_model
      IMPORTING node_key.

    CLASS-DATA docker TYPE REF TO cl_gui_docking_container.
    CLASS-DATA tree   TYPE REF TO cl_simple_tree_model.
    CLASS-DATA t_mara TYPE STANDARD TABLE OF mara.
    CLASS-DATA s_mara TYPE mara.

ENDCLASS.

CLASS lcl_main IMPLEMENTATION.
  METHOD create_docker.
    IF docker IS INITIAL.
      docker = NEW #( side = cl_gui_docking_container=&gt;dock_at_bottom ratio = 50 ).
    ENDIF.
  ENDMETHOD.

  METHOD handle_node_double_click.

    DATA o_user_object_matnr TYPE REF TO lcl_user_object_matnr.
    DATA o_user_object_mtart TYPE REF TO lcl_user_object_mtart.
    DATA o_object TYPE REF TO object.

    tree-&gt;node_get_user_object( EXPORTING node_key    = node_key
                                IMPORTING user_object = o_object ).

    IF o_object IS INSTANCE OF lcl_user_object_mtart.
      o_user_object_mtart ?= o_object.
      o_user_object_mtart-&gt;get_text( ).
      EXIT.
    ENDIF.

    IF o_object IS INSTANCE OF lcl_user_object_matnr.
      o_user_object_matnr ?= o_object.
      o_user_object_matnr-&gt;get_text( ).
      EXIT.
    ENDIF.

  ENDMETHOD.


  METHOD get_data.

    SELECT * FROM mara INTO TABLE t_mara
     WHERE matnr IN s_matnr
       AND mtart IN s_mtart.
    IF sy-subrc &gt; 0.
      RAISE EXCEPTION TYPE lcx_error.
    ENDIF.
  ENDMETHOD.

  METHOD create_tree.

    IF tree IS BOUND.
      tree-&gt;delete_all_nodes( ).
    ELSE.
      tree   = NEW #( node_selection_mode = cl_simple_tree_model=&gt;node_sel_mode_single ).
      tree-&gt;create_tree_control( EXPORTING parent = docker ).

      tree-&gt;set_registered_events(
              EXPORTING events = VALUE #(
                 ( eventid = cl_simple_tree_model=&gt;eventid_node_double_click appl_event = space ) ) ).

      SET HANDLER handle_node_double_click FOR tree.
    ENDIF.

    tree-&gt;add_node(
             node_key = 'Root'                              "#EC NOTEXT
             isfolder = 'X'
             text     = 'Materialien zur Selektion' ).

  ENDMETHOD.

  METHOD add_nodes.

    DATA l_mtart TYPE mtart.

    SORT t_mara BY mtart matnr.

    LOOP AT t_mara INTO DATA(mara).

      IF l_mtart &lt;&gt; mara-mtart.
        l_mtart = mara-mtart.
        "Knoten MATERIALART
        tree-&gt;add_node(
            node_key = CONV #( mara-mtart )
            relative_node_key = 'Root'
            relationship = cl_simple_tree_model=&gt;relat_last_child
            isfolder = 'X'
            text     = |Materialart { mara-mtart } |
            user_object = NEW lcl_user_object_mtart( i_mara = mara ) ).
      ENDIF.

      "Knoten MATERIALNUMMER
      tree-&gt;add_node(
          node_key          = |{ mara-matnr ALPHA = OUT }|
          relative_node_key = CONV #( mara-mtart )
          relationship      = cl_simple_tree_model=&gt;relat_last_child
          isfolder          = space
          text              = |{ mara-matnr ALPHA = OUT }|
          user_object       = NEW lcl_user_object_matnr( i_mara = mara ) ).
      .

    ENDLOOP.

    tree-&gt;expand_root_nodes( ).


  ENDMETHOD.

ENDCLASS.



INITIALIZATION.
  lcl_main=&gt;create_docker( ).

AT SELECTION-SCREEN.
  TRY.
      lcl_main=&gt;get_data( ).
      lcl_main=&gt;create_tree( ).
      lcl_main=&gt;add_nodes( ).
    CATCH lcx_error.
      MESSAGE 'Fehler bei Selektion' TYPE 'I'.
  ENDTRY.</pre>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/simple-tree-model-mit-user-object/">Simple Tree Model mit User-Object</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>REDUCE + SWITCH + COND [ABAP740]</title>
		<link>/blog/reduce-switch-cond-abap740/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 03 May 2017 13:07:57 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP 740]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[REDUCE]]></category>
		<category><![CDATA[switch]]></category>
		<category><![CDATA[CONV]]></category>
		<category><![CDATA[COND]]></category>
		<category><![CDATA[string]]></category>
		<category><![CDATA[abap740]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1018016</guid>

					<description><![CDATA[<p>Heute im Code-Dojo hatte ich die Aufgabe gestellt, eine Funktion zu schreiben, die einen String mit variabel zu bestimmender Länge und zufälligen Zeichenfolgen aus Zahlen und Buchstaben zurück liefert. Zum Beispiel &#8220;I71B7HJ4BG&#8221; oder &#8220;6EE17ICBF54IE486EHD8&#8221;. Idee Mit VALUE und FOR sollte ein String Zeichen für Zeichen zusammengesetzt werden. Mit einer Zufallsfunktion sollte ermittelt werden, ob ein Buchstabe oder eine Zahl eingesetzt werden soll. Per SWITCH sollte ebenfalls eine Zufallsfunktion aufgerufen werden, die eine Zahl bzw. einen Buchstaben...</p>
<p>Der Beitrag <a href="/blog/reduce-switch-cond-abap740/">REDUCE + SWITCH + COND [ABAP740]</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Heute im Code-Dojo hatte ich die Aufgabe gestellt, eine Funktion zu schreiben, die einen String mit variabel zu bestimmender Länge und zufälligen Zeichenfolgen aus Zahlen und Buchstaben zurück liefert. Zum Beispiel &#8220;I71B7HJ4BG&#8221; oder &#8220;6EE17ICBF54IE486EHD8&#8221;.</p>
<h2>Idee</h2>
<p>Mit VALUE und FOR sollte ein String Zeichen für Zeichen zusammengesetzt werden. Mit einer Zufallsfunktion sollte ermittelt werden, ob ein Buchstabe oder eine Zahl eingesetzt werden soll. Per SWITCH sollte ebenfalls eine Zufallsfunktion aufgerufen werden, die eine Zahl bzw. einen Buchstaben zurück liefert.. Per String-Konkatenation sollten die zufälligen Zeichen zusammengesetzt werden.</p>
<h2>Abweichung</h2>
<p>die Aufgabe lässt sich mit VALUE nicht lösen. Stattdessen muss REDUCE genommen werden.</p>
<h2>Code</h2>
<p>Für jede Stelle des zu generierenden Strings (FOR &#8211; UNTIL &#8211; NEXT) wird eine Funktion RND_TYPE aufgerufen. Diese gibt zufällig den Wert TRUE oder FALSE zurück. Per SWITCH-Anweisung wird entschieden, ob eine Zahl (FALSE) oder ein Buchstabe (TRUE) generiert werden soll. Das generierte Zeichen wird per String-Konkatenation Zeichen für Zeichen zusammengebaut.</p>
<p>&nbsp;</p>
<pre class="lang:abap decode:true">REPORT.

CLASS main DEFINITION.
   PUBLIC SECTION.
     DATA rnd_num TYPE REF TO cl_abap_random_int.
     DATA rnd_chr TYPE REF TO cl_abap_random_int.
     METHODS constructor.
     METHODS rnd_type
       RETURNING VALUE(type) TYPE boolean.
     METHODS create_random_string
       IMPORTING max           TYPE i
       RETURNING VALUE(string) TYPE string.
     METHODS get_random_char
       RETURNING VALUE(char) TYPE char01.
     METHODS get_random_number
       RETURNING VALUE(number) TYPE numc01.
 ENDCLASS.

CLASS main IMPLEMENTATION.
   METHOD constructor.
     rnd_chr = cl_abap_random_int=&gt;create( seed = CONV #( sy-uzeit ) min = 0 max = 25 ).
     rnd_num = cl_abap_random_int=&gt;create( seed = CONV #( sy-uzeit ) min = 0 max = 9 ).
   ENDMETHOD.
   METHOD rnd_type.

    type = COND #( LET random = get_random_number( ) IN
                    WHEN random &lt;= 5 THEN abap_true
                    ELSE abap_false ).
   ENDMETHOD.

  METHOD get_random_char.
     DATA(offset) = rnd_num-&gt;get_next( ).
     char = sy-abcde+offset(1).
   ENDMETHOD.

  METHOD get_random_number.
     number = rnd_num-&gt;get_next( ).
   ENDMETHOD.

  METHOD create_random_string.

    string = REDUCE #( INIT text = ``
                        FOR i = 1
                        UNTIL i &gt; max
                        NEXT text = text &amp;&amp; SWITCH #( rnd_type( )
                                              WHEN abap_true  THEN get_random_char( )
                                              WHEN abap_false THEN get_random_number( ) ) ).

  ENDMETHOD.

ENDCLASS.

PARAMETERS p_len type i DEFAULT 10.
PARAMETERS p_str TYPE char20 MODIF ID a.

AT SELECTION-SCREEN OUTPUT.
   LOOP AT SCREEN.
     CASE screen-group1.
       WHEN 'A'.
         screen-input = '0'.
         MODIFY SCREEN.
     ENDCASE.
   ENDLOOP.

AT SELECTION-SCREEN.
   p_str = NEW main( )-&gt;create_random_string( p_len ).</pre>
<h2>Lessons Learned</h2>
<p>Mit REDUCE können Operationen auf einen Datentyp &#8220;reduziert&#8221; werden. Mit VALUE funktioniert das nicht.</p>
<pre class="lang:abap decode:true">string = REDUCE #( INIT text = ``
                   FOR i = 1
                   UNTIL i &gt; max
                   NEXT text = text &amp;&amp; SWITCH #( rnd_type( )
                                         WHEN abap_true  THEN get_random_char( )
                                         WHEN abap_false THEN get_random_number( ) ) ).</pre>
<p>Mit SWITCH können nur Exakte Werte abgefragt werden (wie bei CASE auch mit OR verknüpft). Es sind jedoch keine &#8220;Größer-/ Kleiner-Vergleiche&#8221; möglich.</p>
<pre class="lang:abap decode:true ">[...] SWITCH #( rnd_type( )
        WHEN abap_true  THEN get_random_char( )
        WHEN abap_false THEN get_random_number( ) ) ).</pre>
<p>Mit COND können beliebige Bedingungen geprüft werden. Allerdings muss hier jede Bedingung separat angegeben werden. Wenn der abzufragende Wert das Ergebnis einer Funktion ist, so sollte mit LET gearbeitet werden, um nicht für jede Bedingung die Funktion aufrufen zu müssen.</p>
<pre class="lang:abap decode:true">var = COND #( LET random = get_random_number( ) IN
              WHEN random &lt;= 5 THEN abap_true
              ELSE abap_false ).</pre>
<p>Die implizite Typ-Definition mit INIT (bei der REDUCE-Anweisung) ist mit Vorsicht zu genießen! Ich hatte aus Gewohnheit einen leeren &#8220;String&#8221; mit Hochkomma-Space-Hochkomma definiert. In Wirklichkeit hatte ich damit aber einen CHAR(1)-Feld definiert und die Funktion hat immer nur ein Zeichen zurück geliefert. Die String-Konkatenation hat diesen fest definierten Typ also nicht automatisch erweitert, so wie es beim String der Fall ist. Erst die Verwendung eines <em>echten</em> Strings durch die Backticks &#8220; liefert das gewünschte Ergebnis.</p>
<p>Es kann auch der Typ direkt angegeben werden (INIT text TYPE string) aber dann ist keine Vorbelegung mehr möglich. Eine implizite Definition durch Vorbelegung ist dann jedoch wieder durch die Verwendung von CONV möglich: INIT text = CONV string( &#8216;hallo&#8217; )</p>
<p>Bei der FOR-Funktion (FOR i = 1) muss das Hochzählen der Variable (THEN i + 1) nicht zwingend definiert werden! Wird THEN nicht angegeben, so wird implizit die Inkrementierung um Eins vorgenommen:</p>
<pre class="lang:abap decode:true ">[...] FOR i = 1 UNTIL i &gt; 10 [...]</pre>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/reduce-switch-cond-abap740/">REDUCE + SWITCH + COND [ABAP740]</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>REDUCE ABAP750 FOR x = u IN n = 1 THEN brainf*ck</title>
		<link>/blog/reduce-abap750-for-x-u-in-n-1-then-brainfck/</link>
					<comments>/blog/reduce-abap750-for-x-u-in-n-1-then-brainfck/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 28 Feb 2017 16:18:53 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[abap740]]></category>
		<category><![CDATA[REDUCE]]></category>
		<category><![CDATA[new features]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1017909</guid>

					<description><![CDATA[<p>Hoijoijoi. Ich gebe zu, ich tue mich echt schwer mit den neuen Befehlen im ABAP-Sprachschatz. Besonders die ganz neuen Features im ABAP Release 7.50 (oder 7.40 &#8211; ich blick da nicht mehr durch) fordern mich ziemlich (REDUCE, COND, FILTER etc). Angeregt durch den Artikel von Jerry Wang im neuen SCN über REDUCE habe ich mich mit dem Befehl-REDUCE näher beschäftigt. Über die ABAP-Doku bin ich dann auf die Demoprogramme DEMO_REDUCE* gestolpert und beim DEMO_REDUCE_SIMPLE hängen geblieben....</p>
<p>Der Beitrag <a href="/blog/reduce-abap750-for-x-u-in-n-1-then-brainfck/">REDUCE ABAP750 FOR x = u IN n = 1 THEN brainf*ck</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Hoijoijoi. Ich gebe zu, ich tue mich echt schwer mit den neuen Befehlen im ABAP-Sprachschatz. Besonders die ganz neuen Features im ABAP Release 7.50 (oder 7.40 &#8211; ich blick da nicht mehr durch) fordern mich ziemlich (REDUCE, COND, FILTER etc).</p>
<p>Angeregt durch den Artikel von <a href="https://blogs.sap.com/2017/02/27/functional-programming-try-reduce-in-javascript-and-in-abap/comment-page-1/#comment-365125">Jerry Wang im neuen SCN über REDUCE</a> habe ich mich mit dem Befehl-REDUCE näher beschäftigt. Über die ABAP-Doku bin ich dann auf die Demoprogramme DEMO_REDUCE* gestolpert und beim DEMO_REDUCE_SIMPLE hängen geblieben.</p>
<p>Das Programm ermittelt mit Hilfe des REDUCE-Befehls die Summe von Werten in einer Tabelle. Das Programm DEMO_REDUCE_COND_ITERATION erzeugt mit Hilfe einer FOR-Schleife zusammengesetzte Texte (1 2 3 4 usw).</p>
<p>Ich wollte dann ein bisserl mit den Features herumspielen und hatte die Idee, einen HTML-Text zusammen zusetzen.</p>
<p>Aus der Tabelle</p>
<p>&lt;HTML&gt;<br />
&lt;BODY&gt;<br />
&lt;P&gt;</p>
<p>wollte ich die einzelnen Elemente plus einem separaten Text zu einem String zusammenfügen. Das funktionierte auch noch sehr einfach:</p>
<pre>DATA(text) = REDUCE string(
               INIT html = ``
                FOR command IN html_commands 
                NEXT html = |{ html }{ command }| ) 
            &amp;&amp; 'Hallo Welt'.</span></pre>
<p>Eigentlich nur zum Spaß habe ich versucht, ob ich mit einem erneuten &amp;&amp; auch ein erneutes REDUCE benutzen kann. Obwohl ich einigermaßen überrascht war, dass es anstandslos funktionierte, wäre ich auch maßlos enttäuscht gewesen, wenn es nicht geklappt hätte&#8230; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="😉" class="wp-smiley" style="height: 1em; max-height: 1em;" /></p>
<p>Der nächste Schritt war dann etwas komplizierter: Ich wollte die einzelnen Tags auch wieder schließen. Natürlich in umgekehrter Reihenfolge. Und mit dem SLASH, der ein Ende-Tag anzeigt. Hier brauchte es dann etliche Versuche und verwirrte Blicke in die Doku um zu dem folgenden Ergebnis zu gelangen:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2017/02/2017-02-28_16-53-39.jpg"><img decoding="async" class="size-full wp-image-1017910 alignnone" src="https://tricktresor.com/wp-content/uploads/2017/02/2017-02-28_16-53-39.jpg" alt="" width="450" height="185" srcset="/wp-content/uploads/2017/02/2017-02-28_16-53-39.jpg 450w, /wp-content/uploads/2017/02/2017-02-28_16-53-39-300x123.jpg 300w" sizes="(max-width: 450px) 100vw, 450px" /></a></p>
<p>Und hier der Quelltext dazu:</p>
<pre class="">REPORT zdemo_reduce_simple.

CLASS demo DEFINITION.
  PUBLIC SECTION.
  CLASS-METHODS main.
ENDCLASS.

CLASS demo IMPLEMENTATION.
  METHOD main.

  DATA(html_commands) = VALUE string_table(
                              ( `&lt;html&gt;` )
                              ( `&lt;body&gt;` )
                              ( `&lt;p&gt;` ) ).
  cl_demo_output=&gt;write( html_commands ).


  DATA(text) = REDUCE string(
                INIT html = ``
                 FOR command IN html_commands NEXT html = |{ html }{ command }| )
             &amp;&amp; 'Hallo Welt'
             &amp;&amp; REDUCE string( INIT html = ``
                FOR n = lines( html_commands )
                THEN n - 1
                WHILE n &gt; 0
                 NEXT html = html &amp;&amp; COND #( LET command = html_commands[ n ]
                                              IN WHEN command IS NOT INITIAL
                                                 THEN command(1) &amp;&amp; '/' &amp;&amp; command+1 ) ).

   cl_demo_output=&gt;write( text ).
   cl_demo_output=&gt;display( ).
 ENDMETHOD.

ENDCLASS.

START-OF-SELECTION.
 demo=&gt;main( ).</pre>
<p>Ich lasse es einfach so unkommentiert stehen. Wenn man weiß, was der Ausdruck macht, ist es einigermaßen klar.</p>
<p>Hier der Beitrag von Horst Keller zum Thema ABAP-740 Features: <a href="https://blogs.sap.com/2014/09/30/abap-news-for-740-sp08-iteration-expressions/">https://blogs.sap.com/2014/09/30/abap-news-for-740-sp08-iteration-expressions/</a></p>
<h2>Table Expressions</h2>
<p>Sehr gewöhnungsbedürftig für mich ist der Zusatz um die einzelne Tabellenzeile (die Tabelle hat ja keine Struktur) anzusprechen:</p>
<pre class="">COND #( LET command = html_commands[ n ]
         IN WHEN command IS NOT INITIAL
            THEN command(1) &amp;&amp; '/' &amp;&amp; command+1 )</pre>
<p>Mein erster Ansatz war Folgendes (was aber nicht funktionierte):</p>
<pre class="">html_commands[ n ]-TABLE_LINE</pre>
<p>Also bin ich zum COND-Ausdruck gekommen. Hier finde ich verwirrend, dass anscheinend zwingend eine WHEN-Klausel angegeben werden muss. Vielleicht gibt es auch eine einfachere Alternative?! Bestimmt. Lasst es mich gerne wissen.</p>
<p>Link zur Horst Kellers Blog: <a href="https://blogs.sap.com/2013/05/29/abap-news-for-release-740-table-expressions/">https://blogs.sap.com/2013/05/29/abap-news-for-release-740-table-expressions/</a></p>
<p>&nbsp;</p>
<p>Ein komisches Gefühl, auf ein mal wieder Anfänger zu sein&#8230;</p>
<p>Der guten alten Zeiten Willen noch mal das Coding mit ABAPvor740. Viel Länger ist es auch nicht. Und ob die Programmierung mit ABAP740 eleganter oder besser ist, wage ich zu bezweifeln.</p>
<pre class="">DATA text TYPE string.
LOOP AT html_commands INTO DATA(command).
  text = text &amp;&amp; command.
ENDLOOP.
text = text &amp;&amp; 'Hallo Welt'.

DATA line TYPE i.
line = lines( html_commands ).
DO lines( html_commands ) TIMES.
  DATA(cmd) = html_commands[ line ].
  text = text &amp;&amp; cmd(1) &amp;&amp; '/' &amp;&amp; cmd+1.
  SUBTRACT 1 FROM line.
ENDDO.</pre>
<p>Der Beitrag <a href="/blog/reduce-abap750-for-x-u-in-n-1-then-brainfck/">REDUCE ABAP750 FOR x = u IN n = 1 THEN brainf*ck</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/reduce-abap750-for-x-u-in-n-1-then-brainfck/feed/</wfw:commentRss>
			<slash:comments>5</slash:comments>
		
		
			</item>
		<item>
		<title>Debugger-Scripting (1)</title>
		<link>/blog/debugger-scripting-1/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 03 Dec 2015 17:14:08 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP 740]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[Debugger]]></category>
		<category><![CDATA[break-point]]></category>
		<category><![CDATA[abap740]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=367679</guid>

					<description><![CDATA[<p>Es passiert des Öfteren, dass einem Authority-Checks in den Weg geworfen werden. Einem einzelnen kann man schnell Herr werden, in dem man sich einen Break-Point auf die Anweisung "AUTHORITY-CHECK" setzt, F5 (Einzelschritt) drückt, den SY-SUBRC auf "0" ändert und dann weiter macht. Aber bei vielen...?!</p>
<p>Der Beitrag <a href="/blog/debugger-scripting-1/">Debugger-Scripting (1)</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Lange habe ich mich vor den umfangreichen Funktionen es Debugger-Scripting gedrückt. Durch das sensationelle Buch von <a href="http://amzn.to/1lttbu9" target="_blank">Paul Harding &#8220;ABAP To The Future&#8221;</a> habe ich mich nun endlich getraut.</p>
<h2>Mein erstes Debugger-Skript</h2>
<p>Es passiert des Öfteren, dass einem Authority-Checks in den Weg geworfen werden. Einem einzelnen kann man schnell Herr werden, in dem man sich einen Break-Point auf die Anweisung &#8220;AUTHORITY-CHECK&#8221; setzt, F5 (Einzelschritt) drückt, den SY-SUBRC auf &#8220;0&#8221; ändert und dann weiter macht.</p>
<p>Wenn es mehrere Checks sind, kann es schnell nerven.</p>
<p>Mein erstes Debugger-Skript habe ich genau hierfür geschrieben. Es macht genau das, was ich eben beschrieben habe.</p>
<pre>METHOD script.

  debugger_controller-&gt;debug_step( 
       p_command = cl_tpda_script_debugger_ctrl=&gt;debug_step_over ).

  cl_tpda_script_data_descr=&gt;change_value(
         p_new_value = '4'
         p_varname = 'SY-SUBRC' ).

ENDMETHOD. "script</pre>
<p>Damit das Skript funktioniert, musst du an geeigneter Stelle den Debugger anschalten (/h, geht auch vor dem Aufruf einer Transaktion!!) und zum Tab &#8220;Script&#8221; wechseln.</p>
<p>Dort setzt du einen Break-Point bei der Anweisung AUTHORITY-CHECK:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-03_17-55-27.jpg"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-370544" src="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-03_17-55-27-300x238.jpg" alt="2015-12-03_17-55-27" width="300" height="238" srcset="/wp-content/uploads/2015/12/2015-12-03_17-55-27-300x238.jpg 300w, /wp-content/uploads/2015/12/2015-12-03_17-55-27.jpg 820w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Dann musst du nur noch das oben vorgestellte Coding in der Methode SCRIPT einfügen.</p>
<p>&#8220;Skript starten&#8221; und auf einmal werden alle Berechtigungsprüfungen wahr&#8230;</p>
<h2>Leider&#8230;</h2>
<p>funktioniert der Trace bei dieser Methode nicht. Normalerweise kann man das aktuelle Ereignis tracen:</p>
<pre>trace-&gt;add_src_info( ).</pre>
<p>Entweder ist ein AUTHORITY-CHECK kein Ereignis, oder es funktioniert aus anderen Gründen nicht.</p>
<p>Wahrscheinlich letzteres, denn auch ein eigener Eintrag in den Trace bleibt erfolglos:</p>
<pre> DATA trace_entry TYPE tpda_trace_custom.
 trace_entry-value = 'hier steht was...'.
 trace-&gt;add_custom_info( p_trace_entry = trace_entry ).</pre>
<p>Wer hier noch Tipps hat: Immer her damit in die Kommentare!</p>
<h2>Wizard</h2>
<p>Wer das Debugger-Skripting weiter erforschen möchte, kann das sehr komfortabel über den Wizard machen:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-03_18-01-43.jpg"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-370545" src="https://tricktresor.com/wp-content/uploads/2015/12/2015-12-03_18-01-43-247x300.jpg" alt="2015-12-03_18-01-43" width="247" height="300" srcset="/wp-content/uploads/2015/12/2015-12-03_18-01-43-247x300.jpg 247w, /wp-content/uploads/2015/12/2015-12-03_18-01-43.jpg 461w" sizes="(max-width: 247px) 100vw, 247px" /></a></p>
<p>Alle möglichen Befehle werden hier als Muster eingefügt. Alle möglichen Konstanten, die in diesem Zusammenhang möglich sind, werden als Kommentar eingebunden:</p>
<pre>*************************************************
* debugger commands (p_command):
* Step into(F5) -&gt; CL_TPDA_SCRIPT_DEBUGGER_CTRL=&gt;DEBUG_STEP_INTO
* Execute(F6) -&gt; CL_TPDA_SCRIPT_DEBUGGER_CTRL=&gt;DEBUG_STEP_OVER
* Return(F7) -&gt; CL_TPDA_SCRIPT_DEBUGGER_CTRL=&gt;DEBUG_STEP_OUT
* Continue(F8) -&gt; CL_TPDA_SCRIPT_DEBUGGER_CTRL=&gt;DEBUG_CONTINUE
*************************************************
****************************************************************
*Interface (CLASS = CL_TPDA_SCRIPT_DEBUGGER_CTRL / METHOD = DEBUG_STEP )
*Importing
* REFERENCE( P_COMMAND ) TYPE I
****************************************************************

*TRY.
DEBUGGER_CONTROLLER-&gt;DEBUG_STEP( P_COMMAND = P_COMMAND ).
* CATCH cx_tpda_scr_rtctrl_status .
* CATCH cx_tpda_scr_rtctrl .
*ENDTRY.</pre>
<h2>Speichern &amp; Laden</h2>
<p>Die Skripts können &#8211; inklusive erstellter Breakpoints!! &#8211; gespeichert werden. Entweder direkt im System im ABAP-Repository oder lokal auf dem Rechner.</p>
<p>Da es sich bei den Skripten um &#8220;normale&#8221; Programme handelt (Programmtyp &#8220;Subroutinenpool&#8221;), ist es sinnvoll, sich an Namenskonventionen zu halten. Alle SAP-eigenen vorgefertigten Skripte beginnen mit &#8220;RSTPDA_SCRIPT&#8221;.</p>
<p>Der Beitrag <a href="/blog/debugger-scripting-1/">Debugger-Scripting (1)</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
