<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>todo Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/todo/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 12 Sep 2017 09:24:56 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>todo Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>What todo?</title>
		<link>/blog/what-todo/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 08 May 2015 06:00:00 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[Code Inspector]]></category>
		<category><![CDATA[ci]]></category>
		<category><![CDATA[todo]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[verwendungsnachweis]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=73938</guid>

					<description><![CDATA[<p>Aufgaben und Todos verwalten - gerade in einem Team - kann anstrengend sein. Hier verrate ich dir eine Methode, wie du TODO's einfach im ABAP-Quelltext kennzeichnest.</p>
<p>Der Beitrag <a href="/blog/what-todo/">What todo?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Bei der Programmierung, beim Debuggen, Testen und bei der Durchsicht von Programmen stolpere ich häufig über Ungereimtheiten, offensichtliche Fehler, Dinge, die verbessert werden können, unzureichendes Fehlerhandling und so weiter.</p>
<p>Da diese Dinge zwar geändert werden sollten, aber aktuell nicht im Fokus stehen, habe ich mir eine einfache aber recht wirkungsvolle Methode ausgedacht, diese Programmstellen zu kennzeichnen.</p>
<h2>TODO</h2>
<p>Ich lege eine Klasse ZCL_TODO an mit den statischen Methoden FRAGE, WICHTIG und ACHTUNG. Alle Methoden haben die Importing-Parameter WER (Optional) und WAS (preferred parameter).</p>
<p>Die Methoden haben keinen Quelltext. Dieser ist auch nicht nötig, denn die Methoden sollen lediglich als Merker für später dienen. Wenn ich z.B. im aktuellen Programm darüber stolpere, warum der ELSE-Zweig nicht prozessiert wird, dann schreibe ich an diese Stelle:</p>
<pre>ZCL_TODO=&gt;FRAGE( 'Was ist mit ELSE?' ).</pre>
<p>Wenn ich bemerke, dass ein Funktionsaufruf falsch oder unvollständig ist, dann schreibe ich:</p>
<pre>ZCL_TODO=&gt;WICHTIG( wer = 'Enno' was = 'Parameter xyz prüfen! ).</pre>
<h2>Verwendungsnachweis</h2>
<p>Das schöne an dieser Lösung ist, dass man mithilfe des Verwendungsnachweises für die Klasse ZCL_TODO sofort sehen kann, was man sich gerne merken wollte und was noch zu tun ist. Und das alles ohne großartige Hilfsmittel, Listen oder Dokumentationen.</p>
<p>Am besten eignet es sich für größere Programmierprojekte und Objekte, die aktuell bearbeitet werden. Wenn das Objekt gerade gar nicht in Bearbeitung ist, muss zur Quelltextänderung natürlich ein Transportauftrag angelegt werden. Aber auch das ist nicht weiter schlimm; dann hat derjenige, der das Objekt später ändern muss den schwarzen Peter. Hier muss selbstverständlich aufgepasst werden, dass der Entwickler mitbekommt, dass dieses Objekt nicht in seinen Transportauftrag übernommen wird. Diese wird deutlich dadurch, dass eine Meldung &#8220;Zu Auftrag 123 wurde eine Aufgabe hinzugefügt&#8221; (oder so ähnlich) erscheint.</p>
<h2>Code Inspector</h2>
<p>Um sicher zu gehen, dass Änderungen auch tatsächlich gemacht werden, kann der Code Inspector bemüht werden. Hier kann man die Prüfung auf Suchmuster entsprechend einstellen, dass der String &#8220;ZCL_TODO&#8221; einen Fehler auswirft. Wenn man jetzt noch einstellt, dass bei Freigabe des Transportauftrags die Code-Inspector-Prüfungen laufen, kann eigentlich nichts mehr schief gehen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/05/2015-05-07_18-55-29.png"><img fetchpriority="high" decoding="async" class="alignnone size-medium wp-image-74016" src="https://tricktresor.com/wp-content/uploads/2015/05/2015-05-07_18-55-29-300x214.png" alt="2015-05-07_18-55-29" width="300" height="214" srcset="/wp-content/uploads/2015/05/2015-05-07_18-55-29-300x214.png 300w, /wp-content/uploads/2015/05/2015-05-07_18-55-29.png 691w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Der Beitrag <a href="/blog/what-todo/">What todo?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
