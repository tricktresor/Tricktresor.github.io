<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>Befehlsverkettung Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/befehlsverkettung/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 12 Sep 2017 09:24:54 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>Befehlsverkettung Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Smart Filter</title>
		<link>/blog/smart-filter/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 17 Nov 2015 16:47:07 +0000</pubDate>
				<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[salv]]></category>
		<category><![CDATA[Filter]]></category>
		<category><![CDATA[Befehlsverkettung]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=345381</guid>

					<description><![CDATA[<p>Vor einiger Zeit habe ich euch den Magic Filter vorgestellt. Hier habe ich den aktuellen Filter eines Grids auf mehrere Objekte angewendet.</p>
<p>Heute möchte ich euch eine weitere Möglichkeit der Filterung vorstellen: Die Filterung anhand einer Mehrfachselektion. Damit es ins Konzept passt und weil jedes Kind einen Namen braucht, habe ich es Smart Filter genannt.</p>
<p>Der Beitrag <a href="/blog/smart-filter/">Smart Filter</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Vor einiger Zeit habe ich euch den <a href="https://tricktresor.com/blog/magic-filter/">Magic Filter</a> vorgestellt. Hier habe ich den aktuellen Filter eines Grids auf mehrere Objekte angewendet.</p>
<p>Heute möchte ich euch eine weitere Möglichkeit der Filterung vorstellen: Die Filterung anhand einer Mehrfachselektion. Damit es ins Konzept passt und weil jedes Kind einen Namen braucht, habe ich es <em>Smart Filter</em> genannt.</p>
<h2>Smart Filter: Anwendung</h2>
<p>Am Anfang war das Grid (oder genauer: Der SALV-Table). Als Beispieldaten dienen die Länderbezeichnungen.</p>
<p>Das Grid besitzt eine selbst definierte Funktion &#8220;Filter&#8221;:</p>
<p><img fetchpriority="high" decoding="async" class="alignnone wp-image-345382 size-full" src="https://tricktresor.com/wp-content/uploads/2015/11/filter_sel1.png" alt="filter_sel1" width="538" height="275" srcset="/wp-content/uploads/2015/11/filter_sel1.png 538w, /wp-content/uploads/2015/11/filter_sel1-300x153.png 300w" sizes="(max-width: 538px) 100vw, 538px" /></p>
<p>Um diese Funktion zu verwenden, müssen mindestens eine Zeile und mindestens eine Spalte markiert werden (STRG gedrückt halten für Mehrfachselektion!):</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/11/filter_sel2.png"><img decoding="async" class="alignnone wp-image-345383 size-full" src="https://tricktresor.com/wp-content/uploads/2015/11/filter_sel2.png" alt="filter_sel2" width="522" height="213" srcset="/wp-content/uploads/2015/11/filter_sel2.png 522w, /wp-content/uploads/2015/11/filter_sel2-300x122.png 300w" sizes="(max-width: 522px) 100vw, 522px" /></a></p>
<p>Mit einem Klick auf &#8220;Filter&#8221; wird dann die &#8220;Schnittmenge&#8221; gefiltert:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/11/filter_sel3.png"><img decoding="async" class="alignnone wp-image-345384 size-full" src="https://tricktresor.com/wp-content/uploads/2015/11/filter_sel3.png" alt="filter_sel3" width="534" height="192" srcset="/wp-content/uploads/2015/11/filter_sel3.png 534w, /wp-content/uploads/2015/11/filter_sel3-300x108.png 300w" sizes="(max-width: 534px) 100vw, 534px" /></a></p>
<p>Die Anwendungsmöglichkeiten sind sicherlich beschränkt, aber bei größeren Listen, die anhand bestimmter Felder und Feldwerte kontrolliert werden müssen, sicherlich sehr hilfreich.</p>
<h2>Anmerkungen zum Code</h2>
<p>Da der zusätzliche Button in dieser Variante nicht im Fullscreen-Grid funktioniert, muss die Darstellung in einem Docking-Container erfolgen.</p>
<p>Um dies einfach zu tun, habe ich den PARAMETER <em>dummy</em> verwendet, damit ein Selektionsbild angezeigt wird.</p>
<p>Mit Druck auf die Enter-Taste wird das Grid angezeigt.</p>
<p>Um den Zusatzbutton anzuzeigen, wird <em>Command Chaining</em> verwendet:</p>
<pre>mr_salv-&gt;get_functions( )-&gt;add_function( ... )</pre>
<h2>Code</h2>
<pre>REPORT.

PARAMETERS dummy.

*----------------------------------------------------------------------*
* CLASS lcl_grid DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_grid DEFINITION.
 PUBLIC SECTION.
 CLASS-METHODS start.
 PROTECTED SECTION.
 CLASS-DATA mt_data TYPE STANDARD TABLE OF t005t.
 CLASS-DATA mr_salv TYPE REF TO cl_salv_table.
 CLASS-METHODS add_filter_value
 IMPORTING
 structure TYPE any
 fieldname TYPE fieldname
 CHANGING
 filter TYPE lvc_t_filt.
 CLASS-METHODS add_filter_selection.
 CLASS-METHODS set_filter
 IMPORTING
 filter TYPE lvc_t_filt.
 CLASS-METHODS add_function.
 CLASS-METHODS on_function FOR EVENT added_function
 OF cl_salv_events_table
 IMPORTING e_salv_function.


ENDCLASS. "lcl_grid DEFINITION

*----------------------------------------------------------------------*
* CLASS lcl_grid IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_grid IMPLEMENTATION.
 METHOD start.

*== Daten lesen
 SELECT * FROM t005t INTO TABLE mt_data.

*== Docker erzeugen
 DATA lr_docker TYPE REF TO cl_gui_docking_container.
 CREATE OBJECT lr_docker
 EXPORTING
 side = cl_gui_docking_container=&gt;dock_at_bottom
 ratio = 80.

*== SALV-Table erzeugen
 CALL METHOD cl_salv_table=&gt;factory
 EXPORTING
 r_container = lr_docker
 IMPORTING
 r_salv_table = mr_salv
 CHANGING
 t_table = mt_data.

*== alle Funktionen einblenden, um Filter löschen zu können
 DATA lr_funcs TYPE REF TO cl_salv_functions_list.
 lr_funcs = mr_salv-&gt;get_functions( ).
 lr_funcs-&gt;set_all( ).
*== Eigene Funktion einblenden
 add_function( ).

*== ON_Usercommand registrieren
 DATA lr_events TYPE REF TO cl_salv_events_table.
 lr_events = mr_salv-&gt;get_event( ).
 SET HANDLER on_function FOR lr_events.

*== Anzeige
 mr_salv-&gt;display( ).

 ENDMETHOD. "start

 METHOD add_function.

*== Eigene Funktion einfügen
 mr_salv-&gt;get_functions( )-&gt;add_function(
 name = 'ZFilterSel'
 icon = |{ icon_filter }|
 text = |Filter|
 tooltip = |Filter anhand Selektion|
 position = if_salv_c_function_position=&gt;right_of_salv_functions ).

 ENDMETHOD. "add_function

 METHOD on_function.

 CASE e_salv_function.
 WHEN 'ZFilterSel'.
*== Filter anhand Selektion setzen
 add_filter_selection( ).
 ENDCASE.

 ENDMETHOD. "on_function

 METHOD add_filter_value.

 DATA ls_filter TYPE lvc_s_filt.
 FIELD-SYMBOLS &lt;value&gt; TYPE any.

*== Filterzeile hinzufügen
 ls_filter-fieldname = fieldname.
 ls_filter-sign = 'I'.
 ls_filter-option = 'EQ'.
 ASSIGN COMPONENT fieldname OF STRUCTURE structure TO &lt;value&gt;.
 IF sy-subrc = 0.
 ls_filter-low = &lt;value&gt;.
 SHIFT ls_filter-low LEFT DELETING LEADING space.
 READ TABLE filter WITH KEY fieldname = ls_filter-fieldname
 sign = ls_filter-sign
 option = ls_filter-option
 low = ls_filter-low
 TRANSPORTING NO FIELDS.
 IF sy-subrc &gt; 0.
 APPEND ls_filter TO filter.
 ENDIF.
 ENDIF.

 ENDMETHOD. "add_filter_field

 METHOD add_filter_selection.

*== Lokale Daten
 DATA lt_filter TYPE lvc_t_filt.

 DATA lt_rows TYPE salv_t_row.
 FIELD-SYMBOLS &lt;row&gt; LIKE LINE OF lt_rows..
 DATA lt_cols TYPE salv_t_column.
 FIELD-SYMBOLS &lt;col&gt; LIKE LINE OF lt_cols.
 DATA lr_selection TYPE REF TO cl_salv_selections.

 FIELD-SYMBOLS &lt;table_line&gt; TYPE any.


*== Selektierte Spalten und Zeilen ermitteln
 lr_selection = mr_salv-&gt;get_selections( ).
 lt_rows = lr_selection-&gt;get_selected_rows( ).
 lt_cols = lr_selection-&gt;get_selected_columns( ).

*== Filter anhand der aktuellen Selektion setzen
 LOOP AT lt_rows ASSIGNING &lt;row&gt;.
 IF sy-subrc = 0.
 READ TABLE mt_data ASSIGNING &lt;table_line&gt; INDEX &lt;row&gt;.
 IF sy-subrc = 0.
 LOOP AT lt_cols ASSIGNING &lt;col&gt;.
 add_filter_value( EXPORTING structure = &lt;table_line&gt; fieldname = &lt;col&gt;
 CHANGING filter = lt_filter ).

 ENDLOOP.
 ENDIF.
 ENDIF.
 ENDLOOP.

*== Filter setzen
 set_filter( filter = lt_filter ).

 ENDMETHOD. "add_filter_selection

 METHOD set_filter.

*== Filter auf SAL-Table anwenden
 DATA lv_index TYPE i.
 DATA lr_display TYPE REF TO cl_salv_display_settings.
 DATA lv_title TYPE lvc_title.
 FIELD-SYMBOLS &lt;filter&gt; TYPE lvc_s_filt.

 cl_salv_controller_metadata=&gt;set_lvc_filter( t_filter = filter
 r_filters = mr_salv-&gt;get_filters( ) ).
 lr_display = mr_salv-&gt;get_display_settings( ).

 LOOP AT filter ASSIGNING &lt;filter&gt;.
 IF lv_title IS INITIAL.
 lv_title = &lt;filter&gt;-fieldname.
 ELSE.
 CONCATENATE '/' &lt;filter&gt;-fieldname INTO lv_title.
 ENDIF.
 ENDLOOP.

 CONCATENATE 'Filter ist aktiv (' lv_title ')' INTO lv_title .

 lr_display-&gt;set_list_header( lv_title ).

 mr_salv-&gt;refresh( ).
 ENDMETHOD. "set_filter

ENDCLASS. "lcl_grid IMPLEMENTATION

AT SELECTION-SCREEN.

 lcl_grid=&gt;start( ).</pre>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/smart-filter/">Smart Filter</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Befehlsverkettung &#8211; Don&#8217;t try this at home!</title>
		<link>/blog/befehlsverkettung-dont-try-this-at-home/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Sat, 14 Nov 2015 09:00:00 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP 740]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[salv]]></category>
		<category><![CDATA[Befehlsverkettung]]></category>
		<category><![CDATA[cl_salv]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=339017</guid>

					<description><![CDATA[<p>Eine kleine Spielerei mit funktionalen Aufrufen. Ich wollte wissen, ob man die Erzeugung eines SALV-Tables plus Anzeige in einen funktionalen Aufruf schreiben kann. Geklappt hat es nicht 100%ig, aber trotzdem interessant. Nicht zur Nachahmung geeignet. </p>
<p>Der Beitrag <a href="/blog/befehlsverkettung-dont-try-this-at-home/">Befehlsverkettung &#8211; Don&#8217;t try this at home!</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Den CL_SALV_TABLE kann man leider nicht &#8220;elegant&#8221; erzeugen. Darunter verstehe ich, dass man die SALV-Referenz per RECEIVING bekommt. Sobald ein Exporting- oder Changing-Parameter in der Methode verwendet wird, kann RETURNING nicht mehr benutzt werden.</p>
<p>Der Aufruf ist zwar kompakt:</p>
<pre>CALL METHOD cl_salv_table=&gt;factory
 EXPORTING
 r_container = gr_dock
 IMPORTING
 r_salv_table = gr_salv
 CHANGING
 t_table = gt_data.
gr_salv-&gt;display( ).</pre>
<p>aber man kann ihn nicht wie folgt verwenden:</p>
<pre>cl_salv_table=&gt;factory( ... )-&gt;display( ).</pre>
<p>Ich wollte nun wissen, ob man die Erzeugung eines SALV-Tables plus Anzeige trotzdem in einen funktionalen Aufruf schreiben kann. Geklappt hat es zwar, jedoch wiederum mit einem Nachteil.</p>
<h2>Befehlsverkettung</h2>
<p>Methoden von durch RETURNING übergebenen Objektreferenzen können direkt durch Befehlsverkettung ausgeführt werden.</p>
<p>Dazu ein kleines Testprogramm mit einer FACTORY-Methode:</p>
<pre>*----------------------------------------------------------------------*
* CLASS lcl_test DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_test DEFINITION.
 PUBLIC SECTION.
 CLASS-METHODS factory RETURNING value(object) TYPE REF TO lcl_test.
 METHODS show.
ENDCLASS. "lcl_salv DEFINITION

*----------------------------------------------------------------------*
* CLASS lcl_salv IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_test IMPLEMENTATION.
 METHOD factory.
 CREATE OBJECT object.
 ENDMETHOD. "factory

 METHOD show.
 MESSAGE 'Hallo' TYPE 'I'.
 ENDMETHOD. "show

ENDCLASS. "lcl_test IMPLEMENTATION</pre>
<p>Normalerweise würde man die Methode SHOW folgendermaßen aufrufen:</p>
<pre>DATA lr_test TYPE REF TO lcl_test.
lr_test = lcl_test=&gt;factory( ).
lr_test-&gt;show( ).</pre>
<p>Durch Verwendung einer Befehlsverkettung kann der Aufruf wie folgt aussehen:</p>
<pre>lcl_test=&gt;factory( )-&gt;show( ).</pre>
<p>In diesem Umfang ist die Befehlsverkettung auch vertretbar. Sie kann jedoch Auswüchse annehmen, die ich nicht mehr warten möchte&#8230;</p>
<h2>CL_SALV_TABLE</h2>
<p>Zurück zum meinem eigentlich Problem: Die Anzeige des SALV-Grid mit einem Aufruf. Hindernis dabei ist, dass die SALV-Referenz eben nicht per RETURNING zurück gegeben wird, sondern als IMPORTING-Parameter.</p>
<p>Ich schrieb also ein kleines Wrapper-Programm. Ich habe die Übergabe der einzelnen Parameter in einzelne Methoden ausgelagert um diese nacheinander &#8220;funktional&#8221; aufrufen zu können. Dafür muss die eigene Instanz jeweils an den Aufrufer übergeben werden.</p>
<p>Auch dabei musste ich tricksen, denn die anzuzeigende Tabelle kann nicht als CHANGING übergeben werden. Ich musste deswegen mit einer Referenz auf die Tabelle arbeiten.</p>
<pre> DATA gd_table TYPE REF TO data.
 GET REFERENCE OF gt_data INTO gd_table.</pre>
<p>Dadurch erreiche ich natürlich nicht das, was ich eigentlich wollte, nämlich <strong>einen</strong> kompakten Methodenaufruf. Immerhin: Der Aufruf sieht nun wirklich interessant aus:</p>
<pre>lcl_salv=&gt;factory( )-&gt;set_table( gd_table )-&gt;create_grid( )-&gt;display( ).</pre>
<p>DISPLAY ist hierbei bereits die Methode des SALV-Table, die durch CREATE_GRID erzeugt wird!</p>
<p>Sicherlich nicht elegant, aber es lässt sich gut demonstrieren, wie die funktionalen Aufrufe funktionieren.</p>
<p>Diese Methode ist selbstverständlich nur dann sinnvoll, wenn man sicher ist, dass man das SALV-Objekt nicht mehr benötigt, denn bei diesem Aufruf erzeugt man das Objekt, benutzt es, aber die Referenz darauf ist sofort wieder weg.</p>
<h2>Code</h2>
<pre>*----------------------------------------------------------------------*
* CLASS lcl_salv DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_salv DEFINITION.
 PUBLIC SECTION.
 DATA mt_table TYPE REF TO data.
 CLASS-METHODS factory RETURNING value(object) TYPE REF TO lcl_salv.
 METHODS create_grid RETURNING value(salv) TYPE REF TO cl_salv_table.
 METHODS set_table IMPORTING table TYPE REF TO data
 RETURNING value(object) TYPE REF TO lcl_salv.
ENDCLASS. "lcl_salv DEFINITION

*----------------------------------------------------------------------*
* CLASS lcl_salv IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_salv IMPLEMENTATION.
 METHOD factory.
 create object object.
 ENDMETHOD. "factory

 METHOD create_grid.

 FIELD-SYMBOLS &lt;table&gt; TYPE ANY TABLE.
 ASSIGN mt_table-&gt;* TO &lt;table&gt;.

 CALL METHOD cl_salv_table=&gt;factory
 IMPORTING
 r_salv_table = salv
 CHANGING
 t_table = &lt;table&gt;.

 ENDMETHOD. "factory

 METHOD set_table.
 mt_table = table.
 object = me.
 ENDMETHOD. "set_table
ENDCLASS. "lcl_salv IMPLEMENTATION</pre>
<p>Der Beitrag <a href="/blog/befehlsverkettung-dont-try-this-at-home/">Befehlsverkettung &#8211; Don&#8217;t try this at home!</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
