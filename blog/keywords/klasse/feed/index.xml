<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>klasse Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/klasse/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Wed, 14 Sep 2022 12:54:10 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>klasse Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Welche Redefinitionen gibt es?</title>
		<link>/blog/welche-redefinitionen-gibt-es/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 26 Jun 2018 15:50:15 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[cl_salv_table]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[Methode]]></category>
		<category><![CDATA[Redefinition]]></category>
		<category><![CDATA[cl_oo_class]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1018881</guid>

					<description><![CDATA[<p>In einem Projekt habe ich viel mit einer Superklasse und vielen Vererbungen gearbeitet. Die Superklasse besitzt sozusagen die Standardimplementierung für die einzelnen Funktionen und die Unterklassen können das Verhalten durch Redefinition ändern, wenn es erforderlich ist. mit der Zeit sind viele Unterklassen zusammen gekommen. Das Konzept hat sich gut bewährt. Allerdings stellt sich nun das Problem, dass ich bei einer neuen Klasse nicht mehr wusste, bei welcher anderen Unterklasse es eine Abweichung zum Standard gibt....</p>
<p>Der Beitrag <a href="/blog/welche-redefinitionen-gibt-es/">Welche Redefinitionen gibt es?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>In einem Projekt habe ich viel mit einer Superklasse und vielen Vererbungen gearbeitet. Die Superklasse besitzt sozusagen die Standardimplementierung für die einzelnen Funktionen und die Unterklassen können das Verhalten durch Redefinition ändern, wenn es erforderlich ist.</p>
<p>mit der Zeit sind viele Unterklassen zusammen gekommen. Das Konzept hat sich gut bewährt. Allerdings stellt sich nun das Problem, dass ich bei einer neuen Klasse nicht mehr wusste, bei welcher anderen Unterklasse es eine Abweichung zum Standard gibt. Um das herauszubekommen musste ich jede einzelne Klasse anklicken, die Methodenliste herunter scrollen, die entsprechende Methode finden und schauen ob und wie die Redefinition aussah.</p>
<p>Für einen Programmierer natürlich ein nicht zu tolerierendes Vorgehen! 8)</p>
<h2>Finde Redefinitionen!</h2>
<p>Der unten stehende Report nutzt die Klasse CL_OO_CLASS um die Subklassen zu ermitteln. In den Redefinition der Subklasse wird nach der vorgegebenen Methode gesucht. Ist diese vorhanden, also redefiniert, dann wird sie in der Liste ausgegeben.</p>
<p>Mit einem Doppelklick auf eine Methode wird der Quelltext im Docker angezeigt. Zur Anzeige des Quelltextes wird die Klasse CL_GUI_ABAPEDIT verwendet.</p>
<p><a class="keychainify-checked" href="https://tricktresor.com/wp-content/uploads/2018/06/redef1.png"><img fetchpriority="high" decoding="async" class="alignnone size-large wp-image-1018882" src="https://tricktresor.com/wp-content/uploads/2018/06/redef1-1024x648.png" alt="" width="640" height="405" srcset="/wp-content/uploads/2018/06/redef1-1024x648.png 1024w, /wp-content/uploads/2018/06/redef1-300x190.png 300w, /wp-content/uploads/2018/06/redef1-768x486.png 768w, /wp-content/uploads/2018/06/redef1-174x111.png 174w, /wp-content/uploads/2018/06/redef1.png 1179w" sizes="(max-width: 640px) 100vw, 640px" /></a></p>
<h2>Coding</h2>
<pre class="lang:abap decode:true ">REPORT ztrcktrsr_find_redefinitions.

<!--StartFragment --><span class="L0S52">DATA </span>gv_clsname         <span class="L0S52">TYPE </span>seoclsname<span class="L0S55">.</span>
<span class="L0S52">DATA </span>gv_cpdname         <span class="L0S52">TYPE </span>seocpdname<span class="L0S55">.</span>
<span class="L0S52">DATA </span>gt_dynp            <span class="L0S52">TYPE </span><span class="L0S52">TABLE </span><span class="L0S52">OF </span>dynpread <span class="L0S52">WITH </span><span class="L0S52">DEFAULT </span><span class="L0S52">KEY</span><span class="L0S55">.</span> 

PARAMETERS p_clas TYPE seoclsname DEFAULT 'CL_GUI_CONTROL'.
PARAMETERS p_meth TYPE seocpdname DEFAULT 'FREE'.

<!--StartFragment --><span class="L0S52">AT </span><span class="L0S52">SELECTION-SCREEN </span><span class="L0S52">ON </span><span class="L0S52">VALUE-REQUEST </span><span class="L0S52">FOR </span>p_clas<span class="L0S55">.</span>

  <span class="L0S52">CALL </span><span class="L0S52">FUNCTION </span><span class="L0S33">'SEOM_OO_PATTERN_SELECTION'</span>
    <span class="L0S52">IMPORTING</span>
      clsname             <span class="L0S55">= </span>gv_clsname
      cpdname             <span class="L0S55">= </span>gv_cpdname
    <span class="L0S52">EXCEPTIONS</span>
      selection_cancelled <span class="L0S55">= </span><span class="L0S32">1</span>
      <span class="L0S52">OTHERS              </span><span class="L0S55">= </span><span class="L0S32">2</span><span class="L0S55">.</span>
  <span class="L0S52">IF </span>sy<span class="L0S70">-</span>subrc <span class="L0S55">= </span><span class="L0S32">0</span><span class="L0S55">.</span>
    p_clas <span class="L0S55">= </span>gv_clsname<span class="L0S55">.</span>
    gt_dynp <span class="L0S55">= </span><span class="L0S52">VALUE </span>#<span class="L0S55">( </span><span class="L0S55">( </span>fieldname <span class="L0S55">= </span><span class="L0S33">'P_METH' </span>fieldvalue <span class="L0S55">= </span>gv_cpdname <span class="L0S55">) </span><span class="L0S55">)</span><span class="L0S55">.</span>
    <span class="L0S52">CALL </span><span class="L0S52">FUNCTION </span><span class="L0S33">'DYNP_VALUES_UPDATE'</span>
      <span class="L0S52">EXPORTING</span>
        dyname     <span class="L0S55">= </span>sy<span class="L0S70">-</span>cprog
        dynumb     <span class="L0S55">= </span>sy<span class="L0S70">-</span>dynnr
      <span class="L0S52">TABLES</span>
        dynpfields <span class="L0S55">= </span>gt_dynp
      <span class="L0S52">EXCEPTIONS</span>
        <span class="L0S52">OTHERS     </span><span class="L0S55">= </span><span class="L0S32">8</span><span class="L0S55">.</span>
    <span class="L0S52">IF </span>sy<span class="L0S70">-</span>subrc &lt;&gt; <span class="L0S32">0</span><span class="L0S55">.</span>
      p_meth <span class="L0S55">= </span>gv_cpdname<span class="L0S55">.</span>
    <span class="L0S52">ENDIF</span><span class="L0S55">.</span>
  <span class="L0S52">ENDIF</span><span class="L0S55">.</span> 
CLASS lcl_main DEFINITION.
  PUBLIC SECTION.
    METHODS on_double_click
                  FOR EVENT double_click OF cl_salv_events_table
      IMPORTING row column.
    METHODS docker.
    METHODS display.
    METHODS do
      IMPORTING
        i_class  TYPE clike
        i_method TYPE clike
        i_start  TYPE boolean_flg.
  PROTECTED SECTION.
    DATA mt_redef     TYPE STANDARD TABLE OF seoredef.
    DATA mo_docker    TYPE REF TO cl_gui_docking_container.
    DATA mo_editor    TYPE REF TO cl_gui_abapedit.
    METHODS display_source IMPORTING is_source TYPE seoredef.

ENDCLASS.

CLASS lcl_main IMPLEMENTATION.
  METHOD on_double_click.
    docker( ).
    DATA(redef) = mt_redef[ row ].

    display_source( redef ).

  ENDMETHOD.

  METHOD display_source.
    DATA lt_source TYPE STANDARD TABLE OF string.

    DATA(include) = cl_oo_classname_service=&gt;get_method_include(
                      EXPORTING mtdkey = VALUE #( clsname = is_source-clsname
                                                  cpdname = is_source-mtdname ) ).
    READ REPORT include INTO lt_source.
    mo_editor-&gt;set_text( lt_source ).

  ENDMETHOD.

  METHOD docker.

    CHECK mo_docker IS INITIAL.
    mo_docker = NEW #( side = cl_gui_docking_container=&gt;dock_at_right ratio = 50 ).
    mo_editor = NEW #( parent = mo_docker ).
    mo_editor-&gt;set_readonly_mode( 1 ).

  ENDMETHOD.

  METHOD display.

    TRY.
        " create SALV
        CALL METHOD cl_salv_table=&gt;factory
          IMPORTING
            r_salv_table = DATA(lr_table)
          CHANGING
            t_table      = mt_redef.

        lr_table-&gt;get_functions( )-&gt;set_all( ).

        " register event DOUBLE_CLICK
        SET HANDLER on_double_click FOR lr_table-&gt;get_event( ).

        " hide columns which are not relevant
        DATA(lr_columns) = lr_table-&gt;get_columns( ).
        lr_columns-&gt;get_column( 'VERSION' )-&gt;set_technical( ).
        lr_columns-&gt;get_column( 'MTDABSTRCT' )-&gt;set_technical( ).
        lr_columns-&gt;get_column( 'MTDFINAL' )-&gt;set_technical( ).
        lr_columns-&gt;get_column( 'ATTVALUE' )-&gt;set_technical( ).
        lr_columns-&gt;get_column( 'EXPOSURE' )-&gt;set_technical( ).
        lr_table-&gt;display( ).
      CATCH cx_salv_error.
    ENDTRY.


  ENDMETHOD.


  METHOD do.

    DATA lr_class TYPE REF TO cl_oo_class.
    DATA lt_subclasses TYPE seo_relkeys.
    DATA ls_subclass   LIKE LINE OF lt_subclasses.

    TRY .
        lr_class ?= cl_oo_class=&gt;get_instance( i_class ).

        LOOP AT lr_class-&gt;redefinitions INTO DATA(ls_redef) WHERE mtdname = i_method.
          APPEND ls_redef TO mt_redef.
        ENDLOOP.
        lt_subclasses = lr_class-&gt;get_subclasses( ).

        IF i_start = abap_true.
          " search
          LOOP AT lt_subclasses INTO ls_subclass.
            do( i_class  = ls_subclass-clsname
                i_method = i_method
                i_start  = space ).
          ENDLOOP.
        ENDIF.

      CATCH cx_class_not_existent.

    ENDTRY.

  ENDMETHOD.

ENDCLASS.


START-OF-SELECTION.

  DATA(main) = NEW lcl_main( ).
  main-&gt;do( i_class  = p_clas
            i_method = p_meth
            i_start  = abap_true ).
  main-&gt;display( ).</pre>
<h2>abapGit</h2>
<p>Der inzwischen obligatorische Link zu Github: <a class="keychainify-checked" href="https://github.com/tricktresor/find_redefinitions">https://github.com/tricktresor/find_redefinitions</a></p>
<p>Der Beitrag <a href="/blog/welche-redefinitionen-gibt-es/">Welche Redefinitionen gibt es?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Classname Utilities</title>
		<link>/blog/classname-utilities/</link>
					<comments>/blog/classname-utilities/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 08 Dec 2016 13:46:15 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[Methode]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[Include]]></category>
		<category><![CDATA[Klassenname]]></category>
		<category><![CDATA[Methodenname]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=962285</guid>

					<description><![CDATA[<p>Klassen sind inzwischen von ABAP nicht mehr wegzudenken. Die Verwaltung der Klassen erfolgt jedoch immer noch in INCLUDES. Diese Includes interessieren in der Regel niemanden. Hin und wieder tauchen diese Klassen-Include jedoch in Shortdumps auf. Der Name der Klasse selbst ist eindeutig aus dem Includenamen zu erkennen. Der Name der Methode jedoch nicht. Häufig gibt es zwar auch die zusätzlich notwendige Information, um welche Methode es sich handelt, aber das ist nicht immer der Fall.</p>
<p>Der Beitrag <a href="/blog/classname-utilities/">Classname Utilities</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Klassen sind inzwischen von ABAP nicht mehr wegzudenken. Die Verwaltung der Klassen erfolgt jedoch immer noch in INCLUDES. Diese Includes interessieren in der Regel niemanden. Hin und wieder tauchen diese Klassen-Include jedoch in Shortdumps auf. Der Name der Klasse selbst ist eindeutig aus dem Includenamen zu erkennen. Der Name der Methode jedoch nicht. Häufig gibt es zwar auch die zusätzlich notwendige Information, um welche Methode es sich handelt, aber das ist nicht immer der Fall.</p>



<p>Einzelne Includes sehen zum Beispiel so aus:</p>



<pre class="wp-block-preformatted">CL_OO_CLASSNAME_SERVICE=======CCDEF
CL_OO_CLASSNAME_SERVICE=======CCMAC
CL_OO_CLASSNAME_SERVICE=======CCIMP
CL_OO_CLASSNAME_SERVICE=======CCAU
CL_OO_CLASSNAME_SERVICE=======CU
CL_OO_CLASSNAME_SERVICE=======CO
CL_OO_CLASSNAME_SERVICE=======CI
CL_OO_CLASSNAME_SERVICE=======CP
CL_OO_CLASSNAME_SERVICE=======CT
CL_OO_CLASSNAME_SERVICE=======CS
CL_OO_CLASSNAME_SERVICE=======CM001
CL_OO_CLASSNAME_SERVICE=======CM002
CL_OO_CLASSNAME_SERVICE=======CM003
CL_OO_CLASSNAME_SERVICE=======CM004</pre>



<h2 class="wp-block-heading">CL_OO_CLASSNAME_SERVICE</h2>



<figure class="wp-block-image"><a class="keychainify-checked" href="https://tricktresor.com/wp-content/uploads/2016/12/2016-12-08_14-33-36.jpg"><img decoding="async" width="709" height="392" src="https://tricktresor.com/wp-content/uploads/2016/12/2016-12-08_14-33-36.jpg" alt="" class="wp-image-962286" srcset="/wp-content/uploads/2016/12/2016-12-08_14-33-36.jpg 709w, /wp-content/uploads/2016/12/2016-12-08_14-33-36-300x166.jpg 300w" sizes="(max-width: 709px) 100vw, 709px" /></a></figure>



<p>Um die einzelnen intern verwendeten Objekte (Includes) verwalten zu können, gibt es die Klasse CL_OO_CLASSNAME_SERVICE. Mit dieser Klasse kannst du herausfinden, welche Methode zu welchem Include gehört und umgekehrt.</p>



<p>GET_METHOD_INCLUDE liefert zum Beispiel für die gleichnamige Methode den Includenamen&nbsp;CL_OO_CLASSNAME_SERVICE=======CM00B.</p>



<p>Umgekehrt liefert die Methode GET_METHOD_BY_INCLUDE die Methode zum Includenamen.</p>



<p>die Methode&nbsp;GET_ALL_CLASS_INCLUDES liefert eine komplette Liste der verwendeten Klassen-Includes.</p>



<h2 class="wp-block-heading">Nummerierung</h2>



<p>Interessant finde ich, dass die Methodenincludes nicht numerisch hochgezählt werden, sondern erst numerisch (1-9) und dann alphabetisch (A-Z). Bei einem drei-stelligen numerischen Feld, wie das verwendete (==CMnnn) würden 999 Methoden in eine Klasse passen. Eigentlich mehr als ausreichend, sollte man meinen.</p>



<p>Die Nummerierung erfolgt übrigens in Funktionsbaustein&nbsp;SEO_METHOD_GENERATE_INCLUDE mit Hilfe des folgenden System-Calls:</p>



<pre class="wp-block-preformatted">system-call&nbsp;create&nbsp;method&nbsp;mtdkey-cpdname&nbsp;of&nbsp;class&nbsp;mtdkey-clsname
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;include&nbsp;into&nbsp;filename.</pre>



<p>Die Struktur FILENAME hat dann zum Beispiel folgenden Wert:</p>



<figure class="wp-block-table"><table><thead><tr><td><strong>Komponente</strong></td><td><strong>Wert</strong></td></tr></thead><tbody><tr><td>ROOTNAME</td><td>ZCL_ABC=======================</td></tr><tr><td>CATEGORYA</td><td>C</td></tr><tr><td>CODEA</td><td>M001</td></tr><tr><td>CATEGORYB</td><td>&nbsp;</td></tr><tr><td>CODEB</td><td>&nbsp;</td></tr></tbody></table></figure>



<h2 class="wp-block-heading">Alternative</h2>



<p>Ebenfalls möglich ist die Verwendung von Klasse CL_OO_INCLUDE_NAMING. Auch hier bekommt man Informationen zu den Includes einer Klasse:</p>



<pre class="wp-block-code"><code>data(cifref) = cl_oo_include_naming=>get_instance_by_cifkey( class_interface_id ).</code></pre>



<p></p>
<p>Der Beitrag <a href="/blog/classname-utilities/">Classname Utilities</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/classname-utilities/feed/</wfw:commentRss>
			<slash:comments>2</slash:comments>
		
		
			</item>
		<item>
		<title>Global. Lokal. Egal.</title>
		<link>/blog/global-lokal-egal/</link>
					<comments>/blog/global-lokal-egal/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 07 Dec 2016 21:13:54 +0000</pubDate>
				<category><![CDATA[Reports]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[Instanz]]></category>
		<category><![CDATA[Objekt]]></category>
		<category><![CDATA[Global]]></category>
		<category><![CDATA[Lokal]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=961091</guid>

					<description><![CDATA[<p>Im Rahmen eines Projektes haben wir uns mit der dynamischen Erzeugung von Klassen beschäftigt und Stefan hat dabei einen netten Trick herausgefunden.</p>
<p>Der Beitrag <a href="/blog/global-lokal-egal/">Global. Lokal. Egal.</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Im Rahmen eines Projektes haben wir uns mit der dynamischen Erzeugung von Klassen beschäftigt und Stefan hat dabei einen netten Trick herausgefunden.</p>
<h2>Globale Klasse</h2>
<p>Normalerweise gibt es in einem Report nur die folgenden zwei Möglichkeiten um eine Klasse zu instantiieren:</p>
<ol>
<li>Ein Objekt mit Referenz zu einer <strong>global</strong> definierten Klasse (SE24)</li>
<li>Ein Objekt mit Referenz zu einer im selben Programm definierten <strong>lokalen</strong> Klasse</li>
</ol>
<p>Stefan hat nun eine Möglichkeit gefunden, wie man lokale Klassen, die in beliebigen Programmen definiert sind, erzeugen kann. Und das geht so:</p>
<h2>Lokale Klasse</h2>
<p>Wir brauchen ein Programm mit einer lokal definierten Klasse. In dem folgenden Programm werden zwei lokale Klassen definiert. Beide haben die Methode INFO.</p>
<pre>REPORT zttloc01.

CLASS lcl_local_01 DEFINITION.
 PUBLIC SECTION.
 METHODS info RETURNING VALUE(text) TYPE string.
ENDCLASS.

CLASS lcl_local_01 IMPLEMENTATION.

METHOD info.
 text = 'Ich bin Klasse 01'.
 ENDMETHOD.
ENDCLASS.

CLASS lcl_local_02 DEFINITION.
 PUBLIC SECTION.
 METHODS info RETURNING VALUE(text) TYPE string.
ENDCLASS.

CLASS lcl_local_02 IMPLEMENTATION.

METHOD info.
 text = 'Ich bin Klasse 02'.
 ENDMETHOD.
ENDCLASS.</pre>
<h2>Dynamische Erzeugung von Klasseninstanzen</h2>
<p>Wenn man den Namen einer Klasse erst zur Laufzeit ermitteln kann, dann kann man ein Objekt dieser Klasse dynamisch wie folgt erzeugen:</p>
<pre>DATA classname TYPE string.
DATA object    TYPE REF TO object.
classname = 'ZCL_CLASS_XYZ'.
CREATE OBJECT object TYPE (classname).</pre>
<p>Sinnvoller Weise verwendet man hierfür ein Interface, dass alle in Frage kommenden Klassen implementiert haben.</p>
<h2>Ihr Auftritt Herr Kollege</h2>
<p>Unser Trick besteht nun darin, dass wir den Klassennamen genauer spezifizieren. Wir geben dem Klassennamen die Information mit, in welchem Programm die Klasse vorhanden ist. Der Klassenname sieht dann zum Beispiel wie folgt aus:</p>
<pre>\PROGRAM=ZTTLOC01\CLASS=LCL_LOCAL01</pre>
<p>Wir müssen also nur noch die intern verwendete Struktur zusammenbasteln. Das folgende Programm erzeugt je nach Auswahl ein Objekt der im Programm ZTTLOC01 lokale definierten Klasse LCL_LOCAL_01 oder LCL_LOCAL_02.</p>
<pre class="">REPORT zttlocaccess.

PARAMETERS p_01 RADIOBUTTON GROUP cls DEFAULT 'X'.
PARAMETERS p_02 RADIOBUTTON GROUP cls.
PARAMETERS p_repid TYPE syrepid DEFAULT 'ZTTLOC01'.

START-OF-SELECTION.

 DATA classname TYPE string.
 DATA r_object TYPE REF TO object.
 DATA text TYPE string.

CASE 'X'.
 WHEN p_01.
   classname = 'LCL_LOCAL_01'.
 WHEN p_02.
   classname = 'LCL_LOCAL_02'.
 ENDCASE.

 CONCATENATE '\PROGRAM=' p_repid '\CLASS=' classname INTO classname.

 CREATE OBJECT r_object TYPE (classname).

 CALL METHOD r_object-&gt;('INFO') RECEIVING text = text.
 MESSAGE text TYPE 'I'.</pre>
<h3>Screenshot</h3>
<p><a href="https://tricktresor.com/wp-content/uploads/2016/12/2016-12-07_22-04-54.jpg"><img decoding="async" class="size-full wp-image-961158 alignnone" src="https://tricktresor.com/wp-content/uploads/2016/12/2016-12-07_22-04-54.jpg" alt="" width="696" height="430" srcset="/wp-content/uploads/2016/12/2016-12-07_22-04-54.jpg 696w, /wp-content/uploads/2016/12/2016-12-07_22-04-54-300x185.jpg 300w" sizes="(max-width: 696px) 100vw, 696px" /></a></p>
<p>Das rufende Programm muss natürlich genau wissen, was es tut. Je nachdem wie dynamisch der Aufruf einzelner Methoden sein soll, können ebenfalls dynamisch ermittelte Parameter über die <a href="https://help.sap.com/saphelp_nw70/helpdata/de/08/d27c03b81011d194f60000e8353423/content.htm">Parameterliste</a> übergeben werden.</p>
<p>Verwendet man ein Interface, dass die zu verwendenden Klassen implementieren, dann kann man verwendete Interface-Methoden direkt aufrufen.</p>
<p>Der Beitrag <a href="/blog/global-lokal-egal/">Global. Lokal. Egal.</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/global-lokal-egal/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Redefinierte Methoden?</title>
		<link>/blog/redefinierte-methoden/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Mon, 09 Nov 2015 17:59:37 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[vererbung]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[Redefnition]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=332915</guid>

					<description><![CDATA[<p>Heute habe ich in einer Klassenhierarchie (Superklasse -> vererbte Klassen) eine Klasse gesucht habe, bei der ich eine bestimmte Methode redefiniert habe. Bei der Suche bin ich auf eine Tabelle gestossen, die die gewünschte Information liefert...</p>
<p>Der Beitrag <a href="/blog/redefinierte-methoden/">Redefinierte Methoden?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Heute habe ich in einer Klassenhierarchie (Superklasse -&gt; vererbte Klassen) eine Klasse gesucht habe, bei der ich eine bestimmte Methode redefiniert habe.</p>
<p>Als anständiger Programmierer war ich natürlich zu faul, mich auch nur durch drei vererbte Klassen durchzuklicken&#8230; Also bin ich auf die Suche nach einem passenden Funktionsbaustein gegangen und dabei auf SEO_INHERITANC_READ gestossen. Diesem Funktionsbaustein kannst du eine Klasse übergeben und erhältst alle redefinierten Methoden.</p>
<p>Nicht ganz das, was ich gesucht habe, aber die verwendete Tabelle SEOREDEF lieferte mir die gewünschten Informationen im Handumdrehen.</p>
<p>Hier ein Beispiel in dem du siehst, welche Methoden von CL_GUI_CONTAINER in direkt geerbten Klassen redefiniert wurden:</p>
<p><img loading="lazy" decoding="async" class="aligncenter wp-image-332916 size-full" src="https://tricktresor.com/wp-content/uploads/2015/11/2015-11-09_18-17-16.png" alt="2015-11-09_18-17-16" width="577" height="530" srcset="/wp-content/uploads/2015/11/2015-11-09_18-17-16.png 577w, /wp-content/uploads/2015/11/2015-11-09_18-17-16-300x276.png 300w" sizes="(max-width: 577px) 100vw, 577px" /></p>
<p>Allerdings ist diese Methode nicht 100%ig, denn es wird natürlich nur die direkte Vererbung gespeichert. Von der Klasse CL_GUI_DOCKING_CONTAINER zum Beispiel erben weitere Klassen. Deren Redefinitionen sind nur sichtbar, wenn du die Klasse CL_GUI_DOCKING_CONTAINER direkt eingibst.</p>
<p>Um zu sehen, wo entlang einer Vererbungshierarchie welche Methoden redefiniert wurden, muss also noch ein Programm geschrieben werden.</p>
<h2>Programm</h2>
<p>Hier ist das kleine Programm. Quick and dirty. Methode GET_SUBCLASSES der Klasse CL_OO_CLASS gibt alle vererbten Klassen zurück.</p>
<p>von diesen Klassen werden die redefinierten Methoden ermittelt.</p>
<p>Um zu sehen, welche Methode in welcher Klasse redefiniert wurde, muss nach Methode gefiltert oder sortiert werden:</p>
<p><img loading="lazy" decoding="async" class="aligncenter wp-image-332984 size-full" src="https://tricktresor.com/wp-content/uploads/2015/11/2015-11-09_18-49-58.png" alt="2015-11-09_18-49-58" width="589" height="464" srcset="/wp-content/uploads/2015/11/2015-11-09_18-49-58.png 589w, /wp-content/uploads/2015/11/2015-11-09_18-49-58-300x236.png 300w" sizes="(max-width: 589px) 100vw, 589px" /></p>
<h2>Code</h2>
<pre>REPORT.

PARAMETERS p_class TYPE seoclsname DEFAULT 'CL_GUI_CONTAINER'.

DATA gt_redef TYPE STANDARD TABLE OF seoredef.

START-OF-SELECTION.

 PERFORM do USING p_class 'X'.
 PERFORM display.

*&amp;---------------------------------------------------------------------*
*&amp; Form display
*&amp;---------------------------------------------------------------------*
FORM display.

 DATA lr_table TYPE REF TO cl_salv_table.
 DATA lr_funcs TYPE REF TO cl_salv_functions_list.

 CALL METHOD cl_salv_table=&gt;factory
 IMPORTING
 r_salv_table = lr_table
 CHANGING
 t_table = gt_redef.

 lr_funcs = lr_table-&gt;get_functions( ).
 lr_funcs-&gt;set_all( ).

 lr_table-&gt;display( ).
ENDFORM. "display


*&amp;---------------------------------------------------------------------*
*&amp; Form do
*&amp;---------------------------------------------------------------------*
FORM do USING i_class TYPE seoclsname
 i_start TYPE boolean.

 DATA lr_class TYPE REF TO cl_oo_class.
 DATA lt_subclasses TYPE seo_relkeys.
 DATA ls_subclass LIKE LINE OF lt_subclasses.

 TRY .
 lr_class ?= cl_oo_class=&gt;get_instance( i_class ).

 APPEND LINES OF lr_class-&gt;redefinitions TO gt_redef.
 lt_subclasses = lr_class-&gt;get_subclasses( ).

 IF i_start = abap_true.
 LOOP AT lt_subclasses INTO ls_subclass.
 PERFORM do USING ls_subclass-clsname space.
 ENDLOOP.
 ENDIF.

 CATCH cx_class_not_existent.

 ENDTRY.

ENDFORM. "do</pre>
<pre></pre>
<p>Der Beitrag <a href="/blog/redefinierte-methoden/">Redefinierte Methoden?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>What todo?</title>
		<link>/blog/what-todo/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Fri, 08 May 2015 06:00:00 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[klasse]]></category>
		<category><![CDATA[verwendungsnachweis]]></category>
		<category><![CDATA[Code Inspector]]></category>
		<category><![CDATA[ci]]></category>
		<category><![CDATA[todo]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=73938</guid>

					<description><![CDATA[<p>Aufgaben und Todos verwalten - gerade in einem Team - kann anstrengend sein. Hier verrate ich dir eine Methode, wie du TODO's einfach im ABAP-Quelltext kennzeichnest.</p>
<p>Der Beitrag <a href="/blog/what-todo/">What todo?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Bei der Programmierung, beim Debuggen, Testen und bei der Durchsicht von Programmen stolpere ich häufig über Ungereimtheiten, offensichtliche Fehler, Dinge, die verbessert werden können, unzureichendes Fehlerhandling und so weiter.</p>
<p>Da diese Dinge zwar geändert werden sollten, aber aktuell nicht im Fokus stehen, habe ich mir eine einfache aber recht wirkungsvolle Methode ausgedacht, diese Programmstellen zu kennzeichnen.</p>
<h2>TODO</h2>
<p>Ich lege eine Klasse ZCL_TODO an mit den statischen Methoden FRAGE, WICHTIG und ACHTUNG. Alle Methoden haben die Importing-Parameter WER (Optional) und WAS (preferred parameter).</p>
<p>Die Methoden haben keinen Quelltext. Dieser ist auch nicht nötig, denn die Methoden sollen lediglich als Merker für später dienen. Wenn ich z.B. im aktuellen Programm darüber stolpere, warum der ELSE-Zweig nicht prozessiert wird, dann schreibe ich an diese Stelle:</p>
<pre>ZCL_TODO=&gt;FRAGE( 'Was ist mit ELSE?' ).</pre>
<p>Wenn ich bemerke, dass ein Funktionsaufruf falsch oder unvollständig ist, dann schreibe ich:</p>
<pre>ZCL_TODO=&gt;WICHTIG( wer = 'Enno' was = 'Parameter xyz prüfen! ).</pre>
<h2>Verwendungsnachweis</h2>
<p>Das schöne an dieser Lösung ist, dass man mithilfe des Verwendungsnachweises für die Klasse ZCL_TODO sofort sehen kann, was man sich gerne merken wollte und was noch zu tun ist. Und das alles ohne großartige Hilfsmittel, Listen oder Dokumentationen.</p>
<p>Am besten eignet es sich für größere Programmierprojekte und Objekte, die aktuell bearbeitet werden. Wenn das Objekt gerade gar nicht in Bearbeitung ist, muss zur Quelltextänderung natürlich ein Transportauftrag angelegt werden. Aber auch das ist nicht weiter schlimm; dann hat derjenige, der das Objekt später ändern muss den schwarzen Peter. Hier muss selbstverständlich aufgepasst werden, dass der Entwickler mitbekommt, dass dieses Objekt nicht in seinen Transportauftrag übernommen wird. Diese wird deutlich dadurch, dass eine Meldung &#8220;Zu Auftrag 123 wurde eine Aufgabe hinzugefügt&#8221; (oder so ähnlich) erscheint.</p>
<h2>Code Inspector</h2>
<p>Um sicher zu gehen, dass Änderungen auch tatsächlich gemacht werden, kann der Code Inspector bemüht werden. Hier kann man die Prüfung auf Suchmuster entsprechend einstellen, dass der String &#8220;ZCL_TODO&#8221; einen Fehler auswirft. Wenn man jetzt noch einstellt, dass bei Freigabe des Transportauftrags die Code-Inspector-Prüfungen laufen, kann eigentlich nichts mehr schief gehen.</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2015/05/2015-05-07_18-55-29.png"><img loading="lazy" decoding="async" class="alignnone size-medium wp-image-74016" src="https://tricktresor.com/wp-content/uploads/2015/05/2015-05-07_18-55-29-300x214.png" alt="2015-05-07_18-55-29" width="300" height="214" srcset="/wp-content/uploads/2015/05/2015-05-07_18-55-29-300x214.png 300w, /wp-content/uploads/2015/05/2015-05-07_18-55-29.png 691w" sizes="(max-width: 300px) 100vw, 300px" /></a></p>
<p>Der Beitrag <a href="/blog/what-todo/">What todo?</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
