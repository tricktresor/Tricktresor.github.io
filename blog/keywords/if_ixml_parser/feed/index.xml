<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>if_ixml_parser Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/if_ixml_parser/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Fri, 24 Aug 2018 09:40:57 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>if_ixml_parser Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Exporting ALV to Memory2</title>
		<link>/blog/exporting-alv-to-memory2/</link>
					<comments>/blog/exporting-alv-to-memory2/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Mon, 12 Sep 2011 14:54:53 +0000</pubDate>
				<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Dynamische Programmierung]]></category>
		<category><![CDATA[ALV-Grid]]></category>
		<category><![CDATA[if_ixml_parser]]></category>
		<category><![CDATA[cl_alv_table_create=>create_dynamic_table]]></category>
		<category><![CDATA[color]]></category>
		<category><![CDATA[assign]]></category>
		<category><![CDATA[xml]]></category>
		<category><![CDATA[demoprogramme]]></category>
		<category><![CDATA[if_ixml]]></category>
		<category><![CDATA[if_ixml_stream_factory]]></category>
		<category><![CDATA[Office]]></category>
		<category><![CDATA[if_ixml_document]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=625</guid>

					<description><![CDATA[<p>Wir greifen den Trick - nach SUBMIT an die ALV-Daten im Office-Format zu gelangen - noch einmal auf und zeigen, wie man aus dem XML-String eine Tabelle erh&#228;lt.</p>
<p>Der Beitrag <a href="/blog/exporting-alv-to-memory2/">Exporting ALV to Memory2</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Wir greifen den Trick &#8211; nach SUBMIT an die ALV-Daten im Office-Format zu gelangen &#8211; noch einmal auf und zeigen, wie man aus dem XML-String eine Tabelle erhält.</p>
<p>In diesem Beispiel rufen wir das Beispielprogramm BCALV_FULLSCREEN_DEMO auf, um mittels ALV-Grid Daten zu erzeugen.</p>
<p>Die Flugdatenbank muss natürlich gefüllt sein!!</p>
<p><img decoding="async" class="alignnone size-medium wp-image-4193" src="https://tricktresor.com/wp-content/uploads/2011/09/01_13_11_46_26-300x140.jpg" alt="BCALV_FULLSCREEN_DEMO" width="300" height="140" srcset="/wp-content/uploads/2011/09/01_13_11_46_26-300x140.jpg 300w, /wp-content/uploads/2011/09/01_13_11_46_26-624x292.jpg 624w, /wp-content/uploads/2011/09/01_13_11_46_26.jpg 727w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p>Die grundlegenden Bestandteile sind bereits im vorherigen Artikel erläutert worden. In diesem Programm zeigen wir, wie man die im XML-Format vorliegenden Daten in eine interne Tabelle umwandelt.</p>
<p>Das XML-Ergebnis wird dabei Ereignisgesteuert bearbeitet. Das bedeutet: Die XML-Tags werden Stück für Stück durchlaufen und im Programm wird entsprechend darauf reagiert.</p>
<p class="head1">XML</p>
<p>Die zurückgelieferte XML-Struktur, die die Tabelle beschreibt ist recht komplex. Hier ist die Beispiel-XML-Datei zu sehen: <a href="http://pastebin.com/XkgctkJA" target="_blank" rel="noopener">http://pastebin.com/XkgctkJA</a></p>
<p>Uns interessieren jedoch nur die folgenden Tags:</p>
<p class="head2">Anzahl der Spalten</p>
<p class="sap1">&lt;Table&gt;&lt;Column/&gt;&lt;Column/&gt;&lt;/Table&gt;</p>
<p class="head2">Zellen und Zelleninhalte</p>
<p class="sap1">&lt;Cell&gt;&lt;Data&gt;Inhalt&lt;/data&gt;&lt;/cell&gt;</p>
<h2 class="head1">Coding</h2>
<pre class="lang:abap decode:true ">REPORT  zz_export_alv_to_memory_demo01.

*----------------------------------------------------------------------*
*       CLASS lcl_xml DEFINITION
*----------------------------------------------------------------------*
CLASS lcl_xml DEFINITION.

  PUBLIC SECTION.
CLASS-METHODS call_report  IMPORTING iv_repid TYPE syrepid
iv_list  TYPE char1.

    CLASS-METHODS create_table IMPORTING iv_fields TYPE i
EXPORTING ed_table TYPE REF TO data.

    CLASS-METHODS display_data IMPORTING it_table TYPE STANDARD TABLE PREFERRED PARAMETER it_table.

ENDCLASS.                    "lcl_xml DEFINITION

*----------------------------------------------------------------------*
*       CLASS lcl_xml IMPLEMENTATION
*----------------------------------------------------------------------*
CLASS lcl_xml IMPLEMENTATION.

  METHOD call_report.

*== Data
DATA lv_guid   TYPE guid_32.
DATA ls_params TYPE rsparams.
DATA lt_params TYPE TABLE OF rsparams.

*== Create and export GUIID for ALV
lv_guid = cl_salv_export_db_storage=&gt;create_guid( ).
EXPORT l_mode = 'M' TO MEMORY ID 'ALV_EXTRACT_MODE'.
EXPORT l_guid = lv_guid TO MEMORY ID 'ALV_EXTRACT_GUID'.

*== Call Report
    SUBMIT (iv_repid)
WITH SELECTION-TABLE lt_params
AND RETURN.                                       "#EC CI_SUBMIT

    DATA lv_xstring           TYPE xstring.
DATA lr_stream_factory    TYPE REF TO if_ixml_stream_factory.
DATA lr_ixml              TYPE REF TO if_ixml.
DATA lr_istream           TYPE REF TO if_ixml_istream.
DATA lr_doc               TYPE REF TO if_ixml_document.
DATA lr_parser            TYPE REF TO if_ixml_parser.
DATA lv_events            TYPE i.
DATA lv_number_of_fields  TYPE i.

    DATA lr_event             TYPE REF TO if_ixml_event.
DATA lv_type              TYPE i.
DATA lv_current_node      TYPE string.
DATA lv_current_value     TYPE string.
DATA lv_cell_index        TYPE i.

*== Import XML-data from AVL and convert to stream
lv_xstring        = cl_salv_export_db_storage=&gt;import_xmlstring
( guid  = lv_guid ).
lr_ixml           = cl_ixml=&gt;create( ).
lr_stream_factory = lr_ixml-&gt;create_stream_factory( ).
lr_istream        = lr_stream_factory-&gt;create_istream_xstring
( string = lv_xstring ).

    lr_doc            = lr_ixml-&gt;create_document( ).

*== Create parser for document
    lr_parser   = lr_ixml-&gt;create_parser(
document       = lr_doc
istream        = lr_istream
stream_factory = lr_stream_factory ).

*== deactivate DOM generation
lr_parser-&gt;set_dom_generating( space ).

*== data for dynamically generated internal table
DATA ld_table            TYPE REF TO data.
FIELD-SYMBOLS &lt;table&gt;    TYPE STANDARD TABLE.
FIELD-SYMBOLS &lt;row&gt;      TYPE ANY. "line of &lt;table&gt;.
FIELD-SYMBOLS &lt;cell&gt;     TYPE string.

*== define Parser events
lv_events = if_ixml_event=&gt;co_event_element_pre2
+ if_ixml_event=&gt;co_event_element_post
+ if_ixml_event=&gt;co_event_text_post.

*== Register XML-Events
lr_parser-&gt;set_event_subscription( lv_events ).

    DO.

*== get next event (XML-tag)
lr_event = lr_parser-&gt;parse_event( ).
IF lr_event IS INITIAL.
EXIT.
ENDIF.

*== get type of event
lv_type = lr_event-&gt;get_type( ).
*== New element
CASE lv_type.
WHEN if_ixml_event=&gt;co_event_element_pre2.
*===&gt; Event "PRE2"
lv_current_node = lr_event-&gt;get_name( ).
IF iv_list &lt;&gt; space.
WRITE: / lv_current_node.
ENDIF.

          CASE lv_current_node.
WHEN 'Column'.
*=====&gt; New Column: Add column counter
ADD 1 TO lv_number_of_fields.

            WHEN 'Row'.
*=====&gt; New Row
IF &lt;table&gt; IS NOT ASSIGNED.
*=====&gt; Create table if not done yet
create_table( EXPORTING iv_fields = lv_number_of_fields
IMPORTING ed_table  = ld_table ).

                ASSIGN ld_table-&gt;* TO &lt;table&gt;.
ENDIF.

*=====&gt; Insert new table line
APPEND INITIAL LINE TO &lt;table&gt; ASSIGNING &lt;row&gt;.
CLEAR lv_cell_index.

            WHEN 'Cell'.
*======&gt; new cell data:
ADD 1 TO lv_cell_index.
ASSIGN COMPONENT lv_cell_index
OF STRUCTURE &lt;row&gt; TO &lt;cell&gt;.
ENDCASE.

        WHEN if_ixml_event=&gt;co_event_text_post.
*===&gt; Event "TEXT"
CASE lv_current_node.
WHEN 'Data'.
*=====&gt; get cell value and assign to table cell
&lt;cell&gt; = lr_event-&gt;get_value( ).
ENDCASE.

          IF iv_list &lt;&gt; space.
lv_current_value = lr_event-&gt;get_value( )..
WRITE lv_current_value COLOR COL_TOTAL.
ENDIF.

        WHEN if_ixml_event=&gt;co_event_element_post.
*===&gt; Event "POST"
IF iv_list &lt;&gt; space.
lv_current_node = lr_event-&gt;get_name( ).
WRITE: lv_current_node COLOR COL_GROUP.
ENDIF.

      ENDCASE.
ENDDO.

*== Display table
    IF &lt;table&gt; IS ASSIGNED.
display_data( &lt;table&gt; ).
ENDIF.

  ENDMETHOD.                    "call_report

METHOD create_table.

*== field catalog
    DATA lt_fcat             TYPE lvc_t_fcat.
FIELD-SYMBOLS &lt;fcat&gt;     TYPE lvc_s_fcat.

*== create field catalog for internal table
    DO iv_fields TIMES.
*== cell
APPEND INITIAL LINE TO lt_fcat ASSIGNING &lt;fcat&gt;.
&lt;fcat&gt;-fieldname = sy-index.
CONDENSE &lt;fcat&gt;-fieldname.
&lt;fcat&gt;-tabname   = 'GT_TABLE'.
&lt;fcat&gt;-inttype   = 'g'. "String
ENDDO.

*== generate internal table from given field catalog
CALL METHOD cl_alv_table_create=&gt;create_dynamic_table
EXPORTING
it_fieldcatalog           = lt_fcat
IMPORTING
ep_table                  = ed_table
EXCEPTIONS
generate_subpool_dir_full = 1
OTHERS                    = 2.

  ENDMETHOD.                    "create_table

  METHOD display_data.

*== Data
DATA lv_col          TYPE i.
FIELD-SYMBOLS &lt;row&gt;  TYPE ANY.
FIELD-SYMBOLS &lt;cell&gt; TYPE string.

*== Display all table lines
LOOP AT it_table ASSIGNING &lt;row&gt;.
NEW-LINE.
DO.
*== Display each table cell
ASSIGN COMPONENT sy-index OF STRUCTURE &lt;row&gt; TO &lt;cell&gt;.
IF sy-subrc = 0.
lv_col = ( sy-index - 1 ) * 21.
WRITE AT lv_col(19)  &lt;cell&gt; COLOR COL_POSITIVE.
ELSE.
EXIT. "from do
ENDIF.
ENDDO.
ENDLOOP.
ENDMETHOD.                    "display_data

ENDCLASS.                    "lcl_xml IMPLEMENTATION

***___________________________________________________________________
***
*** SELECTION SCREEN
***___________________________________________________________________
***

SELECTION-SCREEN BEGIN OF BLOCK reps   WITH FRAME TITLE text-var.
PARAMETERS p_repid TYPE syrepid        DEFAULT 'BCALV_FULLSCREEN_DEMO'.
PARAMETERS p_data  RADIOBUTTON GROUP x DEFAULT 'X'.
PARAMETERS p_list  RADIOBUTTON GROUP x.
SELECTION-SCREEN END OF BLOCK reps.

START-OF-SELECTION.

*== Start report
lcl_xml=&gt;call_report( EXPORTING iv_repid = p_repid
iv_list  = p_list ).

</pre>
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/exporting-alv-to-memory2/">Exporting ALV to Memory2</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/exporting-alv-to-memory2/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
	</channel>
</rss>
