<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>ole Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/ole/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Mon, 21 Jan 2019 15:13:48 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>ole Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>OLE-Handle zu DOI-Objekt ermitteln</title>
		<link>/blog/ole-handle-zu-doi-objekt-ermitteln/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Mon, 21 Jan 2019 15:13:40 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[EXCEL]]></category>
		<category><![CDATA[WORD]]></category>
		<category><![CDATA[DOI]]></category>
		<category><![CDATA[ole]]></category>
		<category><![CDATA[Desktop-Office-Integration]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1020085</guid>

					<description><![CDATA[<p>Word und Excel sind ein täglicher Begleiter im Berufsleben. Auch die Steuerung aus SAP heraus ist möglich und häufig sinnvoll. Allerdings gibt es manchmal ein paar Tücken, die ärgerlich sind. Hier zeige ich dir, wie du ein Excel-Dokument per Desktop Office Integration erzeugst und auch später an das OLE-Handle gelangst.</p>
<p>Der Beitrag <a href="/blog/ole-handle-zu-doi-objekt-ermitteln/">OLE-Handle zu DOI-Objekt ermitteln</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[
<p>Für die Integration von Word und Excel gibt es nur zwei Möglichkeiten:</p>



<ul><li>OLE &#8211; Object Linking and Embedding</li><li>DOI &#8211; Desktop Office Integration</li></ul>



<p>Beide Varianten haben ihre Vor- und Nachteile. Ein Nachteil bei der Verwendung von DOI ist auf jeden Fall, dass die Methode CLOSE_DOCUMENT nicht zuverlässig funktioniert, wenn man Word oder Excel in einem separaten Fenster öffnet.</p>



<h2 class="wp-block-heading">Beispiel</h2>



<p>Zuerst jedoch ein Beispielcode, der zeigt, wie mittels DOI eine Excel-Instanz gestartet wird. Die Drucktaste &#8220;Create&#8221; startet Excel.</p>



<figure class="wp-block-image"><img fetchpriority="high" decoding="async" width="508" height="373" src="https://tricktresor.com/wp-content/uploads/2019/01/doi2.png" alt="" class="wp-image-1020087" srcset="/wp-content/uploads/2019/01/doi2.png 508w, /wp-content/uploads/2019/01/doi2-300x220.png 300w" sizes="(max-width: 508px) 100vw, 508px" /><figcaption>Desktop Office Integration hat Excel gestartet</figcaption></figure>



<p>Die Schaltfläche &#8220;Create&#8221; wird dann ausgeschaltet und die Schaltflächen &#8220;Destroy with &#8220;Close_Document&#8221; und &#8220;Destroy with OLE Quit&#8221; erscheinen. Mit diesen Drucktaste kann Excel wieder geschlossen werden. Das Beenden von Excel/ Word geschieht in der Regel über <em>document->close_document</em> und <em>document->close_activex_document</em>. Falls dies jedoch aus unerfindlichen Gründen nicht funktioniert, hilft vielleicht die Methode über das OLE-Objekt und die Methode &#8220;Quit&#8221;.</p>



<h2 class="wp-block-heading">Code</h2>



<p></p>



<pre class="wp-block-code"><code>REPORT LINE-SIZE 200.


"Create Control
SELECTION-SCREEN PUSHBUTTON /1(30) TEXT-cre USER-COMMAND create      MODIF ID cre.
"Destroy Control with Close_Document
SELECTION-SCREEN PUSHBUTTON /1(30) TEXT-dst USER-COMMAND destroy     MODIF ID dst.
"Destrpy Control with OLE and method Quit
SELECTION-SCREEN PUSHBUTTON /1(30) TEXT-dso USER-COMMAND destroy_ole MODIF ID dst.


CLASS demo DEFINITION.
  PUBLIC SECTION.
    METHODS create.
    METHODS destroy.
    METHODS destroy_with_ole.
    METHODS is_destroyed RETURNING VALUE(result) TYPE i.
  PROTECTED SECTION.

    DATA mr_control       TYPE REF TO i_oi_container_control." OIContainerCtrl
    DATA mr_document      TYPE REF TO i_oi_document_proxy.   " Office Dokument
    DATA mr_spreadsheet   TYPE REF TO i_oi_spreadsheet.      " Spreadsheet

    METHODS set_data.
    METHODS create_application.

ENDCLASS.


INITIALIZATION.
  DATA(go_demo) = NEW demo( ).

AT SELECTION-SCREEN.
  CASE sy-ucomm.
    WHEN 'CREATE'.
      go_demo->create( ).
    WHEN 'DESTROY'.
      go_demo->destroy( ).
    WHEN 'DESTROY_OLE'.
      go_demo->destroy_with_ole( ).
  ENDCASE.

AT SELECTION-SCREEN OUTPUT.

  LOOP AT SCREEN.
    CASE screen-group1.
      WHEN 'DST'.
        IF go_demo->is_destroyed( ) = 0.
          screen-active = '1'.
        ELSE.
          screen-active = '0'.
        ENDIF.

      WHEN 'CRE'.
        IF go_demo->is_destroyed( ) = 0.
          screen-active = '0'.
        ELSE.
          screen-active = '1'.
        ENDIF.
    ENDCASE.
    MODIFY SCREEN.
  ENDLOOP.

CLASS demo IMPLEMENTATION.


  METHOD create.

    create_application( ).
    set_data( ).

  ENDMETHOD.

  METHOD is_destroyed.

    IF mr_document IS BOUND.
      mr_document->is_destroyed(
        IMPORTING
          ret_value = result
      ).
    ELSE.
      result = 1.
    ENDIF.

  ENDMETHOD.

  METHOD create_application.

    DATA lr_error         TYPE REF TO i_oi_error.

    c_oi_container_control_creator=>get_container_control(
        IMPORTING
          control = mr_control
          error   = lr_error ).

** init control
    mr_control->init_control(
      EXPORTING
        inplace_enabled       = abap_false
        no_flush              = 'X'
        r3_application_name   = 'Test DOI'
        inplace_show_toolbars = abap_false
        parent                = cl_gui_container=>screen9
      IMPORTING
        error                 = lr_error
      EXCEPTIONS
        OTHERS                = 2 ).

    IF lr_error->has_failed = abap_true. lr_error->raise_message( 'I' ). RETURN. ENDIF.

*** Get Documentproxy
    CALL METHOD mr_control->get_document_proxy
      EXPORTING
        document_type  = soi_doctype_excel_sheet "'Excel.Sheet'
        no_flush       = 'X'
      IMPORTING
        document_proxy = mr_document
        error          = lr_error.
    IF lr_error->has_failed = abap_true. lr_error->raise_message( 'I' ). RETURN. ENDIF.

    mr_document->create_document(
      EXPORTING
       document_title   = 'Demo-Arbeitsblatt'
        no_flush         = 'X'
        open_inplace     = abap_false
      IMPORTING
       error = lr_error ).
    IF lr_error->has_failed = abap_true. lr_error->raise_message( 'I' ). RETURN. ENDIF.

    CALL METHOD mr_document->get_spreadsheet_interface
      IMPORTING
        sheet_interface = mr_spreadsheet
        error           = lr_error.
    IF lr_error->has_failed = abap_true. lr_error->raise_message( 'I' ). RETURN. ENDIF.

  ENDMETHOD.

  METHOD set_data.

    DATA lt_values        TYPE soi_generic_table.
    DATA lt_ranges        TYPE soi_range_list.
    DATA ls_range         LIKE LINE OF lt_ranges.
    DATA lr_error         TYPE REF TO i_oi_error.


    "Demo-Daten
    lt_values = VALUE #(
        ( row = 1 column = 1 value = '1' )
        ( row = 2 column = 1 value = '2' )
        ( row = 3 column = 1 value = '3' ) ) .

*== Neuen Bereich definieren
    mr_spreadsheet->insert_range_dim(
       EXPORTING name = 'myarea'
                 top       = 1
                 left      = 1
                 rows      = lines( lt_values )
                 columns   = 1
                 no_flush  = abap_false ).
    ls_range-columns = 1.
    ls_range-rows    = lines( lt_values ).
    ls_range-name    = 'myarea'.
    APPEND ls_range TO lt_ranges.

    "Daten übergeben
    mr_spreadsheet->set_ranges_data(
      EXPORTING
        ranges    = lt_ranges
        contents  = lt_values
      IMPORTING
        error     = lr_error
    ).
    IF lr_error->has_failed = abap_true. lr_error->raise_message( 'I' ). RETURN. ENDIF.

  ENDMETHOD.

  METHOD destroy.

    mr_document->close_document( ).
    mr_document->close_activex_document( ).
    FREE mr_document.

    mr_control->destroy_control( ).
    FREE mr_control.

  ENDMETHOD.

  METHOD destroy_with_ole.

    DATA lv_document_cntl_handle TYPE cntl_handle.
    DATA lv_application          TYPE ole2_object.
    DATA lv_oi_ret               TYPE soi_ret_string.
    DATA lr_error                TYPE REF TO i_oi_error.

    mr_document->get_document_handle(
      IMPORTING
        handle  = lv_document_cntl_handle
        retcode = lv_oi_ret ).
    GET PROPERTY OF lv_document_cntl_handle-obj 'Application' = lv_application.
    CALL METHOD OF lv_application 'Quit'.
    FREE OBJECT lv_application.
    FREE mr_document.

  ENDMETHOD.

ENDCLASS.</code></pre>



<h2 class="wp-block-heading">OLE-Objekt zu DOI-Dokument erhalten</h2>



<p>Wenn die Methode <em>close_document</em> aus irgendwelchen Gründen nicht funktioniert, das Excel-Fenster also nicht geschlossen wird, oder du eine Methode anwenden möchtest, die das DOI-Interface nicht unterstützt, dann kannst du dir den OLE-Handle zur Applikation besorgen:</p>



<pre class="wp-block-code"><code>    DATA lv_document_cntl_handle TYPE cntl_handle.
    DATA lv_application          TYPE ole2_object.
    DATA lv_oi_ret               TYPE soi_ret_string.
    DATA lr_error                TYPE REF TO i_oi_error.

    mr_document->get_document_handle(
      IMPORTING
        handle  = lv_document_cntl_handle
        retcode = lv_oi_ret ).
    GET PROPERTY OF lv_document_cntl_handle-obj 'Application' = lv_application.
    CALL METHOD OF lv_application 'Quit'.
    FREE OBJECT lv_application.
    FREE mr_document.</code></pre>



<h2 class="wp-block-heading">SAP-Demoprogramme</h2>



<p>Folgende zwei Demoprogramme zeigen noch erweiterte Funktionen des DOI-Interfaces:</p>



<ul><li>SAPRDEMO_FORM_INTERFACE</li><li>SAPRDEMO_SPREADSHEET_INTERFACE</li><li>SAPRDEMO_MAILMERGE_INTERFACE</li></ul>



<p>Bei diesen drei Programmen lässt sich übrigens der Fehler, dass die Applikation nicht korrekt geschlossen wird, sehr gut nachstellen.</p>



<p>Bei SAPRDEMO_MAILMERGE_INTERFACE wird beim Beenden des Programms zwar das Dokument geschlossen, aber die Word-Applikation bleibt bestehen. Bei SAPRDEMO_FORM_INTERFACE wird das Programm zwar beendet, doch obwohl Close_Document und Destroy_Control aufgerufen werden, bleibt das Excel-Fenster geöffnet. Im Programm SAPRDEMO_SPREADSHEET_INTERFACE funktioniert das Beenden von Excel wiederum perfekt.</p>



<p></p>
<p>Der Beitrag <a href="/blog/ole-handle-zu-doi-objekt-ermitteln/">OLE-Handle zu DOI-Objekt ermitteln</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Speak!</title>
		<link>/blog/speak/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 03 May 2016 09:53:55 +0000</pubDate>
				<category><![CDATA[Info/ Doku/ Demo]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[ABAP OO]]></category>
		<category><![CDATA[Dokumentation]]></category>
		<category><![CDATA[Agenten]]></category>
		<category><![CDATA[set property]]></category>
		<category><![CDATA[call method]]></category>
		<category><![CDATA[get property]]></category>
		<category><![CDATA[ole]]></category>
		<category><![CDATA[LINKS]]></category>
		<category><![CDATA[DOKU]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=634</guid>

					<description><![CDATA[<p>SAP kann sprechen. Mit der Microsoft Speech API 5.3</p>
<p>Der Beitrag <a href="/blog/speak/">Speak!</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>SAP kann sprechen. Mit der Microsoft Speech API 5.3</p>
<p><figure id="attachment_608883" aria-describedby="caption-attachment-608883" style="width: 500px" class="wp-caption alignnone"><a href="https://tricktresor.com/wp-content/uploads/2012/02/2016-05-03_11-51-10.jpg"><img decoding="async" class="size-full wp-image-608883" src="https://tricktresor.com/wp-content/uploads/2012/02/2016-05-03_11-51-10.jpg" alt="https://pixabay.com/de/sound-welle-stimme-h%C3%B6ren-856770/" width="500" height="300" srcset="/wp-content/uploads/2012/02/2016-05-03_11-51-10.jpg 500w, /wp-content/uploads/2012/02/2016-05-03_11-51-10-300x180.jpg 300w" sizes="(max-width: 500px) 100vw, 500px" /></a><figcaption id="caption-attachment-608883" class="wp-caption-text">https://pixabay.com/de/sound-welle-stimme-h%C3%B6ren-856770/</figcaption></figure></p>
<p>Auf der Seite <a href="http://abapdn.blogspot.com/" target="_blank">http://abapdn.blogspot.com/</a> bin ich auf folgenden interessanten Code gestoßen:</p>
<pre>INCLUDE ole2incl.
DATA : v_objole      TYPE ole2_object,
       v_objolevoice TYPE ole2_object,
       v_strtotalk   TYPE string.

CREATE OBJECT v_objolevoice 'SAPI.SpVoice'.

SET PROPERTY OF v_objolevoice 'Volume' = 80.
SET PROPERTY OF v_objolevoice 'Rate' = -1.

v_strtotalk = 'This is great'.

CALL METHOD OF v_objolevoice 'Speak' = v_objole
EXPORTING #1 = v_strtotalk.

FREE: v_objolevoice,v_objole.</pre>
<p>Und SAP kann sprechen&#8230; Leider ist es mir nicht gelungen, andere Stimmen zu aktivieren. Es spricht standardmäßig &#8220;Anna&#8221; (&#8220;Mary&#8221; laut Doku). Es müsste aber auch noch &#8220;Mike&#8221; vorhanden sein.</p>
<h2>Get Voice</h2>
<p>Mit diesem Code-Schnipsel kann man die eingestellte Stimme ermitteln.</p>
<pre>DATA v_voicename TYPE string.
DATA v_voice     TYPE ole2_object.
GET PROPERTY OF v_objolevoice 'Voice' = v_voice.
CALL METHOD OF v_voice 'GetDescription' = v_voicename.</pre>
<p>Umgestellt werden kann die Stimme leider nicht, denn dafür müsste man per OLE ein indiziertes Array ansprechen, was aber nicht geht. Aufgrund von Lizenzproblemen ist häufig aber auch nur eine Sprache (und Stimme) installiert.</p>
<h2>Asynchrone Sprachausgabe</h2>
<p>In der Defaulteinstellung wird die Verarbeitung erst fort gesetzt, wenn die Sprachausgabe beendet ist. Mit dem Parameter SVSFlagAsync der Methode SPEAK kann die Sprachausgabe jedoch auch asynchron erfolgen. Das ist beispielsweise dann sinnvoll, wenn eine per MESSAGE ausgegebene Meldung auch gesprochen werden soll. Die Meldung sollte dann natürlich nicht erst erscheinen, wenn sie bereits vorab einmal komplett gesprochen wurde&#8230;</p>
<pre>CALL METHOD OF v_objolevoice 'Speak' = v_objolevoice
EXPORTING #1 = v_strtotalk
#2 = 1.  "SVSFlagsAsync</pre>
<h2>Links</h2>
<p>Hier der Link zum Artikel:<br />
<a href="http://abapdn.blogspot.com/2010/09/sap-knows-how-to-speak.html" target="_blank">http://abapdn.blogspot.com/2010/09/sap-knows-how-to-speak.html</a></p>
<p>Und hier der Link zur API-Dokumentation:<br />
<a href="http://msdn.microsoft.com/en-us/library/ms723614(v=vs.85).aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms723614(v=vs.85).aspx</a></p>
<h1>Kürzer!</h1>
<p>Hier noch eine kürzere <a title="NES | code.google.com" href="https://code.google.com/p/nes-abapgames/wiki/Hello_World">Variante von Nalon</a>:</p>
<pre>DATA ovoice TYPE ole2_object.
CREATE OBJECT ovoice 'SAPI.SpVoice'.
IF sy-subrc = 0.
  CALL METHOD OF ovoice 'Speak'
    EXPORTING #1 = 'Ich will sprechen'.
ENDIF.</pre>
<p>Der Beitrag <a href="/blog/speak/">Speak!</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>ABAP2XLS</title>
		<link>/blog/abap2xls/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Thu, 20 Feb 2014 17:00:52 +0000</pubDate>
				<category><![CDATA[AddOns]]></category>
		<category><![CDATA[formatierung]]></category>
		<category><![CDATA[DOI]]></category>
		<category><![CDATA[Entwicklung]]></category>
		<category><![CDATA[farben]]></category>
		<category><![CDATA[ole]]></category>
		<category><![CDATA[sap]]></category>
		<category><![CDATA[zelle]]></category>
		<category><![CDATA[arbeitsblatt]]></category>
		<category><![CDATA[spreadsheet]]></category>
		<category><![CDATA[EXCEL]]></category>
		<category><![CDATA[sheet]]></category>
		<category><![CDATA[Office]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=4487</guid>

					<description><![CDATA[<p>Eines der größten und beliebtesten Open Source Projekte für SAP ist zweifelsohne ABAP2XLS. Mit diesem kostenlosen Tool lassen sich einfach und im Hintergrund (!!) echte Excel-Dateien erstellen. Wer viel Excel-Dateien erstellen muss, sollte sich auf jeden Fall dieses geniale Tool anschauen!</p>
<p>Der Beitrag <a href="/blog/abap2xls/">ABAP2XLS</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Excel-Dateien lassen sich ohne weiteres aus SAP heraus erzeugen. Es gibt die Möglichkeit, dies per <a title="OLE &amp; Excel | Tricktresor" href="https://tricktresor.com/?s=ole+excel">OLE (Object Linking and Embedding)</a> oder mittels <a title="DOI &amp; Excel | Tricktresor" href="https://tricktresor.com/?s=doi+excel">DOI (Desktop Office Integration)</a> tun. Diese beiden Methoden haben jedoch zwei große Nachteile:</p>
<ol>
<li>Die Anwendung/ Erstellung von Excel-Dateien ist recht kompliziert und aufwändig</li>
<li>Dateien können nur Online, also im Dialog mit dem Anwender erzeugt werden. Die Erzeugung von Excel-Dateien im Hintergrund ist nicht möglich.</li>
</ol>
<p><img decoding="async" class="alignleft size-medium wp-image-4488" alt="ABAP2XLS - Angry Birds" src="https://tricktresor.com/wp-content/uploads/2014/02/02_20_17_41_32-300x165.jpg" width="300" height="165" srcset="/wp-content/uploads/2014/02/02_20_17_41_32-300x165.jpg 300w, /wp-content/uploads/2014/02/02_20_17_41_32.jpg 558w" sizes="(max-width: 300px) 100vw, 300px" /></p>
<p><a title="ABAP2XLS | Homepage" href="http://ivanfemia.github.io/abap2xlsx/">ABAP2XLS</a> bildet die meisten Funktionen &#8211; und das sind sehr viele!! &#8211; mit eigenen Klassen und Methoden ab. Die Entwicklung wird von einer Gruppe sehr engagierter SAP-Programmierer stetig weiter geführt und verbessert.</p>
<p>Eine kurze Übersicht über die Funktionen und das Entwicklerteam gibt es im <a title="ABAP2XLS | SCN" href="http://scn.sap.com/community/abap/blog/2010/07/12/abap2xlsx--generate-your-professional-excel-spreadsheet-from-abap">SCN &#8211; ABAP2XLS</a>. Die Möglichkeiten sind wirklich fantastisch. Es können jede Menge Funktionen und Formatierungen vorgenommen werden.</p>
<h2>Demo-Programm</h2>
<p>Folgendes Demo-Programm zeigt, wie einfach es ist, eine Excel-Datei mithilfe von ABAP2XLS zu erzeugen:</p>
<pre>REPORT  zdemo_excel1.

DATA: lo_excel                TYPE REF TO zcl_excel,
      lo_worksheet            TYPE REF TO zcl_excel_worksheet,
      lo_hyperlink            TYPE REF TO zcl_excel_hyperlink,
      column_dimension        TYPE REF TO zcl_excel_worksheet_columndime.

CONSTANTS: gc_save_file_name TYPE string VALUE '01_HelloWorld.xlsx'.
INCLUDE zdemo_excel_outputopt_incl.

START-OF-SELECTION.
  " Creates active sheet
  CREATE OBJECT lo_excel.

  " Get active sheet
  lo_worksheet = lo_excel-&gt;get_active_worksheet( ).
  lo_worksheet-&gt;set_cell( ip_column = 'B' ip_row = 2 ip_value = 'Hello world' ).
  lo_worksheet-&gt;set_cell( ip_column = 'B' ip_row = 3 ip_value = sy-datum ).
  lo_worksheet-&gt;set_cell( ip_column = 'C' ip_row = 3 ip_value = sy-uzeit ).
  lo_hyperlink = zcl_excel_hyperlink=&gt;create_external_link( iv_url = 'http://www.abap2xlsx.org/' ).
  lo_worksheet-&gt;set_cell( ip_column = 'B' ip_row = 4 ip_value = 'Click here to visit abap2xlsx homepage' ip_hyperlink = lo_hyperlink ).

  column_dimension = lo_worksheet-&gt;get_column_dimension( ip_column = 'B' ).
  column_dimension-&gt;set_width( ip_width = 11 ).

*** Create output
  lcl_output=&gt;output( lo_excel ).</pre>
<p>Die Umfangreiche Demo-Sammlung ist in einem eigenen Show-Center untergebracht, in dem der Quelltext als auch die Ausgabe angezeigt werden:</p>
<p><a href="https://tricktresor.com/wp-content/uploads/2014/02/02_20_17_56_18.jpg"><img decoding="async" class="alignnone  wp-image-4489" alt="ABAP2XLS Democenter" src="https://tricktresor.com/wp-content/uploads/2014/02/02_20_17_56_18.jpg" width="100%" srcset="/wp-content/uploads/2014/02/02_20_17_56_18.jpg 1176w, /wp-content/uploads/2014/02/02_20_17_56_18-300x105.jpg 300w, /wp-content/uploads/2014/02/02_20_17_56_18-768x269.jpg 768w, /wp-content/uploads/2014/02/02_20_17_56_18-1024x359.jpg 1024w" sizes="(max-width: 1176px) 100vw, 1176px" /></a></p>
<p>Der Beitrag <a href="/blog/abap2xls/">ABAP2XLS</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Excel Datei aus R/3 erzeugen</title>
		<link>/blog/excel-datei-aus-r3-erzeugen/</link>
					<comments>/blog/excel-datei-aus-r3-erzeugen/#comments</comments>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Tue, 24 Feb 2004 15:57:16 +0000</pubDate>
				<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[EXCEL]]></category>
		<category><![CDATA[Word & Excel]]></category>
		<category><![CDATA[ole]]></category>
		<guid isPermaLink="false">http://wp.tricktresor.com/?p=177</guid>

					<description><![CDATA[<p>Mit diesem Programm ist es m&#246;glich, eine Excel-Datei zu erzeugen. Excel wird dabei 'unsichtbar' gestartet. Der Anwender bekommt davon also nichts mit, sofern er nicht gerade die Windows-Prozessliste studiert...</p>
<p>Der Beitrag <a href="/blog/excel-datei-aus-r3-erzeugen/">Excel Datei aus R/3 erzeugen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Mit diesem Programm ist es möglich, eine Excel-Datei zu erzeugen. Excel wird dabei &#8216;unsichtbar&#8217; gestartet. Der Anwender bekommt davon also nichts mit, sofern er nicht gerade die Windows-Prozessliste studiert&#8230;</p>
<p class="text1">Das folgende Programm erzeugt eine Exceldatei und speichert sie ab. Excel wird dabei nicht sichtbar gestartet! Der Anwender bekommt von dem Vorgang also nichts mit.</p>
<p class="text1">Das Programm hat so gut wie keine Fehlerbehandlung! Einzig wird abgefragt, ob das Objekt &#8220;Excel&#8221; erzeugt werden konnte.</p>
<p class="text1">Als Standard-Demoprogramm existiert <strong>RSDEMO01</strong>. Hier wird Excel sichtbar gestartet und mit Flugdaten gefüllt. Die Datei wird <u>nicht</u> gespeichert.</p>
<pre class="lang:abap decode:true ">REPORT.
TYPE-POOLS ole2.

DATA: excel         TYPE ole2_object,
      mapl          TYPE ole2_object,         " list of workbooks
      workbook      TYPE ole2_object,         " Workbook
      map           TYPE ole2_object.         " Mappe


CREATE OBJECT excel 'EXCEL.APPLICATION'.
IF sy-subrc NE 0.
  WRITE : / 'Fehler CREATE OBJECT'.
ELSE.
  SET PROPERTY OF excel   'Visible'   = 0.  "nicht sichtbar
  CALL METHOD OF excel    'Workbooks' = workbook.
  CALL METHOD OF workbook 'Add'       = map.

  PERFORM fill_cell USING 1 1 1 3 'TRICKTRESOR'.
  PERFORM fill_cell USING 2 1 1 1 'https://tricktresor.com/'.
  PERFORM fill_cell USING 5 1 1 3 'Datum'.
  PERFORM fill_cell USING 5 2 0 5 sy-datum.

  PERFORM fill_cell USING 6 1 1 3 'Uhrzeit'.
  PERFORM fill_cell USING 6 2 0 5 sy-uzeit.

  CALL METHOD OF map 'SaveAs' EXPORTING #1 = 'd:\temp\test1.xls'.
  CALL METHOD OF workbook 'CLOSE'.
  CALL METHOD OF excel 'QUIT'.
  FREE OBJECT workbook.
  FREE OBJECT excel.

ENDIF.


*---------------------------------------------------------------------*
*       FORM FILL_CELL                                                *
*---------------------------------------------------------------------*
*  –&gt;  I      Zeile                                                   *
*  –&gt;  J      Spalte                                                  *
*  –&gt;  BOLD   Fett=1, Normal=0                                        *
*  –&gt;  COL    Farbe:                                                  *
*              1=Schwarz, 2=weiss, 3=rot, 4=grün, 5=blau, 6=gelb      *
*  –&gt;  VAL    Wert                                                    *
*---------------------------------------------------------------------*
FORM fill_cell USING i j bold col val.

  DATA:
      h_zl TYPE ole2_object,           " cell
      h_f TYPE ole2_object.            " font

  CALL METHOD OF excel 'Cells'     = h_zl
       EXPORTING #1 = i #2 = j.
  SET PROPERTY OF h_zl 'Value'     = val .
  GET PROPERTY OF h_zl 'Font'      = h_f.
  SET PROPERTY OF h_f 'Bold'       = bold .
  SET PROPERTY OF h_f 'ColorIndex' = col. "Rot
  SET PROPERTY OF h_f 'Size'       = 16.

ENDFORM.</pre>
<p>Verfügbar auf Github: <a href="https://github.com/tricktresor/demo">https://github.com/tricktresor/demo</a> mit <a href="https://github.com/larshp/abapGit">abapGit</a>.</p>
<p class="sap1">
<p>&nbsp;</p>
<p>Der Beitrag <a href="/blog/excel-datei-aus-r3-erzeugen/">Excel Datei aus R/3 erzeugen</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
					<wfw:commentRss>/blog/excel-datei-aus-r3-erzeugen/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
	</channel>
</rss>
