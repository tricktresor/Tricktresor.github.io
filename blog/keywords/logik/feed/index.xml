<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	xmlns:series="https://publishpress.com/"
	>

<channel>
	<title>Logik Archive - Tricktresor</title>
	<atom:link href="/blog/keywords/logik/feed/" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Tipps und Tricks zu SAP R/3</description>
	<lastBuildDate>Tue, 14 Apr 2020 13:02:59 +0000</lastBuildDate>
	<language>de-DE</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.4.3</generator>

<image>
	<url>/wp-content/uploads/2019/02/cropped-Tricktresor-favicon-2019-32x32.png</url>
	<title>Logik Archive - Tricktresor</title>
	<link></link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Logik vs. Daten // SAP vs. SimDia¬≤ // Programmierer vs. Anwender</title>
		<link>/blog/logik-vs-daten-sap-vs-simdia%c2%b2-programmierer-vs-anwender/</link>
		
		<dc:creator><![CDATA[Enno Wulff]]></dc:creator>
		<pubDate>Wed, 08 Nov 2017 22:20:13 +0000</pubDate>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Datenbanken & Datenselektion]]></category>
		<category><![CDATA[Partner]]></category>
		<category><![CDATA[Programmierung]]></category>
		<category><![CDATA[Daten√ºbernahme]]></category>
		<category><![CDATA[Programmierer]]></category>
		<category><![CDATA[Customizing]]></category>
		<category><![CDATA[Anwender]]></category>
		<category><![CDATA[Entwicklung]]></category>
		<category><![CDATA[Logik]]></category>
		<category><![CDATA[Kunde]]></category>
		<category><![CDATA[simdia]]></category>
		<category><![CDATA[Datenstruktur]]></category>
		<category><![CDATA[Entwickler]]></category>
		<guid isPermaLink="false">https://tricktresor.com/?p=1018010</guid>

					<description><![CDATA[<p>Ein paar mehr oder weniger philosophische Gedanken, die ich mir gemacht habe. Manches flie√üt einfach und will heraus. Ansonsten kann ich nicht schlafen, weil mir diese Gedanken immer und immer wieder im Kopf herum spuken. Um so sch√∂ner, wenn dabei der Bogen zu meinem Lieblings-AddOn "SimDia¬≤" geschlagen werden kann. Den Kampf zwischen Anwender und Entwickler, Logik und Daten werden hoffentlich viele kennen. </p>
<p>Der Beitrag <a href="/blog/logik-vs-daten-sap-vs-simdia%c2%b2-programmierer-vs-anwender/">Logik vs. Daten // SAP vs. SimDia¬≤ // Programmierer vs. Anwender</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></description>
										<content:encoded><![CDATA[<p>Ich bin Programmierer aus Leidenschaft. Ich liebe es, Daten so zu maltr√§tieren, umzuformen und anzureichern, dass eine f√ºr den Menschen sinnvolle Darstellung dabei herauskommt. Ebenso liebe ich es, Anforderungen so umzusetzen, dass am Ende ein paar zufriedene Anwender vor dem PC und wohlgeformte Daten auf der Datenbank sind. Zudem bin ich bestrebt, die Programmierungen so universell und wiederverwendbar wie m√∂glich zu gestalten.</p>
<p>Voraussetzung daf√ºr ist, dass der Anwender oder Kunde sich exzellent ausdr√ºcken kann und sehr genau wei√ü, was er m√∂chte und seine Prozesse und Daten selbst gut kennt. Dabei ist nicht nur der aktuelle Zustand wichtig, sondern auch, wie es mit den Daten weiter gehen soll. Wie m√ºssen sie weiter verarbeitet werden? Inwieweit m√ºssen sie wie lange √§nderbar sein? H√§ufig m√ºssen im Nachhinein wilde Verrenkungen gemacht werden, um Dinge zu pr√ºfen oder sicherzustellen, die bei sorgf√§ltiger Planung &#8211; ich glaube so etwas nennt man 360¬∞-Sicht &#8211; nicht n√∂tig gewesen w√§re.</p>
<p>Zugegebener Ma√üen ist das nicht immer m√∂glich, denn sehr oft entwickeln sich Dinge einfach. Aus einem ehemals kleinen Auswertungsreport entsteht nach und nach die Schaltzentrale f√ºr eine ganze Abteilung.</p>
<h2>Daten</h2>
<p>Die Daten sind tats√§chlich der wichtigste Bestandteil bei der Programmierung in einem ERP-System. Dadurch, dass die Daten in Strukturen abgelegt und organisiert werden, ist es recht einfach, zusammengeh√∂rende Daten zu ermitteln. Es ist allerdings sehr schwer, diese Strukturen erst einmal zu erkennen und dann zu erzeugen. Zudem ist es schwer, wenn nicht gar unm√∂glich, anhand der Daten die Zugeh√∂rigkeit zu Prozessen zu ermitteln. Um die zu einem Prozess notwendigen Daten zu wissen, m√ºsste ein detailliertes Datenflussdiagramm erstellt werden. Das wird jedoch kaum gemacht, denn es ist unendlich viel Arbeit und starken √Ñnderungen unterworfen.</p>
<h2>Logik</h2>
<p>F√ºr einen Programmierer ist es sehr wichtig zu wissen, wo welche Daten stehen und wie sie verarbeitet werden m√ºssen. Der Programmierer muss die Daten so verarbeiten, dass am Ende das gew√ºnschte Ergebnis heraus kommt. Daf√ºr ist es notwendig, dass er bestimmte Logiken anwendet. Einige Logiken ergeben sich aus den Einstellungen im Customizing, andere Logiken m√ºssen vom Fachbereich bzw. dem Kunden vorgegeben werden. Sofern es genug &#8220;Beweismaterial&#8221; gibt, k√∂nnen aus speziellen Anforderungen allgemein g√ºltige Logiken abgeleitet werden. Diese wiederum k√∂nnen im Kundeneigenen Customizing abgebildet werden. Dies hat den Vorteil, dass die L√∂sung flexibel und vom Kunden steuerbar ist.</p>
<h2>Programmierer</h2>
<p>Ja, es mag ein Klischee sein, aber Programmierer sind ein wundersames V√∂lkchen. Ich spreche aus eigener Erfahrung&#8230; <img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f609.png" alt="üòâ" class="wp-smiley" style="height: 1em; max-height: 1em;" />¬† Programmierer sind in der Regel sehr Technik-affin und sind mehr daran interessiert, eine m√∂glichst <em>figgelinsche</em>¬†L√∂sung zu pr√§sentieren oder eine besonders komplexe Aufgabenstellung zu meistern. In der Regel haben Programmierer wenig Sinn f√ºr Design und Layout. Ja, es gibt Ausnahmen&#8230;! Aber meistens bilden Programmierer genau das ab, was in der Vorgabe steht &#8211; egal wie es aussieht und ob es den SAP-Design-Vorgaben gleich in mehreren Ebenen widerspricht. Der einfachste Weg, einen Programmierer zur Arbeit zu bewegen ist, ihm zu sagen: &#8220;Das geht nicht. Haben schon andere versucht&#8221;.</p>
<h2>Anwender</h2>
<p>Auch Anwender sind h√§ufig <em>speziell</em>. Sie m√ºssen mit ihrer Arbeit fertig werden und sie wollen ihre Arbeit in der Regel gut machen. Anwender verstehen ihre Daten und ihre Prozesse. Aber sie k√∂nnen h√§ufig nicht einsch√§tzen welche Auswirkungen √Ñnderungen in ihrem Bereich auf andere Teile der Firma haben. Zudem sch√§tzen sie h√§ufig die Komplexit√§t von Programmieraufgaben falsch ein. Dinge, die einfach zu programmieren sind, weil bereits √§hnliche Programmierungen vorhanden sind oder es eine SAP-Funktion daf√ºr gibt, werden eventuell als zu komplex abgetan. Andererseits werden Dinge, die sich verbal einfach ausdr√ºcken lassen und <em>offensichtlich</em> sind, als einfach eingesch√§tzt. Dabei sind gerade diese Dinge schwer und aufw√§ndig zu programmieren.</p>
<h2>Programmierer vs. Anwender</h2>
<p>Im allgemeinen mehr oder weniger chaotischen Durcheinander, was in einigen Firmen <em>Alltag</em> genannt wird, m√ºssen Programmierer und Anwender (Fachbereiche) miteinander auskommen und sich gegenseitig soweit verstehen, dass eindeutige Ergebnisse erzielt werden. Ein guter Programmierer wird versuchen, ein Schema, eine Logik, eine allgemein g√ºltige Regel zu finden oder scheinbar allgemein g√ºltige Regeln zu hinterfragen. Ein guter Anwender kennt seine Daten und Prozesse und¬†erkennt Daten, die &#8220;nicht passen&#8221; oder &#8220;unsinnig&#8221; sind. Dahingehend unterscheiden sich in der Regel Programmierer und Anwender. Denn genau das, was der eine kann, kann der andere mit ziemlicher Sicherheit nicht. Ein Programmierer kann nicht erkennen, ob Daten unsinnig sind und ein Anwender erkennt selten die technische Logik hinter bestimmten Prozessen oder Funktionen.</p>
<h2>Logik vs. Daten</h2>
<p>F√ºr einen Anwender ist es eventuell einfacher &#8220;seine&#8221; Daten so zu ordnen, wie sie f√ºr ihn aktuell sinnvoll und wichtig sind. Um Daten aus einem Fremdsystem oder manuell erarbeiteten Prozessen in ein SAP-System zu √ºbernehmen gibt es im Grunde zwei maschinelle M√∂glichkeiten</p>
<ol>
<li>Anwender und Programmierer setzen sich zusammen und definieren eine Datenstruktur. Sie besprechen, welche Daten wann unter welchen Bedingungen wo hin m√ºssen. Der Programmierer arbeitet in der Regel mit <strong>einer</strong>¬†(je nach Anforderung nat√ºrlich auch mit mehreren) allgemeinen Datenstruktur. Felder, die f√ºr einen Datensatz nicht relevant sind, bleiben leer. Der Programmierer erstellt dann ein Programm mit den entsprechenden Regeln, um die Daten ins SAP-System zu schreiben.</li>
<li>Der Anwender baut sich seine Daten in Gruppen so zusammen, wie sie f√ºr ihn logisch sind. Dabei ist es egal, dass er 12 Excel-Bl√§tter hat, die alle zu 90% die gleiche Struktur haben. F√ºr ihn ist wichtig, dass er die komplexen Daten m√∂glichst einfach gruppieren und verwalten kann. Der Anwender kann dann einen einfachen Prozess starten, um die Daten zu √ºbernehmen (zum Beispiel mit SimDia¬≤).</li>
</ol>
<p>Die erste L√∂sung w√ºrde ich als Programmierer nat√ºrlich immer bevorzugen. Immerhin verdiene ich damit mein Geld. Es ist jedoch nicht von der Hand zu weisen, dass eine Programmierung fast immer recht kompliziert ist. Es sind Absprachen mit dem Auftraggeber notwendig, es muss getestet werden, es m√ºssen Programme transportiert werden usw. Zudem erfordert die Arbeit in der Ausf√ºhrung h√§ufig zwei Leute: Einen aus der IT (Programmierer), der Daten in ein Verzeichnis schiebt, Daten hochl√§dt, Daten konvertiert und so weiter. Der Anwender ist hilflos, wenn etwas nicht so funktioniert, wie er es erwartet.</p>
<p>Die zweite L√∂sung mag auf den ersten Blick nicht professionell erscheinen. Im Hinblick darauf, dass Daten meistens regelm√§√üig und von beliebigen Personen √ºbernommen werden sollen, wird eine &#8220;Frickell√∂sung&#8221; h√§ufig nicht in Betracht gezogen.</p>
<p>Dass der Anwender meistens gar nichts machen kann, liegt h√§ufig an diesen zwei Umst√§nden:</p>
<ol>
<li>Es gibt h√§ufig keine guten M√∂glichkeiten f√ºr einen Anwender, Daten massenhaft in ein SAP-System zu importieren.</li>
<li>Die IT-Abteilung hat f√ºr kleinere Aufgaben h√§ufig keine Zeit und keine Kapazit√§ten.</li>
</ol>
<p>Die cleverste M√∂glichkeit, von der ich geh√∂rt habe ist die folgende: Ein Poweruser (also ein Benutzer mit hinreichend guten Berechtigungen zum Ausf√ºhren von Programmen) hat sich die Batchinputstruktur zu einem SAP-Standard-√úbernahmeprogramm genommen, diese in Word bearbeitet und mit Hilfe der Serienbrieffunktion eine Batchinputdatei f√ºr seine Daten generiert. Die so erzeugten Batchinputmappen hat der Anwender dann eingespielt. Ich wei√ü leider nicht mehr genau, um welche Daten es sich handelte.</p>
<p>Diese L√∂sung erfordert jedoch umfangreiche Berechtigungen, sehr gutes Word- und Excelwissen sowie nat√ºrlich ein vorhandenes SAP-√úbernahmeprogramm.</p>
<h2>Alternative SimDia¬≤</h2>
<p>Das Addon <a href="https://ersasoft.de/de/simdia/?s=tt">SimDia¬≤</a> von <a href="https://ersasoft.de/de/?s=tt">Ersasoft</a> ist eine &#8211; gemessen am Nutzen &#8211; kosteng√ºnstige Alternative f√ºr den Fachbereich um allt√§glich wiederkehrende Daten√ºbernahmen einfach und effizient zu erledigen. Der Anwender hat zumeist hinreichende Excel-Kenntnisse und er kennt seine SAP-Anwendungen. Die Bedienung von SimDia¬≤ ist sehr leicht und darauf ausgelegt, wiederkehrende Datenimporte von Excel nach SAP auszuf√ºhren.</p>
<p><a href="https://ersasoft.de/de/simdia/?s=tt"><img fetchpriority="high" decoding="async" class="alignnone size-full wp-image-1018210" src="https://tricktresor.com/wp-content/uploads/2017/11/starten-sie-mit-ihren-daten-durch2.png" alt="" width="760" height="323" srcset="/wp-content/uploads/2017/11/starten-sie-mit-ihren-daten-durch2.png 760w, /wp-content/uploads/2017/11/starten-sie-mit-ihren-daten-durch2-300x128.png 300w" sizes="(max-width: 760px) 100vw, 760px" /></a></p>
<p>Beispiele f√ºr die Anwendung sind:</p>
<ol>
<li>√úbernahme von Vertriebsst√ºcklisten</li>
<li>Ausf√ºhrung von Buchungen</li>
<li>Anlage von Fertigungsauftr√§gen</li>
<li>Gezieltes √Ñndern von Materialst√§mmen</li>
</ol>
<p>SimDia¬≤ kann sogar dazu genutzt werden, um Daten aus einem SAP-System f√ºr Auswertungszwecke zu sammeln, da SimDia¬≤ Felder einer SAP-Transaktion auslesen kann. Ein Anwender kann sich so also gezielt selber Listen erstellen, ohne dass er die entsprechenden SAP-Tabellen kennen muss. Besonders gut funktioniert das bei Daten, die f√ºr einen Programmierer nur sehr umst√§ndlich zu ermitteln sind, da die Daten auf viele untereinander verkn√ºpfte Tabellen verteilt sind.</p>
<p>Der Beitrag <a href="/blog/logik-vs-daten-sap-vs-simdia%c2%b2-programmierer-vs-anwender/">Logik vs. Daten // SAP vs. SimDia¬≤ // Programmierer vs. Anwender</a> erschien zuerst auf <a href="/">Tricktresor</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
